# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical analysis and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio updates. It details the existing logic, identifies insertion points for the required changes, and presents before-and-after code snippets for all affected files. The goal is to enable seamless ingestion of market prices, update portfolio valuations and risk metrics, enhance error handling and logging, and maintain a historical record of prices.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The application consists of batch and portfolio programs that process recovery actions, update portfolio records, handle errors, and generate audit reports. Data structures are defined in copybooks and shared across modules. The flow involves initialization, validation, main processing, error handling, and reporting.

### 2.2 Detailed Logic  

#### **src/programs/batch/RCVPRC00.cbl**
- **1000-INITIALIZE-RECOVERY (Lines ~20-40):**  
  Initializes recovery mode, opens files, sets up working storage.
- **2000-PROCESS-RECOVERY (Lines ~50-80):**  
  Main recovery loop, executes recovery actions, updates status.
- **1200-VALIDATE-REQUEST (Lines ~90-110):**  
  Validates incoming recovery requests.
- **9000-ERROR-ROUTINE (Lines ~250-270):**  
  Handles errors, logs messages, sets return codes.

#### **src/programs/portfolio/PORTUPDT.cbl**
- **2000-PROCESS (Lines ~30-50):**  
  Reads update records, processes each update.
- **2100-PROCESS-UPDATE (Lines ~60-80):**  
  Locates portfolio record, validates, applies update.
- **2200-APPLY-UPDATE (Lines ~90-120):**  
  Applies changes to portfolio fields, rewrites record.

#### **src/copybook/common/PORTFLIO.cpy**
- **Portfolio Data Structure (Lines 1-34):**  
  Defines fields for portfolio records, including ID, account, client info, status, values, and balances.

#### **src/programs/batch/RPTAUD00.cbl**
- **2000-PROCESS-REPORT (Lines ~40-60):**  
  Processes audit and error logs, summarizes and writes report.
- **9999-ERROR-HANDLER (Lines ~130-147):**  
  Handles errors, logs messages, sets return codes.

#### **src/copybook/common/AUDITLOG.cpy**
- **Audit Log Data Structure (Lines 1-36):**  
  Defines fields for audit events, including timestamps, program/user info, action details, before/after images, messages, and status.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    InitRecovery["1000-INITIALIZE-RECOVERY"]
    ValidateRequest["1200-VALIDATE-REQUEST"]
    ProcessRecovery["2000-PROCESS-RECOVERY"]
    ErrorRoutine["9000-ERROR-ROUTINE"]
    PortfolioProcess["PORTUPDT: 2000-PROCESS"]
    ProcessUpdate["PORTUPDT: 2100-PROCESS-UPDATE"]
    ApplyUpdate["PORTUPDT: 2200-APPLY-UPDATE"]
    AuditReport["RPTAUD00: 2000-PROCESS-REPORT"]
    ErrorHandler["RPTAUD00: 9999-ERROR-HANDLER"]
    End(["End"])

    Start --> InitRecovery
    InitRecovery --> ValidateRequest
    ValidateRequest --> ProcessRecovery
    ProcessRecovery --> PortfolioProcess
    PortfolioProcess --> ProcessUpdate
    ProcessUpdate --> ApplyUpdate
    ApplyUpdate --> AuditReport
    AuditReport --> ErrorHandler
    ErrorRoutine --> ErrorHandler
    ErrorHandler --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates:**  
- Ingest real-time market prices.
- Update portfolio valuations and risk metrics.
- Enhance error handling and logging.
- Maintain historical record of prices.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/RCVPRC00.cbl:**  
  *Sections:* 1000-INITIALIZE-RECOVERY, 2000-PROCESS-RECOVERY, 1200-VALIDATE-REQUEST, 9000-ERROR-ROUTINE  
  *Purpose of Changes:* Integrate market price feed, trigger downstream updates, enhance error handling and logging.  
  *Impact:* Enables real-time ingestion and error tracking for market prices.

- **src/programs/portfolio/PORTUPDT.cbl:**  
  *Sections:* 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE  
  *Purpose of Changes:* Update portfolio values and risk metrics using new prices, record historical prices.  
  *Impact:* Ensures portfolios reflect latest market data.

- **src/copybook/common/PORTFLIO.cpy:**  
  *Sections:* Entire data structure  
  *Purpose of Changes:* Add fields for last market price and timestamp.  
  *Impact:* Supports storing latest price and time for each portfolio.

- **src/programs/batch/RPTAUD00.cbl:**  
  *Sections:* 2000-PROCESS-REPORT, 9999-ERROR-HANDLER  
  *Purpose of Changes:* Report historical price changes and feed errors.  
  *Impact:* Improves auditability and compliance.

- **src/copybook/common/AUDITLOG.cpy:**  
  *Sections:* Entire data structure  
  *Purpose of Changes:* Add fields for market price and timestamp in audit logs.  
  *Impact:* Enables historical tracking of price updates and errors.

### 3.3 Insertion Points  
- **RCVPRC00.cbl:**  
  - After `1000-INITIALIZE-RECOVERY`: Insert logic to connect to market price feed.  
  - In `2000-PROCESS-RECOVERY`: After each recovery action, check for new price data and trigger updates.  
  - In `9000-ERROR-ROUTINE`: Log feed failures and outdated prices.

- **PORTUPDT.cbl:**  
  - In `2200-APPLY-UPDATE`: After updating `PORT-TOTAL-VALUE`, recalculate using latest market price and record in history.  
  - On update failure, log to audit/error log.

- **PORTFLIO.cpy:**  
  - Add `PORT-LAST-MARKET-PRICE` and `PORT-LAST-PRICE-TIMESTAMP` fields.

- **RPTAUD00.cbl:**  
  - In `2000-PROCESS-REPORT`: Extract and report historical price changes.  
  - In `9999-ERROR-HANDLER`: Trigger alert if price feed is stale.

- **AUDITLOG.cpy:**  
  - Add `AUD-MARKET-PRICE` and `AUD-PRICE-TIMESTAMP` fields.

### 3.4 Structured Diffs  

#### **src/copybook/common/PORTFLIO.cpy**
**Before:**  
```cobol
01  PORT-RECORD.
    05  PORT-ID           PIC X(10).
    05  PORT-ACCOUNT-NO   PIC 9(10).
    05  PORT-CLIENT-NAME  PIC X(30).
    05  PORT-CLIENT-TYPE  PIC X(01).
    05  PORT-STATUS       PIC X(01).
    05  PORT-CREATE-DATE  PIC 9(8).
    05  PORT-LAST-MAINT   PIC 9(8).
    05  PORT-TOTAL-VALUE  PIC 9(15)V99.
    05  PORT-CASH-BALANCE PIC 9(15)V99.
    05  PORT-TOTAL-UNITS  PIC 9(10).
    05  PORT-TOTAL-COST   PIC 9(15)V99.
    05  FILLER            PIC X(20).
```
**After:**  
```cobol
01  PORT-RECORD.
    05  PORT-ID           PIC X(10).
    05  PORT-ACCOUNT-NO   PIC 9(10).
    05  PORT-CLIENT-NAME  PIC X(30).
    05  PORT-CLIENT-TYPE  PIC X(01).
    05  PORT-STATUS       PIC X(01).
    05  PORT-CREATE-DATE  PIC 9(8).
    05  PORT-LAST-MAINT   PIC 9(8).
    05  PORT-TOTAL-VALUE  PIC 9(15)V99.
    05  PORT-LAST-MARKET-PRICE PIC 9(15)V99.
    05  PORT-LAST-PRICE-TIMESTAMP PIC 9(14).
    05  PORT-CASH-BALANCE PIC 9(15)V99.
    05  PORT-TOTAL-UNITS  PIC 9(10).
    05  PORT-TOTAL-COST   PIC 9(15)V99.
    05  FILLER            PIC X(20).
```

---

#### **src/copybook/common/AUDITLOG.cpy**
**Before:**  
```cobol
01  AUDIT-RECORD.
    05  AUD-TIMESTAMP     PIC 9(14).
    05  AUD-PROGRAM       PIC X(08).
    05  AUD-USER-ID       PIC X(08).
    05  AUD-TYPE          PIC X(06).
    05  AUD-ACTION        PIC X(08).
    05  AUD-PORTFOLIO-ID  PIC X(10).
    05  AUD-ACCOUNT-NO    PIC 9(10).
    05  AUD-BEFORE-IMAGE  PIC X(100).
    05  AUD-AFTER-IMAGE   PIC X(100).
    05  AUD-MESSAGE       PIC X(80).
    05  AUD-STATUS        PIC X(04).
    05  FILLER            PIC X(20).
```
**After:**  
```cobol
01  AUDIT-RECORD.
    05  AUD-TIMESTAMP     PIC 9(14).
    05  AUD-PROGRAM       PIC X(08).
    05  AUD-USER-ID       PIC X(08).
    05  AUD-TYPE          PIC X(06).
    05  AUD-ACTION        PIC X(08).
    05  AUD-PORTFOLIO-ID  PIC X(10).
    05  AUD-ACCOUNT-NO    PIC 9(10).
    05  AUD-MARKET-PRICE  PIC 9(15)V99.
    05  AUD-PRICE-TIMESTAMP PIC 9(14).
    05  AUD-BEFORE-IMAGE  PIC X(100).
    05  AUD-AFTER-IMAGE   PIC X(100).
    05  AUD-MESSAGE       PIC X(80).
    05  AUD-STATUS        PIC X(04).
    05  FILLER            PIC X(20).
```

---

#### **src/programs/batch/RCVPRC00.cbl**
**Before:**  
```cobol
1000-INITIALIZE-RECOVERY.
    PERFORM 1100-OPEN-FILES
    PERFORM 1200-VALIDATE-REQUEST
    PERFORM 1300-SET-RECOVERY-MODE
```
**After:**  
```cobol
1000-INITIALIZE-RECOVERY.
    PERFORM 1100-OPEN-FILES
    PERFORM 1200-VALIDATE-REQUEST
    PERFORM 1300-SET-RECOVERY-MODE
    PERFORM 1400-INIT-MARKET-FEED
```
*(New paragraph 1400-INIT-MARKET-FEED connects to market price feed and initializes polling.)*

---

**Before:**  
```cobol
2000-PROCESS-RECOVERY.
    PERFORM UNTIL END-OF-RECOVERY
        PERFORM 2100-RECOVER-PROCESS
    END-PERFORM
```
**After:**  
```cobol
2000-PROCESS-RECOVERY.
    PERFORM UNTIL END-OF-RECOVERY
        PERFORM 2100-RECOVER-PROCESS
        PERFORM 2150-CHECK-MARKET-PRICE
    END-PERFORM
```
*(New paragraph 2150-CHECK-MARKET-PRICE checks for new market price data and triggers updates.)*

---

**Before:**  
```cobol
9000-ERROR-ROUTINE.
    MOVE 'RCVPRC00' TO ERR-PROGRAM
    CALL 'ERRPROC' USING ERR-MESSAGE
```
**After:**  
```cobol
9000-ERROR-ROUTINE.
    MOVE 'RCVPRC00' TO ERR-PROGRAM
    CALL 'ERRPROC' USING ERR-MESSAGE
    PERFORM 9100-LOG-FEED-ERROR
```
*(New paragraph 9100-LOG-FEED-ERROR logs market feed errors to audit log.)*

---

#### **src/programs/portfolio/PORTUPDT.cbl**
**Before:**  
```cobol
2200-APPLY-UPDATE.
    EVALUATE TRUE
        WHEN UPDT-STATUS
            MOVE UPDT-NEW-VALUE TO PORT-STATUS
        WHEN UPDT-NAME
            MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
        WHEN UPDT-VALUE
            MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
            MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
    END-EVALUATE
    REWRITE PORT-RECORD
        IF WS-SUCCESS-STATUS
            ADD 1 TO WS-UPDATE-COUNT
        ELSE
            ADD 1 TO WS-ERROR-COUNT
            DISPLAY 'Update failed for: ' PORT-KEY
        END-IF
```
**After:**  
```cobol
2200-APPLY-UPDATE.
    EVALUATE TRUE
        WHEN UPDT-STATUS
            MOVE UPDT-NEW-VALUE TO PORT-STATUS
        WHEN UPDT-NAME
            MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
        WHEN UPDT-VALUE
            MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
            MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
    END-EVALUATE
    PERFORM 2250-UPDATE-MARKET-PRICE
    REWRITE PORT-RECORD
        IF WS-SUCCESS-STATUS
            ADD 1 TO WS-UPDATE-COUNT
            PERFORM 2260-LOG-PRICE-HISTORY
        ELSE
            ADD 1 TO WS-ERROR-COUNT
            DISPLAY 'Update failed for: ' PORT-KEY
            PERFORM 2270-LOG-UPDATE-ERROR
        END-IF
```
*(New paragraphs 2250-UPDATE-MARKET-PRICE, 2260-LOG-PRICE-HISTORY, 2270-LOG-UPDATE-ERROR handle market price update, historical logging, and error logging.)*

---

#### **src/programs/batch/RPTAUD00.cbl**
**Before:**  
```cobol
2000-PROCESS-REPORT.
    PERFORM 2100-PROCESS-AUDIT-TRAIL
    PERFORM 2200-PROCESS-ERROR-LOG
    PERFORM 2300-WRITE-SUMMARY
```
**After:**  
```cobol
2000-PROCESS-REPORT.
    PERFORM 2100-PROCESS-AUDIT-TRAIL
    PERFORM 2150-REPORT-PRICE-HISTORY
    PERFORM 2200-PROCESS-ERROR-LOG
    PERFORM 2300-WRITE-SUMMARY
```
*(New paragraph 2150-REPORT-PRICE-HISTORY extracts and reports historical price changes.)*

---

**Before:**  
```cobol
9999-ERROR-HANDLER.
    DISPLAY WS-ERROR-MESSAGE
    MOVE 12 TO RETURN-CODE
    GOBACK
```
**After:**  
```cobol
9999-ERROR-HANDLER.
    DISPLAY WS-ERROR-MESSAGE
    PERFORM 9998-ALERT-STALE-FEED
    MOVE 12 TO RETURN-CODE
    GOBACK
```
*(New paragraph 9998-ALERT-STALE-FEED triggers alert if price feed is stale.)*

---

## 4. Conclusion  
The proposed changes enable real-time market price feed integration, dynamic portfolio valuation updates, robust error handling, comprehensive logging, and historical price tracking. These enhancements ensure the legacy COBOL application remains responsive to market conditions, improves auditability, and supports future modernization efforts. All modifications adhere to COBOL standards and are structured for clarity and ease of review.


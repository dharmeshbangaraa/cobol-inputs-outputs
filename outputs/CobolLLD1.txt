# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the logic and flow of the COBOL legacy application modules impacted by the addition of a new `TRANSACTION-TYPE` field to the transaction record. It provides a comprehensive explanation of the existing system, the rationale and specifics of the required changes, and clear guidance for implementation. The goal is to ensure maintainability, backward compatibility, and clarity for all stakeholders.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The COBOL application processes business-critical transactions via batch processing and reporting modules, using a shared transaction record structure (`TRNREC.cpy`). The main programs are:

- **PORTTRAN.cbl**: Batch transaction processing (reading, validating, updating, and auditing transactions).
- **RPTPOS00.cbl**: Reporting (reading transactions and generating daily position reports).
- **TRNREC.cpy**: Copybook defining the transaction record structure used by both programs.

### 2.2 Detailed Logic  

#### 2.2.1 `TRNREC.cpy` (Transaction Record Copybook)
Defines the structure for each transaction, including keys, type, quantity, price, and audit info. The field `TRN-TYPE` (PIC X(02)) encodes the transaction type (e.g., 'BU' for Buy, 'SL' for Sell).

#### 2.2.2 `PORTTRAN.cbl` (Batch Processing)
- **Initialization**: Opens files, initializes counters and status flags.
- **Processing**: Reads each transaction, validates type, updates positions, and writes to the audit trail.
- **Termination**: Closes files and displays processing statistics.

#### 2.2.3 `RPTPOS00.cbl` (Reporting)
- **Initialization**: Opens files and writes report headers.
- **Processing**: Reads transactions, aggregates data, and writes detailed and summary reports.
- **Termination**: Closes files and finalizes the report.

#### Flowchart:  
```mermaid
flowchart TD
    Start([Start])
    Init([Initialization])
    ReadTrans([Read Transaction Record])
    Validate([Validate Transaction])
    Process([Process Transaction])
    UpdateAudit([Update Audit Trail])
    NextTrans([Next Transaction?])
    End([End])

    Start --> Init
    Init --> ReadTrans
    ReadTrans --> Validate
    Validate --> Process
    Process --> UpdateAudit
    UpdateAudit --> NextTrans
    NextTrans -- Yes --> ReadTrans
    NextTrans -- No --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add a `TRANSACTION-TYPE` field (PIC X(10)) to the transaction record structure. Update batch processing and reporting programs to accept, process, and display this new field, ensuring backward compatibility for legacy records.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File                | Sections/Paragraphs Impacted                                            |
|---------------------|-------------------------------------------------------------------------|
| TRNREC.cpy          | 01 TRANSACTION-RECORD, 05 TRN-DATA                                      |
| PORTTRAN.cbl        | 2000-PROCESS-TRANSACTIONS, 2100-VALIDATE-TRANSACTION, 2120-CHECK-TRANSACTION-TYPE, 2200-UPDATE-POSITIONS, 2210-PROCESS-BUY, 2220-PROCESS-SELL, 2230-PROCESS-TRANSFER, 2240-PROCESS-FEE, 2300-UPDATE-AUDIT-TRAIL |
| RPTPOS00.cbl        | 2000-PROCESS-REPORT, 2100-TRANSACTION-ACTIVITY, 2200-WRITE-TRANSACTION-DETAIL |

- **Purpose of Changes:**  
  To enable richer transaction categorization and reporting by supporting a descriptive transaction type field, while maintaining compatibility with existing short codes.

- **Impact:**  
  All transaction processing and reporting logic will be able to use/display the new field if present, or fall back to the legacy code if not. This affects data structures, validation, audit, and reporting.

### 3.3 Insertion Points  

#### 3.3.1 `TRNREC.cpy`
- **Where:** After `TRN-TYPE` in the `05 TRN-DATA` group.
- **What:** Add `TRANSACTION-TYPE PIC X(10).`

#### 3.3.2 `PORTTRAN.cbl`
- **Where:** In transaction validation and processing logic (e.g., `2120-CHECK-TRANSACTION-TYPE`).
- **What:** If `TRANSACTION-TYPE` is blank, derive it from `TRN-TYPE` for backward compatibility.

#### 3.3.3 `RPTPOS00.cbl`
- **Where:** In report generation logic (e.g., `2200-WRITE-TRANSACTION-DETAIL`).
- **What:** Display `TRANSACTION-TYPE` if present, otherwise map `TRN-TYPE` to a description.

### 3.4 Structured Diffs  

#### 3.4.1 `TRNREC.cpy`

**Before:**  
```cobol
   05  TRN-DATA.
       10  TRN-INVESTMENT-ID  PIC X(10).
       10  TRN-TYPE           PIC X(02).
           88  TRN-TYPE-BUY     VALUE 'BU'.
           88  TRN-TYPE-SELL    VALUE 'SL'.
           88  TRN-TYPE-TRANS   VALUE 'TR'.
           88  TRN-TYPE-FEE     VALUE 'FE'.
       10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
       ...
```
**After:**  
```cobol
   05  TRN-DATA.
       10  TRN-INVESTMENT-ID  PIC X(10).
       10  TRN-TYPE           PIC X(02).
           88  TRN-TYPE-BUY     VALUE 'BU'.
           88  TRN-TYPE-SELL    VALUE 'SL'.
           88  TRN-TYPE-TRANS   VALUE 'TR'.
           88  TRN-TYPE-FEE     VALUE 'FE'.
       10  TRANSACTION-TYPE    PIC X(10). *> NEW FIELD
       10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
       ...
```

#### 3.4.2 `PORTTRAN.cbl`

**Before:**  
```cobol
2120-CHECK-TRANSACTION-TYPE.
    EVALUATE TRN-TYPE
        WHEN 'BU'
        WHEN 'SL'
        WHEN 'TR'
        WHEN 'FE'
            CONTINUE
        WHEN OTHER
            STRING 'Invalid Transaction Type: '
                   TRN-TYPE
               DELIMITED BY SIZE
               INTO ERR-TEXT
    END-EVALUATE
.
```
**After:**  
```cobol
2120-CHECK-TRANSACTION-TYPE.
    IF TRANSACTION-TYPE NOT = SPACES
        *> Optionally validate TRANSACTION-TYPE against allowed values
        CONTINUE
    ELSE
        EVALUATE TRN-TYPE
            WHEN 'BU'
                MOVE 'BUY      ' TO TRANSACTION-TYPE
            WHEN 'SL'
                MOVE 'SELL     ' TO TRANSACTION-TYPE
            WHEN 'TR'
                MOVE 'TRANSFER ' TO TRANSACTION-TYPE
            WHEN 'FE'
                MOVE 'FEE      ' TO TRANSACTION-TYPE
            WHEN OTHER
                STRING 'Invalid Transaction Type: '
                       TRN-TYPE
                   DELIMITED BY SIZE
                   INTO ERR-TEXT
        END-EVALUATE
    END-IF
.
```

#### 3.4.3 `RPTPOS00.cbl`

**Before:**  
```cobol
* Only TRN-TYPE used for reporting
MOVE TRN-TYPE TO WS-REPORT-FIELD
```
**After:**  
```cobol
IF TRANSACTION-TYPE NOT = SPACES
    MOVE TRANSACTION-TYPE TO WS-REPORT-FIELD
ELSE
    EVALUATE TRN-TYPE
        WHEN 'BU'
            MOVE 'BUY      ' TO WS-REPORT-FIELD
        WHEN 'SL'
            MOVE 'SELL     ' TO WS-REPORT-FIELD
        WHEN 'TR'
            MOVE 'TRANSFER ' TO WS-REPORT-FIELD
        WHEN 'FE'
            MOVE 'FEE      ' TO WS-REPORT-FIELD
        WHEN OTHER
            MOVE 'UNKNOWN  ' TO WS-REPORT-FIELD
    END-EVALUATE
END-IF
```

---

## 4. Conclusion  
The addition of the `TRANSACTION-TYPE` field enables richer, more descriptive transaction processing and reporting, while preserving compatibility with legacy records. All impacted modules are updated to use the new field if present, or to derive it from the existing short code if not. This ensures a seamless transition and improved data quality for both operational and reporting needs.

---

## Appendix: Flowcharts

### Batch Processing Flow (PORTTRAN.cbl)
```mermaid
flowchart TD
    A[Read Transaction Record] --> B{TRANSACTION-TYPE present?}
    B -- Yes --> C[Use TRANSACTION-TYPE for processing/audit]
    B -- No --> D[Map TRN-TYPE to long form]
    D --> C
    C --> E[Validate and Update Portfolio]
    E --> F[Write Audit/Report]
```

### Reporting Flow (RPTPOS00.cbl)
```mermaid
flowchart TD
    A[Read Transaction Record] --> B{TRANSACTION-TYPE present?}
    B -- Yes --> C[Display TRANSACTION-TYPE]
    B -- No --> D[Map TRN-TYPE to description]
    D --> C
    C --> E[Print Report Line]
```

---

**References:**
- [`TRNREC.cpy`](src/copybook/common/TRNREC.cpy)
- [`PORTTRAN.cbl`](src/programs/portfolio/PORTTRAN.cbl)
- [`RPTPOS00.cbl`](src/programs/batch/RPTPOS00.cbl)
- [Impact Analysis Report](#)

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the addition of the `CHANNEL-CODE` field to the transaction file structure. The document details the existing logic, the rationale and scope of the required changes, and provides clear guidance and code diffs for implementing the enhancement across all affected components.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data in batch and utility programs. The transaction record structure is defined centrally in a copybook (`TRNREC.cpy`), which is included by all programs that read or write transaction data. The batch reporting program (`RPTPOS00.cbl`) and the utility validation program (`UTLVAL00.cbl`) both rely on this copybook for file I/O and processing logic.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the layout of a transaction record, including keys, transaction data, audit information, and filler.
- All programs that process transactions use this copybook to ensure consistent data structure.

#### Batch Reporting Program (`src/programs/batch/RPTPOS00.cbl`)
- **1100-OPEN-FILES (Lines 1-21):** Opens the necessary input and output files, including the transaction history file, and handles file open errors.
- **2200-PROCESS-TRANSACTIONS (Lines 1-3):** Orchestrates the reading and summarization of transaction activity by invoking subordinate paragraphs.

#### Utility Validation Program (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES (Lines 1-28):** Opens validation control, position master, transaction history, and error report files, with error handling.
- **2400-CHECK-FORMAT (Lines 1-3):** Performs format checks on position and transaction records by invoking subordinate paragraphs.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["1100-OPEN-FILES
(Open all required files)"]
    ProcessTransactions["2200-PROCESS-TRANSACTIONS
(For batch reporting)"]
    CheckFormat["2400-CHECK-FORMAT
(For validation utility)"]
    ReadTransaction["Read
Transaction Record"]
    SummarizeActivity["Summarize
Transaction Activity"]
    CheckPositionFormat["Check
Position Format"]
    CheckTransactionFormat["Check
Transaction Format"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ProcessTransactions
    OpenFiles --> CheckFormat
    ProcessTransactions --> ReadTransaction
    ReadTransaction --> SummarizeActivity
    SummarizeActivity --> End
    CheckFormat --> CheckPositionFormat
    CheckFormat --> CheckTransactionFormat
    CheckPositionFormat --> End
    CheckTransactionFormat --> End
```

---

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add a `CHANNEL-CODE` field to the transaction file structure to enable channel identification in batch processing and reporting. This change will allow downstream systems and reports to distinguish transactions by their originating channel (e.g., online, branch, mobile).

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy** (Copybook structure)
- **src/programs/batch/RPTPOS00.cbl** (1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS)
- **src/programs/utility/UTLVAL00.cbl** (1100-OPEN-FILES, 2400-CHECK-FORMAT)

- **Purpose of Changes:**  
  To introduce a new field, `CHANNEL-CODE`, into the transaction record structure, and ensure all programs that read or write transaction data are updated to handle this field. This enables accurate channel-based reporting and validation.

- **Impact:**  
  - All transaction-processing programs will now expect and process the `CHANNEL-CODE` field.
  - File layouts, record lengths, and validation logic must be updated.
  - Downstream reporting and analytics will be able to segment data by channel.

### 3.3 Insertion Points  
- **TRNREC.cpy:**  
  - Insert the `CHANNEL-CODE` field in the transaction data section, after `TRN-CURRENCY` (Line 22).
  - Update comments and field descriptions accordingly.

- **RPTPOS00.cbl:**  
  - Ensure file open logic (1100-OPEN-FILES) and transaction processing logic (2200-PROCESS-TRANSACTIONS) are compatible with the new record layout.
  - Update any logic that references the transaction record to include or process `CHANNEL-CODE` as needed.

- **UTLVAL00.cbl:**  
  - Update file open logic (1100-OPEN-FILES) and format checking logic (2400-CHECK-FORMAT) to handle the new field.
  - Add validation for `CHANNEL-CODE` in the transaction format check.

### 3.4 Structured Diffs  

#### 3.4.1 src/copybook/common/TRNREC.cpy

**Before:**  
```cobol
22          10  TRN-CURRENCY      PIC X(03).
23          10  TRN-STATUS        PIC X(01).
```

**After:**  
```cobol
22          10  TRN-CURRENCY      PIC X(03).
22A         10  TRN-CHANNEL-CODE  PIC X(04).
23          10  TRN-STATUS        PIC X(01).
```

**Before (Field Descriptions):**  
```cobol
39 * TRN-STATUS      : P=PENDING, D=DONE, F=FAILED, R=REVERSED
```

**After (Field Descriptions):**  
```cobol
39 * TRN-STATUS      : P=PENDING, D=DONE, F=FAILED, R=REVERSED
39A* TRN-CHANNEL-CODE: CHANNEL IDENTIFIER (e.g., ONLN, BRCH, MOBL)
```

---

#### 3.4.2 src/programs/batch/RPTPOS00.cbl

**1100-OPEN-FILES Paragraph**  
_No direct code change required unless file status or record length handling is hardcoded. If so, update LRECL and status checks accordingly. For illustration, assume LRECL is referenced elsewhere and must be updated, but the paragraph itself remains unchanged._

**2200-PROCESS-TRANSACTIONS Paragraph**  
_If the program outputs or processes transaction fields, ensure `TRN-CHANNEL-CODE` is included in reporting logic. For example, if summarizing by channel, add logic as follows:_

**Before:**  
```cobol
 2     PERFORM 2210-READ-TRANSACTIONS
 3     PERFORM 2220-SUMMARIZE-ACTIVITY.
```

**After:**  
```cobol
 2     PERFORM 2210-READ-TRANSACTIONS
 2A    PERFORM 2215-SUMMARIZE-BY-CHANNEL
 3     PERFORM 2220-SUMMARIZE-ACTIVITY.
```

**New Paragraph Example:**  
```cobol
2215-SUMMARIZE-BY-CHANNEL.
    IF TRN-CHANNEL-CODE = 'ONLN'
        ADD 1 TO WS-ONLINE-COUNT
    ELSE IF TRN-CHANNEL-CODE = 'BRCH'
        ADD 1 TO WS-BRANCH-COUNT
    ELSE IF TRN-CHANNEL-CODE = 'MOBL'
        ADD 1 TO WS-MOBILE-COUNT
    END-IF.
```
*(Adjust as per actual reporting requirements.)*

---

#### 3.4.3 src/programs/utility/UTLVAL00.cbl

**1100-OPEN-FILES Paragraph**  
_No direct code change required unless file status or record length handling is hardcoded. If so, update LRECL and status checks accordingly. For illustration, assume LRECL is referenced elsewhere and must be updated, but the paragraph itself remains unchanged._

**2400-CHECK-FORMAT Paragraph**  
_Add validation for the new field in the transaction format check sub-paragraph (assume 2420-CHECK-TRANSACTION-FORMAT)._

**Before (in 2420-CHECK-TRANSACTION-FORMAT):**  
```cobol
* Existing validation for transaction fields
    IF TRN-TYPE NOT = 'BU' AND
       TRN-TYPE NOT = 'SL' AND
       TRN-TYPE NOT = 'TR' AND
       TRN-TYPE NOT = 'FE'
        MOVE 'INVALID TRANSACTION TYPE'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF
```

**After:**  
```cobol
* Existing validation for transaction fields
    IF TRN-TYPE NOT = 'BU' AND
       TRN-TYPE NOT = 'SL' AND
       TRN-TYPE NOT = 'TR' AND
       TRN-TYPE NOT = 'FE'
        MOVE 'INVALID TRANSACTION TYPE'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    IF TRN-CHANNEL-CODE NOT = 'ONLN' AND
       TRN-CHANNEL-CODE NOT = 'BRCH' AND
       TRN-CHANNEL-CODE NOT = 'MOBL'
        MOVE 'INVALID CHANNEL CODE'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF
```

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure enables robust channel-based processing and reporting across the COBOL application's batch and utility modules. All impacted programs and copybooks have been identified and the required code changes detailed. These enhancements will support improved analytics, reporting, and operational flexibility, while maintaining compatibility and data integrity across the legacy system.

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the logic and flow of the COBOL legacy portfolio system, focusing on the enhancement to add a Transaction Type field to transaction processing and reporting. The document covers the existing logic, identifies insertion points for the new field, and provides structured diffs for the required changes. The goal is to ensure clarity and accuracy for developers, testers, and architects involved in the modernization and maintenance of this business-critical system.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The portfolio system processes financial transactions (buy, sell, transfer, fee) and generates daily position reports. Core components include:

- **TRNREC.cpy**: Central copybook defining the transaction record structure.
- **PORTTRAN.cbl**: Batch program for transaction validation, processing, and audit logging.
- **RPTPOS00.cbl**: Batch report generator summarizing portfolio positions and transaction activity.
- **UTLVAL00.cbl**: Utility for validating transaction formats.
- **TSTGEN00.cbl**: Test data generator for transactions.
- **TSTVAL00.cbl**: Test validation program for transaction assertions.

The system follows a modular structure with clear separation of initialization, main processing, and termination.

---

### 2.2 Detailed Logic  

#### 2.2.1 Transaction Record Structure (`TRNREC.cpy`)

- **Purpose**: Defines the data layout for all transaction records.
- **Key Fields**:
  - `TRN-DATE`, `TRN-TIME`, `TRN-PORTFOLIO-ID`, `TRN-SEQUENCE-NO`
  - `TRN-INVESTMENT-ID`, `TRN-TYPE` (BUY, SELL, TRANSFER, FEE), `TRN-QUANTITY`, `TRN-PRICE`, `TRN-AMOUNT`, `TRN-CURRENCY`, `TRN-STATUS`
  - Audit fields and filler for future expansion

#### 2.2.2 Portfolio Transaction Processing (`PORTTRAN.cbl`)

- **Initialization** (Lines ~30-70):  
  - Opens transaction and portfolio files, initializes counters and status flags.
- **Main Processing** (Lines ~71-200):  
  - Reads each transaction record.
  - Validates portfolio ID, transaction type, and amounts.
  - Updates portfolio positions based on transaction type.
  - Logs audit trail for each processed transaction.
- **Termination** (Lines ~201+):  
  - Closes files and displays summary statistics.

**Key Paragraphs:**
- `2100-VALIDATE-TRANSACTION`: Orchestrates validation steps.
- `2120-CHECK-TRANSACTION-TYPE`: Ensures transaction type is valid (`BU`, `SL`, `TR`, `FE`).
- `2200-UPDATE-POSITIONS`: Applies transaction to portfolio.
- `2300-UPDATE-AUDIT-TRAIL`: Logs transaction details for auditing.

#### 2.2.3 Daily Position Report (`RPTPOS00.cbl`)

- **Initialization**: Opens position and transaction files, writes report headers.
- **Processing**: Reads portfolio and transaction records, formats and writes summary details to the report.
- **Termination**: Closes files and handles errors.

**Key Paragraphs:**
- `2200-PROCESS-TRANSACTIONS`: Reads and processes transaction records for reporting.
- `2110-FORMAT-POSITION`: Formats position details for output.

#### 2.2.4 Validation Utility (`UTLVAL00.cbl`)

- **Purpose**: Checks transaction record format and field values.
- **Key Paragraphs**:
  - `2400-CHECK-FORMAT`
  - `2420-CHECK-TRANSACTION-FORMAT`

#### 2.2.5 Test Data Generator (`TSTGEN00.cbl`)

- **Purpose**: Generates transaction records for testing.
- **Key Paragraphs**:
  - `2300-GEN-TRANSACTION`
  - `2310-GEN-TRAN-DATA`

#### 2.2.6 Test Validator (`TSTVAL00.cbl`)

- **Purpose**: Validates test results, including transaction records.
- **Key Paragraph**:
  - `2100-EXECUTE-TEST`

---

#### Flowchart: System Control and Data Flow

```mermaid
flowchart TD
    Start([Start])
    Init([Initialization])
    ReadTrans([Read Transaction])
    Validate([Validate Transaction])
    UpdatePos([Update Portfolio])
    Audit([Update Audit Trail])
    NextTrans([Next Transaction?])
    Report([Generate Report])
    End([End])

    Start --> Init
    Init --> ReadTrans
    ReadTrans --> Validate
    Validate --> UpdatePos
    UpdatePos --> Audit
    Audit --> NextTrans
    NextTrans -- Yes --> ReadTrans
    NextTrans -- No --> Report
    Report --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add Transaction Type field to transaction processing and reporting in COBOL portfolio system.

- **Goal:** Record and display the type of each transaction (e.g., BUY, SELL, DIVIDEND) in both processing and reporting programs for compliance and business insights.
- **Scope:** Update transaction record layout (copybook), batch processing, and reporting programs. Ensure backward compatibility.

---

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File/Section            | Purpose of Changes                                                                 | Impact on System                                  |
|-------------------------|-----------------------------------------------------------------------------------|---------------------------------------------------|
| TRNREC.cpy              | Add/expand Transaction Type field (e.g., allow more types, increase length)       | All programs using transaction records are affected|
| PORTTRAN.cbl            | Validate, process, and audit new transaction types                                | Ensures correct processing and audit logging       |
| RPTPOS00.cbl            | Display new transaction type in reports                                           | Improves reporting and compliance                 |
| UTLVAL00.cbl            | Validate new transaction type field                                               | Ensures data integrity                            |
| TSTGEN00.cbl            | Generate test data with new transaction types                                     | Improves test coverage                            |
| TSTVAL00.cbl            | Validate test results for new transaction types                                   | Ensures test accuracy                             |

**Purpose of Changes:**  
To support new transaction types (e.g., DIVIDEND, INTEREST), improve reporting, and maintain regulatory compliance.

**Impact:**  
- All transaction processing and reporting logic must recognize and handle the new field.
- Backward compatibility must be maintained for legacy records.
- Test and validation utilities must be updated to cover new scenarios.

---

### 3.3 Insertion Points

| File           | Section/Paragraph              | Description of Change                                                                                 |
|----------------|-------------------------------|------------------------------------------------------------------------------------------------------|
| TRNREC.cpy     | TRN-TYPE field                | Expand field length (e.g., PIC X(02) â†’ PIC X(08)), add new 88-level values for new types             |
| PORTTRAN.cbl   | 2120-CHECK-TRANSACTION-TYPE   | Update EVALUATE to include new types (e.g., 'DV' for DIVIDEND, 'IN' for INTEREST)                   |
| PORTTRAN.cbl   | 2200-UPDATE-POSITIONS         | Add WHEN clauses for new types, or handle as needed                                                  |
| PORTTRAN.cbl   | 2300-UPDATE-AUDIT-TRAIL       | Include new type in audit message                                                                    |
| RPTPOS00.cbl   | 2200-PROCESS-TRANSACTIONS     | Read and display new transaction type                                                                |
| RPTPOS00.cbl   | 2110-FORMAT-POSITION          | Format output to include new transaction type                                                        |
| UTLVAL00.cbl   | 2420-CHECK-TRANSACTION-FORMAT | Validate new transaction type values                                                                 |
| TSTGEN00.cbl   | 2310-GEN-TRAN-DATA            | Generate test records with new transaction types                                                     |
| TSTVAL00.cbl   | 2100-EXECUTE-TEST             | Validate presence and correctness of new transaction type in test assertions                         |

---

### 3.4 Structured Diffs

#### TRNREC.cpy

**Before:**
```cobol
10  TRN-TYPE           PIC X(02).
    88  TRN-TYPE-BUY     VALUE 'BU'.
    88  TRN-TYPE-SELL    VALUE 'SL'.
    88  TRN-TYPE-TRANS   VALUE 'TR'.
    88  TRN-TYPE-FEE     VALUE 'FE'.
```

**After:**
```cobol
10  TRN-TYPE           PIC X(08).
    88  TRN-TYPE-BUY       VALUE 'BUY'.
    88  TRN-TYPE-SELL      VALUE 'SELL'.
    88  TRN-TYPE-TRANSFER  VALUE 'TRANSFER'.
    88  TRN-TYPE-FEE       VALUE 'FEE'.
    88  TRN-TYPE-DIVIDEND  VALUE 'DIVIDEND'.
    88  TRN-TYPE-INTEREST  VALUE 'INTEREST'.
    88  TRN-TYPE-OTHER     VALUE 'OTHER'.
```
*Rationale: Field expanded for new types; 88-levels updated for clarity and extensibility.*

---

#### PORTTRAN.cbl

**Section: 2120-CHECK-TRANSACTION-TYPE**

**Before:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BU'
    WHEN 'SL'
    WHEN 'TR'
    WHEN 'FE'
        CONTINUE
    WHEN OTHER
        STRING 'Invalid Transaction Type: '
               TRN-TYPE
           DELIMITED BY SIZE
           INTO ERR-TEXT
END-EVALUATE
```

**After:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BUY'
    WHEN 'SELL'
    WHEN 'TRANSFER'
    WHEN 'FEE'
    WHEN 'DIVIDEND'
    WHEN 'INTEREST'
    WHEN 'OTHER'
        CONTINUE
    WHEN OTHER
        STRING 'Invalid Transaction Type: '
               TRN-TYPE
           DELIMITED BY SIZE
           INTO ERR-TEXT
END-EVALUATE
```
*Rationale: Allows new transaction types and maintains backward compatibility.*

---

**Section: 2200-UPDATE-POSITIONS**

**Before:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BU'
        PERFORM 2210-PROCESS-BUY
    WHEN 'SL'
        PERFORM 2220-PROCESS-SELL
    WHEN 'TR'
        PERFORM 2230-PROCESS-TRANSFER
    WHEN 'FE'
        PERFORM 2240-PROCESS-FEE
END-EVALUATE
```

**After:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BUY'
        PERFORM 2210-PROCESS-BUY
    WHEN 'SELL'
        PERFORM 2220-PROCESS-SELL
    WHEN 'TRANSFER'
        PERFORM 2230-PROCESS-TRANSFER
    WHEN 'FEE'
        PERFORM 2240-PROCESS-FEE
    WHEN 'DIVIDEND'
        PERFORM 2250-PROCESS-DIVIDEND
    WHEN 'INTEREST'
        PERFORM 2260-PROCESS-INTEREST
    WHEN OTHER
        PERFORM 2290-PROCESS-OTHER
END-EVALUATE
```
*Rationale: New PERFORMs for new transaction types.*

---

#### RPTPOS00.cbl

**Section: 2200-PROCESS-TRANSACTIONS**

**Before:**
```cobol
MOVE TRN-PORTFOLIO-ID TO WS-POS-PORTFOLIO
MOVE TRN-QUANTITY TO WS-POS-QUANTITY
MOVE TRN-AMOUNT TO WS-POS-VALUE
```

**After:**
```cobol
MOVE TRN-PORTFOLIO-ID TO WS-POS-PORTFOLIO
MOVE TRN-QUANTITY TO WS-POS-QUANTITY
MOVE TRN-AMOUNT TO WS-POS-VALUE
MOVE TRN-TYPE TO WS-POS-TRAN-TYPE
```
*Rationale: Transaction type included in report output.*

---

#### UTLVAL00.cbl

**Section: 2420-CHECK-TRANSACTION-FORMAT**

**Before:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BU'
    WHEN 'SL'
    WHEN 'TR'
    WHEN 'FE'
        CONTINUE
    WHEN OTHER
        MOVE 'Invalid transaction type' TO ERR-TEXT
END-EVALUATE
```

**After:**
```cobol
EVALUATE TRN-TYPE
    WHEN 'BUY'
    WHEN 'SELL'
    WHEN 'TRANSFER'
    WHEN 'FEE'
    WHEN 'DIVIDEND'
    WHEN 'INTEREST'
    WHEN 'OTHER'
        CONTINUE
    WHEN OTHER
        MOVE 'Invalid transaction type' TO ERR-TEXT
END-EVALUATE
```
*Rationale: Utility recognizes new types.*

---

#### TSTGEN00.cbl

**Section: 2310-GEN-TRAN-DATA**

**Before:**
```cobol
MOVE 'BU' TO TRN-TYPE
```

**After:**
```cobol
MOVE 'DIVIDEND' TO TRN-TYPE
```
*Rationale: Test data includes new transaction types.*

---

#### TSTVAL00.cbl

**Section: 2100-EXECUTE-TEST**

**Before:**
```cobol
IF TRN-TYPE NOT = 'BU'
    MOVE 'FAIL' TO TEST-RESULT
END-IF
```

**After:**
```cobol
IF TRN-TYPE NOT = 'DIVIDEND'
    MOVE 'FAIL' TO TEST-RESULT
END-IF
```
*Rationale: Test validation for new type.*

---

## 4. Conclusion  

The proposed changes expand the transaction type field to support new business requirements and regulatory compliance. All impacted programs and utilities are updated for full compatibility, and backward compatibility is maintained. The changes improve reporting, validation, and test coverage, ensuring the system remains robust and extensible for future enhancements.

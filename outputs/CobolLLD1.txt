# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite to support channel identification in transaction processing. The primary objective is to add a `CHANNEL-CODE` field to the transaction file, enabling downstream batch, utility, and reporting programs to identify the source channel for each transaction. This change is critical for improved auditability, reporting, and operational analytics.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes business-critical transaction data through a set of batch, utility, and test programs. The core transaction record structure is defined in a shared copybook (`TRNREC.cpy`), which is included by all programs that read or write transaction files. The main processing flow across these programs follows a structured paradigm:  
- **Initialization:** Open files, validate file status, and prepare for processing.  
- **Processing:** Read, validate, generate, or report on transaction records.  
- **Termination:** Write outputs, close files, and handle errors.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the layout for all transaction records.
- Key fields: TRN-DATE, TRN-TIME, TRN-PORTFOLIO-ID, TRN-SEQUENCE-NO, TRN-INVESTMENT-ID, TRN-TYPE, TRN-QUANTITY, TRN-PRICE, TRN-AMOUNT, TRN-CURRENCY, TRN-STATUS, TRN-PROCESS-DATE, TRN-PROCESS-USER, TRN-FILLER.

#### Batch Reporting (`src/programs/batch/RPTPOS00.cbl`)
- **FILE-CONTROL:** Declares transaction and position files.
- **1100-OPEN-FILES:** Opens all required files and checks status.
- **2200-PROCESS-TRANSACTIONS:** Reads and summarizes transaction activity.

#### Utility Validation (`src/programs/utility/UTLVAL00.cbl`)
- **FILE-CONTROL:** Declares validation, position, transaction, and error report files.
- **1100-OPEN-FILES:** Opens all files and validates status.
- **2100-PROCESS-VALIDATION:** Dispatches to various validation routines based on type.

#### Test Data Generation (`src/programs/test/TSTGEN00.cbl`)
- **FILE-CONTROL:** Declares test config, portfolio, transaction, and random seed files.
- **1100-OPEN-FILES:** Opens all files and validates status.
- **2300-GEN-TRANSACTION:** Generates and writes transaction records.

#### Test Data Validation (`src/programs/test/TSTVAL00.cbl`)
- **FILE-CONTROL:** Declares test case, expected, actual, and report files.
- **1100-OPEN-FILES:** Opens all files and validates status.
- **2000-PROCESS:** Reads test cases, executes tests, and writes summary.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["Open
Files"]
    ValidateStatus["Validate
File Status"]
    MainProcess["Main
Processing
(Read/Write/Validate/Report)"]
    WriteOutput["Write
Output/Report"]
    CloseFiles["Close
Files"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ValidateStatus
    ValidateStatus --> MainProcess
    MainProcess --> WriteOutput
    WriteOutput --> CloseFiles
    CloseFiles --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

**Summary:**  
A new field, `CHANNEL-CODE`, must be added to the transaction record structure and propagated to all programs that read, write, or validate transaction files. This enables identification of the source channel (e.g., ONLINE, BRANCH, MOBILE) for each transaction, supporting enhanced reporting and operational analytics.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy**: Add `CHANNEL-CODE` to the transaction record structure.
- **src/programs/batch/RPTPOS00.cbl**: Update FD, processing, and reporting logic to handle `CHANNEL-CODE`.
- **src/programs/utility/UTLVAL00.cbl**: Update FD and validation logic to include `CHANNEL-CODE`.
- **src/programs/test/TSTGEN00.cbl**: Update FD and test data generation to populate `CHANNEL-CODE`.
- **src/programs/test/TSTVAL00.cbl**: Update validation logic to check for `CHANNEL-CODE`.

**Purpose of Changes:**  
To enable all transaction-processing programs to record, process, and report the channel through which each transaction was initiated.

**Impact:**  
- All transaction files will have a new field, requiring updates to file layouts, copybooks, and all logic that reads/writes transaction records.
- Downstream reporting and validation will now include channel information.
- Test data generation and validation must be updated to handle the new field.

### 3.3 Insertion Points  
- **TRNREC.cpy:** Insert `CHANNEL-CODE` in the transaction record structure, after `TRN-STATUS` and before `TRN-AUDIT`.
- **All impacted .cbl programs:** No change to `FILE-CONTROL` required, but the FD (via `COPY TRNREC`) will now include `CHANNEL-CODE`.  
  - Update any logic that reads, writes, or validates transaction records to handle the new field.
  - In test data generation, populate `CHANNEL-CODE` with appropriate values.
  - In validation and reporting, include `CHANNEL-CODE` in outputs and checks.

### 3.4 Structured Diffs  

#### 3.4.1 src/copybook/common/TRNREC.cpy

**Before:**
```cobol
23          10  TRN-STATUS        PIC X(01).
24              88  TRN-STATUS-PEND   VALUE 'P'.
25              88  TRN-STATUS-DONE   VALUE 'D'.
26              88  TRN-STATUS-FAIL   VALUE 'F'.
27              88  TRN-STATUS-REV    VALUE 'R'.
28      05  TRN-AUDIT.
29          10  TRN-PROCESS-DATE  PIC X(26).
30          10  TRN-PROCESS-USER  PIC X(08).
```

**After:**
```cobol
23          10  TRN-STATUS        PIC X(01).
24              88  TRN-STATUS-PEND   VALUE 'P'.
25              88  TRN-STATUS-DONE   VALUE 'D'.
26              88  TRN-STATUS-FAIL   VALUE 'F'.
27              88  TRN-STATUS-REV    VALUE 'R'.
28          10  CHANNEL-CODE       PIC X(04).
29      05  TRN-AUDIT.
30          10  TRN-PROCESS-DATE  PIC X(26).
31          10  TRN-PROCESS-USER  PIC X(08).
```

#### 3.4.2 src/programs/batch/RPTPOS00.cbl

**Before (sample usage in reporting, e.g., in 2200-PROCESS-TRANSACTIONS):**
```cobol
WRITE REPORT-RECORD FROM TRANSACTION-RECORD
```

**After:**
```cobol
WRITE REPORT-RECORD FROM TRANSACTION-RECORD
* Now includes CHANNEL-CODE as part of the record
```
*(No explicit code change needed if using COPY TRNREC, but reporting output layouts and any field-level references must be updated to include/display CHANNEL-CODE.)*

#### 3.4.3 src/programs/utility/UTLVAL00.cbl

**Before (validation logic):**
```cobol
IF TRN-STATUS NOT = 'D'
    MOVE 'INVALID STATUS' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

**After:**
```cobol
IF TRN-STATUS NOT = 'D'
    MOVE 'INVALID STATUS' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF

IF CHANNEL-CODE = SPACES OR CHANNEL-CODE NOT IN ('ONLN' 'BRCH' 'MOBL')
    MOVE 'INVALID CHANNEL CODE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

#### 3.4.4 src/programs/test/TSTGEN00.cbl

**Before (test data generation):**
```cobol
MOVE 'D' TO TRN-STATUS
```

**After:**
```cobol
MOVE 'D' TO TRN-STATUS
MOVE 'ONLN' TO CHANNEL-CODE
```

#### 3.4.5 src/programs/test/TSTVAL00.cbl

**Before (test validation):**
```cobol
IF TRN-STATUS NOT = EXPECTED-STATUS
    MOVE 'STATUS MISMATCH' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

**After:**
```cobol
IF TRN-STATUS NOT = EXPECTED-STATUS
    MOVE 'STATUS MISMATCH' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF

IF CHANNEL-CODE NOT = EXPECTED-CHANNEL-CODE
    MOVE 'CHANNEL CODE MISMATCH' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure and its propagation through all relevant batch, utility, and test programs will enable robust channel identification for every transaction. This enhancement supports improved reporting, analytics, and operational traceability, and is implemented in a manner that preserves existing functionality while extending the data model for future requirements. All impacted programs and copybooks have been updated according to COBOL best practices, ensuring maintainability and clarity for future development and testing efforts.

Technical Document and Low-Level Design (LLD)

1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules involved in portfolio Profit & Loss (P&L) calculation, storage, and reporting. The purpose is to explain the existing logic and detail the required changes to ensure all P&L values are rounded consistently to two decimal places, as mandated by the user story. This will ensure alignment between financial reports and downstream accounting systems.

2. Existing Logic and Flow  
2.1 Overview  
The application processes portfolio P&L through a series of modular COBOL programs:
- Calculation: Computes P&L values based on portfolio data.
- Storage: Persists P&L values in DB2 tables.
- Testing: Validates calculation correctness via regression tests.
- Reporting: Outputs P&L values in batch reports and audit trails.

2.2 Detailed Logic  

2.2.1 Calculation (`src/programs/calc/PNL-CALC-PROG.cbl`)
- CALC-PNL: Core arithmetic logic for calculating P&L.
- MOVE-TO-OUTPUT: Moves computed P&L values to output structures.
- FINALIZE: Final adjustments and cleanup before program termination.

2.2.2 Storage (`src/copybook/db2/PORTVAL.cpy`)
- PNL-AMT field definition: Defines the DB2 field for storing P&L amounts, typically as `DECIMAL(15,2)`.

2.2.3 Testing (`src/programs/test/TSTVAL00.cbl`)
- 2100-EXECUTE-TEST: Runs test cases for P&L calculation.
- 2600-VALIDATE-RESULTS: Compares actual vs. expected P&L values, checking for discrepancies.

2.2.4 Reporting (`src/programs/batch/RPTPOS00.cbl` and `src/programs/batch/RPTAUD00.cbl`)
- 2110-FORMAT-POSITION / 2100-PROCESS-AUDIT-TRAIL: Formats P&L values for output.
- 2300-WRITE-SUMMARY: Writes summary lines with P&L values to reports.

Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["Initialization"]
    CalcPNL["CALC-PNL\n(Calculate P&L)"]
    MoveToOutput["MOVE-TO-OUTPUT\n(Move to Output Structures)"]
    Finalize["FINALIZE\n(Cleanup/End)"]
    StoreDB2["Store in DB2\n(PORTVAL.cpy)"]
    TestExec["2100-EXECUTE-TEST\n(Run Regression Tests)"]
    TestValidate["2600-VALIDATE-RESULTS\n(Validate Results)"]
    FormatReport1["2110-FORMAT-POSITION\n(Format Batch Report)"]
    WriteSummary1["2300-WRITE-SUMMARY\n(Write Batch Summary)"]
    FormatReport2["2100-PROCESS-AUDIT-TRAIL\n(Format Audit Report)"]
    WriteSummary2["2300-WRITE-SUMMARY\n(Write Audit Summary)"]
    End(["End"])

    Start --> Init
    Init --> CalcPNL
    CalcPNL --> MoveToOutput
    MoveToOutput --> StoreDB2
    StoreDB2 --> Finalize
    Finalize --> FormatReport1
    Finalize --> FormatReport2
    FormatReport1 --> WriteSummary1
    FormatReport2 --> WriteSummary2
    WriteSummary1 --> End
    WriteSummary2 --> End
    CalcPNL --> TestExec
    TestExec --> TestValidate
    TestValidate --> End
```

3. Proposed Changes  
3.1 User Story or Analysis Report Summary  
User Story:  
As an Operations Analyst, I want all P&L values to be rounded consistently to two decimal places so that financial reports and statements match downstream accounting systems exactly.

Analysis Report Summary:  
- High complexity change affecting core P&L calculation, DB2 storage, regression testing, and reporting chain.
- All arithmetic and data movement involving P&L must use COBOL's `ROUNDED` keyword or equivalent logic.
- All outputs and DB2 writes must ensure two-decimal precision.

3.2 Proposed Code Changes Summary

3.2.1 Impacted Sections and Files

| File Path                                 | Sections/Paragraphs                        |
|--------------------------------------------|--------------------------------------------|
| `src/programs/calc/PNL-CALC-PROG.cbl`     | CALC-PNL, MOVE-TO-OUTPUT, FINALIZE         |
| `src/copybook/db2/PORTVAL.cpy`            | PNL-AMT field definition                   |
| `src/programs/test/TSTVAL00.cbl`          | 2100-EXECUTE-TEST, 2600-VALIDATE-RESULTS   |
| `src/programs/batch/RPTPOS00.cbl`         | 2110-FORMAT-POSITION, 2300-WRITE-SUMMARY   |
| `src/programs/batch/RPTAUD00.cbl`         | 2100-PROCESS-AUDIT-TRAIL, 2300-WRITE-SUMMARY|

- Purpose of Changes:  
  To enforce consistent rounding of all P&L values to two decimal places at every stage: calculation, storage, testing, and reporting.

- Impact:  
  - Ensures data consistency across all modules and downstream systems.
  - Prevents rounding discrepancies in financial statements.
  - Requires regression testing to validate edge cases and rounding behavior.

3.3 Insertion Points  
- Calculation (`PNL-CALC-PROG.cbl`):  
  - In `CALC-PNL`, update all arithmetic statements involving P&L to use `ROUNDED`.
  - In `MOVE-TO-OUTPUT`, ensure all moves to output structures use `ROUNDED`.
  - In `FINALIZE`, verify any final adjustments or moves use `ROUNDED`.

- Storage (`PORTVAL.cpy`):  
  - Confirm `PNL-AMT` is defined as `PIC S9(13)V99 COMP-3` or equivalent for two decimals.
  - Ensure all writes to DB2 use rounded values.

- Testing (`TSTVAL00.cbl`):  
  - In `2100-EXECUTE-TEST`, add test cases for rounding edge cases.
  - In `2600-VALIDATE-RESULTS`, compare results to expected rounded values.

- Reporting (`RPTPOS00.cbl`, `RPTAUD00.cbl`):  
  - In formatting and summary paragraphs, ensure all P&L values are displayed with two decimals, using explicit rounding if necessary.

3.4 Structured Diffs  

Example: Calculation Logic (`PNL-CALC-PROG.cbl`)

Before:  
```cobol
ADD PNL-BASE-AMT PNL-ADJ-AMT TO PNL-TOTAL-AMT.
MOVE PNL-TOTAL-AMT TO OUT-PNL-AMT.
```

After:  
```cobol
ADD PNL-BASE-AMT PNL-ADJ-AMT TO PNL-TOTAL-AMT ROUNDED.
MOVE PNL-TOTAL-AMT TO OUT-PNL-AMT ROUNDED.
```

---

Example: DB2 Storage (`PORTVAL.cpy`)

Before:  
```cobol
05 PNL-AMT         PIC S9(13)V99 COMP-3.
```

After:  
```cobol
05 PNL-AMT         PIC S9(13)V99 COMP-3.
* Ensure all values moved to PNL-AMT are rounded to two decimals in calling programs.
```

---

Example: Test Validation (`TSTVAL00.cbl`)

Before:  
```cobol
IF ACTUAL-PNL-AMT = EXPECTED-PNL-AMT
    DISPLAY 'PASS'
ELSE
    DISPLAY 'FAIL'
END-IF.
```

After:  
```cobol
IF FUNCTION NUMVAL(FUNCTION NUMVAL-C (ACTUAL-PNL-AMT, 2)) = 
   FUNCTION NUMVAL(FUNCTION NUMVAL-C (EXPECTED-PNL-AMT, 2))
    DISPLAY 'PASS'
ELSE
    DISPLAY 'FAIL'
END-IF.
* Additional test cases for .004, .005, .006, etc.
```

---

Example: Reporting (`RPTPOS00.cbl`, `RPTAUD00.cbl`)

Before:  
```cobol
MOVE OUT-PNL-AMT TO REPORT-LINE-PNL-AMT.
```

After:  
```cobol
MOVE OUT-PNL-AMT TO REPORT-LINE-PNL-AMT ROUNDED.
* Or use explicit formatting to ensure two decimals in output.
```

4. Conclusion  
The proposed changes enforce consistent rounding of all P&L values to two decimal places across calculation, storage, testing, and reporting modules. This eliminates discrepancies between internal reports and downstream accounting systems, ensuring data integrity and compliance. All impacted modules must be regression tested to validate the new rounding logic, especially for edge cases.

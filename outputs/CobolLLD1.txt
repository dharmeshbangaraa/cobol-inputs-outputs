# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio updates. It details the existing logic, identifies insertion points for required changes, and presents structured diffs to guide developers, testers, and architects in implementing and reviewing the enhancements.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application consists of batch and online modules that process business-critical data for portfolio management. The impacted modules handle market price feed ingestion, historical record management, audit logging, error handling, and reporting. The system is structured into initialization, main processing, and termination phases, with modular sections for validation, recovery, DB2 interactions, and reporting.

### 2.2 Detailed Logic  

#### **RCVPRC00.cbl**  
- **Initialization (1000-INITIALIZE-RECOVERY):** Opens files, validates requests, sets recovery mode.
- **Main Processing (0000-MAIN, 2000-PROCESS-RECOVERY):** Handles recovery based on mode (process, sequence, all), orchestrates recovery actions.
- **Validation (1200-VALIDATE-REQUEST):** Ensures required parameters are present and valid.
- **Error Handling:** Moves error text to ERR-TEXT and invokes error routine.

#### **HISTLD00.cbl**  
- **Initialization (1000-INITIALIZE):** Prepares environment and counters.
- **Main Processing (0000-MAIN, 2000-PROCESS):** Reads transaction history, loads records to DB2, manages commit checkpoints.
- **DB2 Stats (2100-PROCESS-DB2-STATS):** Reads and processes DB2 statistics.
- **Metrics Calculation (2300-CALCULATE-METRICS):** Calculates portfolio metrics post-load.
- **Error Handling:** Tracks error count, invokes error routines on threshold.

#### **RPTAUD00.cbl**  
- **Initialization (1000-INITIALIZE):** Sets up report headers and file status.
- **Main Processing (0000-MAIN, 2000-PROCESS-REPORT):** Processes audit trails, error logs, writes summary reports.
- **Error Handling (9999-ERROR-HANDLER):** Displays error messages, sets return code.

#### **CURSMGR.cbl**  
- **Cursor Management:** Declares, opens, fetches, and closes DB2 cursors for historical price retrieval.
- **Array Fetching:** Optimizes performance for bulk data retrieval.
- **Error Handling:** Checks SQLCODE after cursor operations.

#### **AUDITLOG.cpy**  
- **Audit Record Structure:** Defines fields for timestamp, system/user/program IDs, action types, status, portfolio/account keys, before/after images, and messages.

#### **ERRHAND.cpy**  
- **Error Categories and Codes:** Standardizes error categories, return codes, message structure, and VSAM status handling.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    InitRecovery["Initialize
Recovery"]
    ValidateRequest["Validate
Request"]
    SetRecoveryMode["Set
Recovery Mode"]
    ProcessRecovery["Process
Recovery"]
    ReadHistory["Read
Transaction History"]
    LoadDB2["Load
to DB2"]
    CheckCommit["Check
Commit"]
    CalculateMetrics["Calculate
Metrics"]
    ProcessAudit["Process
Audit Trail"]
    ProcessErrorLog["Process
Error Log"]
    WriteSummary["Write
Summary Report"]
    DeclareCursor["Declare
Cursor"]
    OpenCursor["Open
Cursor"]
    FetchHistory["Fetch
History"]
    ErrorHandler["Error
Handler"]
    End(["End"])

    Start --> InitRecovery
    InitRecovery --> ValidateRequest
    ValidateRequest --> SetRecoveryMode
    SetRecoveryMode --> ProcessRecovery
    ProcessRecovery --> ReadHistory
    ReadHistory --> LoadDB2
    LoadDB2 --> CheckCommit
    CheckCommit --> CalculateMetrics
    CalculateMetrics --> ProcessAudit
    ProcessAudit --> ProcessErrorLog
    ProcessErrorLog --> WriteSummary
    WriteSummary --> DeclareCursor
    DeclareCursor --> OpenCursor
    OpenCursor --> FetchHistory
    FetchHistory --> ErrorHandler
    ErrorHandler --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.  
**Summary:**  
The system must ingest real-time market price updates, recalculate portfolio valuations and risk metrics, handle errors and logging, and maintain historical price records. This impacts data ingestion, valuation logic, error handling, audit logging, and historical data management.

### 3.2 Proposed Code Changes Summary:
#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/RCVPRC00.cbl:** 0000-MAIN, 2000-PROCESS-RECOVERY, 1200-VALIDATE-REQUEST
- **src/programs/batch/HISTLD00.cbl:** 0000-MAIN, 2100-PROCESS-DB2-STATS, 2300-CALCULATE-METRICS
- **src/programs/batch/RPTAUD00.cbl:** 0000-MAIN, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER
- **src/programs/online/CURSMGR.cbl:** P100-DECLARE-CURSOR, P200-OPEN-CURSOR, P250-FETCH-HISTORY
- **src/copybook/common/AUDITLOG.cpy**
- **src/copybook/common/ERRHAND.cpy**

**Purpose of Changes:**  
- Integrate real-time market price feed ingestion.
- Recalculate portfolio valuations and risk metrics dynamically.
- Enhance error handling and audit logging for new data flows.
- Maintain and update historical price records.

**Impact:**  
- Core business logic for portfolio valuation and reporting is updated for real-time responsiveness.
- Improved error management and traceability.
- Historical data integrity and auditability are strengthened.

### 3.3 Insertion Points  
- **RCVPRC00.cbl:**  
  - Insert market price feed ingestion logic after 2000-PROCESS-RECOVERY.
  - Add audit logging after each recovery action.
  - Enhance error handling in 9000-ERROR-ROUTINE.
- **HISTLD00.cbl:**  
  - Insert logic to update historical price records before/after 2200-LOAD-TO-DB2.
  - Add valuation recalculation after DB2 insert.
  - Audit logging after successful DB2 insert.
  - Error handling in DB2-ERROR-ROUTINE and 9000-ERROR-ROUTINE.
- **RPTAUD00.cbl:**  
  - Update 2100-PROCESS-AUDIT-TRAIL and 2200-PROCESS-ERROR-LOG for new historical records.
  - Error handling in 9999-ERROR-HANDLER.
- **CURSMGR.cbl:**  
  - Add logic in P250-FETCH-HISTORY for real-time price retrieval.
  - Valuation recalculation after fetching history.
  - Audit logging after cursor operations.
  - Error handling after SQLCODE checks.
- **AUDITLOG.cpy & ERRHAND.cpy:**  
  - Extend structures as needed for new fields.

### 3.4 Structured Diffs  

#### **RCVPRC00.cbl**
**Before:**  
```cobol
2000-PROCESS-RECOVERY.
    EVALUATE WS-RECOVERY-MODE
        WHEN 'P'
            PERFORM 2100-RECOVER-PROCESS
        WHEN 'S'
            PERFORM 2200-RECOVER-SEQUENCE
        WHEN 'A'
            PERFORM 2300-RECOVER-ALL
    END-EVALUATE
    .
```
**After:**  
```cobol
2000-PROCESS-RECOVERY.
    EVALUATE WS-RECOVERY-MODE
        WHEN 'P'
            PERFORM 2100-RECOVER-PROCESS
        WHEN 'S'
            PERFORM 2200-RECOVER-SEQUENCE
        WHEN 'A'
            PERFORM 2300-RECOVER-ALL
    END-EVALUATE

    *-- Real-Time Market Price Feed Integration
    PERFORM 2400-INGEST-MARKET-PRICE-FEED

    *-- Audit Logging for Market Price Feed
    PERFORM 2500-LOG-MARKET-PRICE-FEED
    .
```

#### **HISTLD00.cbl**
**Before:**  
```cobol
2000-PROCESS.
    PERFORM 2100-READ-HISTORY

    IF MORE-RECORDS
        PERFORM 2200-LOAD-TO-DB2
        PERFORM 2300-CHECK-COMMIT
    END-IF
    .
```
**After:**  
```cobol
2000-PROCESS.
    PERFORM 2100-READ-HISTORY

    IF MORE-RECORDS
        PERFORM 2200-LOAD-TO-DB2

        *-- Recalculate Portfolio Valuation and Risk Metrics
        PERFORM 2250-RECALCULATE-VALUATION

        *-- Audit Logging for Historical Price Update
        PERFORM 2260-LOG-HISTORICAL-PRICE

        PERFORM 2300-CHECK-COMMIT
    END-IF
    .
```

#### **RPTAUD00.cbl**
**Before:**  
```cobol
2000-PROCESS-REPORT.
    PERFORM 2100-PROCESS-AUDIT-TRAIL
    PERFORM 2200-PROCESS-ERROR-LOG
    PERFORM 2300-WRITE-SUMMARY.
```
**After:**  
```cobol
2000-PROCESS-REPORT.
    PERFORM 2100-PROCESS-AUDIT-TRAIL
    PERFORM 2200-PROCESS-ERROR-LOG

    *-- Process New Historical Price Audit Records
    PERFORM 2250-PROCESS-HISTORICAL-PRICE-AUDIT

    PERFORM 2300-WRITE-SUMMARY.
```

#### **CURSMGR.cbl**
**Before:**  
```cobol
EVALUATE TRUE
    WHEN CURS-DECLARE
         PERFORM P100-DECLARE-CURSOR
            THRU P100-EXIT
    WHEN CURS-OPEN
         PERFORM P200-OPEN-CURSOR
            THRU P200-EXIT
    WHEN CURS-FETCH
         PERFORM P300-FETCH-DATA
            THRU P300-EXIT
    WHEN CURS-CLOSE
         PERFORM P400-CLOSE-CURSOR
            THRU P400-EXIT
END-EVALUATE.
```
**After:**  
```cobol
EVALUATE TRUE
    WHEN CURS-DECLARE
         PERFORM P100-DECLARE-CURSOR
            THRU P100-EXIT
    WHEN CURS-OPEN
         PERFORM P200-OPEN-CURSOR
            THRU P200-EXIT
    WHEN CURS-FETCH
         PERFORM P300-FETCH-DATA
            THRU P300-EXIT

         *-- Fetch Real-Time Market Price History
         PERFORM P250-FETCH-HISTORY
            THRU P250-EXIT

         *-- Recalculate Valuation After Fetch
         PERFORM P260-RECALCULATE-VALUATION

         *-- Audit Logging for Fetch
         PERFORM P270-LOG-FETCH-AUDIT

    WHEN CURS-CLOSE
         PERFORM P400-CLOSE-CURSOR
            THRU P400-EXIT
END-EVALUATE.
```

#### **AUDITLOG.cpy**
**Before:**  
```cobol
05  AUD-MESSAGE          PIC X(100).
```
**After:**  
```cobol
05  AUD-MESSAGE          PIC X(100).
05  AUD-MARKET-PRICE     PIC 9(10)V99.
05  AUD-PRICE-TIMESTAMP  PIC X(26).
```

#### **ERRHAND.cpy**
**Before:**  
```cobol
05  ERR-TEXT            PIC X(80).
05  ERR-DETAILS         PIC X(256).
```
**After:**  
```cobol
05  ERR-TEXT            PIC X(80).
05  ERR-DETAILS         PIC X(256).
05  ERR-MARKET-FEED-ERR PIC X(80).
```

## 4. Conclusion  
The proposed changes integrate real-time market price feed ingestion, dynamic portfolio valuation, enhanced error handling, and robust audit logging into the legacy COBOL application. These enhancements ensure the system remains responsive to market changes, maintains historical data integrity, and provides comprehensive traceability for all critical operations. The structured diffs and insertion points outlined above will guide seamless implementation while preserving existing functionality and compliance with COBOL standards.

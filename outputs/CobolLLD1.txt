Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically to introduce a new `CHANNEL-CODE` field to the transaction file. This change supports channel identification in batch processing and reporting, and impacts core transaction data structures, file layouts, batch processing, reporting, and associated copybooks and programs.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data through a modular structure, with a canonical transaction record defined in a copybook (`TRNREC.cpy`). Multiple batch, utility, and test programs reference this copybook to read, write, validate, and report on transaction data. The flow typically involves:

- **Initialization:** Opening required files and validating their status.
- **Processing:** Reading transaction records, applying business logic, generating reports, or validating data.
- **Termination:** Closing files and handling errors.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- The transaction record is defined as a hierarchical structure with key fields (date, time, portfolio, sequence), transaction data (investment ID, type, quantity, price, amount, currency, status), audit information, and filler.
- All programs that process transaction data include this copybook.

#### Example: Batch Processing (`src/programs/batch/RPTPOS00.cbl`)
- **1100-OPEN-FILES:** Opens all necessary files for input and output, checks file status, and handles errors.
- **2200-PROCESS-TRANSACTIONS:** Reads transaction records and summarizes activity for reporting.

#### Example: Validation Utility (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES:** Opens validation control, position master, transaction history, and error report files.
- **2400-CHECK-FORMAT:** Performs format checks on position and transaction records.

#### Example: Test Data Generation (`src/programs/test/TSTGEN00.cbl`)
- **2300-GEN-TRANSACTION:** Generates a specified number of transaction records for testing.
- **2320-WRITE-TRAN-RECORD:** Writes generated transaction records to output.

#### Example: Test Validation (`src/programs/test/TSTVAL00.cbl`)
- **1100-OPEN-FILES:** Opens test case, expected result, actual result, and test report files.
- **2100-EXECUTE-TEST:** Executes various test types and validates results.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["Open
Files"]
    ReadTrans["Read
Transaction
Records"]
    ProcessLogic["Process
Business
Logic"]
    WriteOutput["Write
Output/
Reports"]
    Validate["Validate
Transaction
Format"]
    GenerateTest["Generate
Test
Transactions"]
    ExecuteTest["Execute
Test
Cases"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ReadTrans
    ReadTrans --> ProcessLogic
    ProcessLogic --> WriteOutput
    ProcessLogic --> Validate
    Validate --> WriteOutput
    OpenFiles --> GenerateTest
    GenerateTest --> WriteOutput
    OpenFiles --> ExecuteTest
    ExecuteTest --> WriteOutput
    WriteOutput --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- All programs that read/write transaction data or generate reports must be updated for the new field.
- The change is high complexity and impacts core transaction data structures, file layouts, batch processing, reporting, and copybooks.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy**: Add `CHANNEL-CODE` field to the transaction record definition.
- **src/programs/batch/RPTPOS00.cbl**: Update to process and report on the new field.
- **src/programs/utility/UTLVAL00.cbl**: Update validation logic to include the new field.
- **src/programs/test/TSTGEN00.cbl**: Update test data generation to populate the new field.
- **src/programs/test/TSTVAL00.cbl**: Update test validation logic to handle the new field.

**Purpose of Changes:**  
To enable identification of the transaction channel (e.g., online, branch, ATM) throughout all transaction processing, reporting, and validation activities.

**Impact:**  
- All transaction records will now include a `CHANNEL-CODE` field.
- All programs that read, write, or validate transaction records must be updated to handle the new field.
- Downstream reporting and analytics will be able to segment and analyze transactions by channel.

### 3.3 Insertion Points  
- **TRNREC.cpy**: Insert `CHANNEL-CODE` after `TRN-CURRENCY` and before `TRN-STATUS` in the `TRN-DATA` group.
- **All impacted programs**: No change to FD layout if using `COPY TRNREC.`, but logic that reads, writes, or validates transaction records must be updated to handle the new field.
- **Test programs**: Generation and validation logic must be updated to populate and check the new field.

### 3.4 Structured Diffs  

#### 3.4.1 src/copybook/common/TRNREC.cpy

**Before:**
```cobol
   01  TRANSACTION-RECORD.
       05  TRN-KEY.
           10  TRN-DATE           PIC X(08).
           10  TRN-TIME           PIC X(06).
           10  TRN-PORTFOLIO-ID   PIC X(08).
           10  TRN-SEQUENCE-NO    PIC X(06).
       05  TRN-DATA.
           10  TRN-INVESTMENT-ID  PIC X(10).
           10  TRN-TYPE           PIC X(02).
               88  TRN-TYPE-BUY     VALUE 'BU'.
               88  TRN-TYPE-SELL    VALUE 'SL'.
               88  TRN-TYPE-TRANS   VALUE 'TR'.
               88  TRN-TYPE-FEE     VALUE 'FE'.
           10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
           10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
           10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
           10  TRN-CURRENCY      PIC X(03).
           10  TRN-STATUS        PIC X(01).
               88  TRN-STATUS-PEND   VALUE 'P'.
               88  TRN-STATUS-DONE   VALUE 'D'.
               88  TRN-STATUS-FAIL   VALUE 'F'.
               88  TRN-STATUS-REV    VALUE 'R'.
       05  TRN-AUDIT.
           10  TRN-PROCESS-DATE  PIC X(26).
           10  TRN-PROCESS-USER  PIC X(08).
       05  TRN-FILLER           PIC X(50).
```

**After:**
```cobol
   01  TRANSACTION-RECORD.
       05  TRN-KEY.
           10  TRN-DATE           PIC X(08).
           10  TRN-TIME           PIC X(06).
           10  TRN-PORTFOLIO-ID   PIC X(08).
           10  TRN-SEQUENCE-NO    PIC X(06).
       05  TRN-DATA.
           10  TRN-INVESTMENT-ID  PIC X(10).
           10  TRN-TYPE           PIC X(02).
               88  TRN-TYPE-BUY     VALUE 'BU'.
               88  TRN-TYPE-SELL    VALUE 'SL'.
               88  TRN-TYPE-TRANS   VALUE 'TR'.
               88  TRN-TYPE-FEE     VALUE 'FE'.
           10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
           10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
           10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
           10  TRN-CURRENCY      PIC X(03).
           10  CHANNEL-CODE      PIC X(04).
           10  TRN-STATUS        PIC X(01).
               88  TRN-STATUS-PEND   VALUE 'P'.
               88  TRN-STATUS-DONE   VALUE 'D'.
               88  TRN-STATUS-FAIL   VALUE 'F'.
               88  TRN-STATUS-REV    VALUE 'R'.
       05  TRN-AUDIT.
           10  TRN-PROCESS-DATE  PIC X(26).
           10  TRN-PROCESS-USER  PIC X(08).
       05  TRN-FILLER           PIC X(50).
```

#### 3.4.2 src/programs/batch/RPTPOS00.cbl

**Before (sample usage in processing):**
```cobol
       COPY TRNREC.
...
       MOVE TRN-DATE TO WS-REPORT-DATE.
       MOVE TRN-TYPE TO WS-REPORT-TYPE.
```

**After:**
```cobol
       COPY TRNREC.
...
       MOVE TRN-DATE TO WS-REPORT-DATE.
       MOVE TRN-TYPE TO WS-REPORT-TYPE.
       MOVE CHANNEL-CODE TO WS-REPORT-CHANNEL.
```
*(Add logic to include CHANNEL-CODE in report output and processing as needed.)*

#### 3.4.3 src/programs/utility/UTLVAL00.cbl

**Before (sample validation):**
```cobol
       IF TRN-CURRENCY = SPACES
           MOVE 'CURRENCY MISSING' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.
```

**After:**
```cobol
       IF TRN-CURRENCY = SPACES
           MOVE 'CURRENCY MISSING' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.

       IF CHANNEL-CODE = SPACES
           MOVE 'CHANNEL CODE MISSING' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.
```

#### 3.4.4 src/programs/test/TSTGEN00.cbl

**Before (test data generation):**
```cobol
       MOVE 'USD' TO TRN-CURRENCY.
```

**After:**
```cobol
       MOVE 'USD' TO TRN-CURRENCY.
       MOVE 'ONLN' TO CHANNEL-CODE.
```
*(Or generate CHANNEL-CODE based on test scenario.)*

#### 3.4.5 src/programs/test/TSTVAL00.cbl

**Before (test validation):**
```cobol
       IF ACTUAL-TRN-TYPE NOT = EXPECTED-TRN-TYPE
           MOVE 'TYPE MISMATCH' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.
```

**After:**
```cobol
       IF ACTUAL-TRN-TYPE NOT = EXPECTED-TRN-TYPE
           MOVE 'TYPE MISMATCH' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.

       IF ACTUAL-CHANNEL-CODE NOT = EXPECTED-CHANNEL-CODE
           MOVE 'CHANNEL CODE MISMATCH' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF.
```

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record and all associated programs ensures that channel identification is consistently available for all transaction processing, reporting, and validation activities. This change enhances the system's ability to segment, analyze, and report on transactions by channel, supporting improved business insight and operational control. All impacted modules have been identified and detailed code changes provided to ensure a seamless and standards-compliant implementation.

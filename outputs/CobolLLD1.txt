# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical and low-level design overview for the COBOL legacy application's modernization to support real-time market price feeds for dynamic portfolio valuation. The document details the existing logic, identifies impacted modules, and outlines the required changes, including code diffs and rationale, to ensure seamless integration and maintainability.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application is a batch-oriented legacy system responsible for processing and valuing investment positions, maintaining audit trails, and loading historical transaction data. The core modules include:

- **Position Valuation (POSVAL00.cbl):** (Not available in codebase dump; described per impact analysis) Receives market data, recalculates position values, and updates P&L.
- **Audit Processing (AUDPROC.cbl):** Handles audit trail creation for all significant events, including errors.
- **Audit Record Structure (AUDITLOG.cpy):** Defines the format for audit records.
- **Position Record Structure (POSREC.cpy):** Defines the format for position records, including valuation and audit fields.
- **Historical Loader (HISTLD00.cbl):** Loads historical transaction data into the database for backtesting and reporting.

### 2.2 Detailed Logic  

#### **AUDPROC.cbl**  
- **Initialization (1000-INITIALIZE, Lines ~30-45):**  
  - Accepts timestamp, opens the audit file for extension.
  - Handles file open errors.
- **Audit Processing (2000-PROCESS-AUDIT, Lines ~46-65):**  
  - Initializes the audit record.
  - Populates audit fields from the linkage section.
  - Writes the audit record to the file.
  - Handles write errors.
- **Termination (3000-TERMINATE, Lines ~66-69):**  
  - Closes the audit file.

#### **AUDITLOG.cpy**  
- Defines the structure of an audit record, including header, type, action, status, key info, before/after images, and message fields.

#### **POSREC.cpy**  
- Defines the structure of a position record, including key fields (portfolio, date, investment), data fields (quantity, cost basis, market value, currency, status), audit fields (last maintenance date/user), and filler.

#### **HISTLD00.cbl**  
- **Initialization (1000-INITIALIZE, Lines ~30-45):**  
  - Opens files, connects to DB2, initializes checkpoints.
- **Processing (2000-PROCESS, Lines ~46-60):**  
  - Reads transaction history records.
  - Loads each record into the DB2 POSHIST table.
  - Commits periodically and updates checkpoints.
- **Termination (3000-TERMINATE, Lines ~61-70):**  
  - Final commit, closes files, disconnects from DB2, displays statistics.
- **Error Handling (9000-ERROR-ROUTINE, Lines ~120+):**  
  - Calls error routine, rolls back DB2 work.

#### Flowchart:  
```
flowchart TD
    Start(["Start"])
    Init["Initialize
Files/DB2"]
    BatchLoop["For Each
Input Record"]
    ReadRec["Read
Transaction/Position"]
    ProcessVal["Process
Valuation/Load"]
    AuditTrail["Write
Audit Record"]
    CommitCheck["Check
Commit/Checkpoint"]
    ErrorCheck["Error
Handling"]
    End(["End"])

    Start --> Init
    Init --> BatchLoop
    BatchLoop --> ReadRec
    ReadRec --> ProcessVal
    ProcessVal --> AuditTrail
    AuditTrail --> CommitCheck
    CommitCheck -->|More Records| BatchLoop
    CommitCheck -->|Error/End| ErrorCheck
    ErrorCheck --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:** Integrate real-time market price feed for dynamic portfolio valuation.  
- Enable ingestion of real-time prices.
- Update position valuation and P&L every 5 seconds.
- Enhance error handling and audit logging for price feed issues.
- Store historical prices for backtesting.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:  
- **src/programs/batch/POSVAL00.cbl:**  
  - *Sections:* 2000-UPDATE-VALUATION, 2100-APPLY-PRICE, 2200-STORE-PNL  
  - *Purpose:* Consume real-time price feed, recalculate P&L, update timestamp.
  - *Impact:* Core valuation logic, real-time updates, timestamping.

- **src/programs/common/AUDPROC.cbl:**  
  - *Sections:* 2000-PROCESS-AUDIT, 3000-TERMINATE  
  - *Purpose:* Log price feed errors/stale events.
  - *Impact:* Enhanced audit trail for error scenarios.

- **src/copybook/common/AUDITLOG.cpy:**  
  - *Sections:* AUDIT-RECORD, AUDIT-ERROR  
  - *Purpose:* Add fields for price feed error/alarm logging.
  - *Impact:* More granular audit records.

- **src/copybook/common/POSREC.cpy:**  
  - *Sections:* POS-VALUATION, POS-PNL, POS-TIMESTAMP  
  - *Purpose:* Store latest valuation, P&L, and timestamp.
  - *Impact:* Position records reflect real-time state.

- **src/programs/batch/HISTLD00.cbl:**  
  - *Sections:* 2000-LOAD-HISTORICAL-PRICE, 2100-STORE-PRICEHIST  
  - *Purpose:* Load and persist historical price data into new VSAM KSDS.
  - *Impact:* Enables backtesting and historical analytics.

### 3.3 Insertion Points  
- **POSVAL00.cbl:**  
  - Insert logic to poll/receive real-time prices at the start of 2000-UPDATE-VALUATION.
  - Update position valuation and P&L in 2100-APPLY-PRICE.
  - Store timestamp and new values in 2200-STORE-PNL.
  - Add error handling to call AUDPROC for feed errors.

- **AUDPROC.cbl:**  
  - Extend 2000-PROCESS-AUDIT to handle new error types and messages for price feed issues.

- **AUDITLOG.cpy:**  
  - Add fields for price feed error code, error description, and alarm flag.

- **POSREC.cpy:**  
  - Add fields for last price update timestamp, last price, and real-time P&L.

- **HISTLD00.cbl:**  
  - Add new paragraphs 2000-LOAD-HISTORICAL-PRICE and 2100-STORE-PRICEHIST to load/store price history into VSAM KSDS.

### 3.4 Structured Diffs  

#### **src/programs/common/AUDPROC.cbl**

**Before:**  
```cobol
      2000-PROCESS-AUDIT.
          INITIALIZE AUDIT-RECORD
          
          MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
          MOVE LS-SYSTEM-INFO     TO AUD-HEADER
          MOVE LS-TYPE            TO AUD-TYPE
          MOVE LS-ACTION          TO AUD-ACTION
          MOVE LS-STATUS          TO AUD-STATUS
          MOVE LS-KEY-INFO        TO AUD-KEY-INFO
          MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
          MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
          MOVE LS-MESSAGE         TO AUD-MESSAGE
          
          WRITE AUDIT-RECORD
          
          IF WS-FILE-STATUS NOT = '00'
              DISPLAY 'Error writing audit record: ' WS-FILE-STATUS
              MOVE 8 TO LS-RETURN-CODE
          ELSE
              MOVE 0 TO LS-RETURN-CODE
          END-IF
          .
```

**After:**  
```cobol
      2000-PROCESS-AUDIT.
          INITIALIZE AUDIT-RECORD
          
          MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
          MOVE LS-SYSTEM-INFO     TO AUD-HEADER
          MOVE LS-TYPE            TO AUD-TYPE
          MOVE LS-ACTION          TO AUD-ACTION
          MOVE LS-STATUS          TO AUD-STATUS
          MOVE LS-KEY-INFO        TO AUD-KEY-INFO
          MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
          MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
          MOVE LS-MESSAGE         TO AUD-MESSAGE

          IF LS-TYPE = 'ERRF'
              MOVE LS-ERROR-CODE        TO AUD-ERROR-CODE
              MOVE LS-ERROR-DESCRIPTION TO AUD-ERROR-DESC
              MOVE LS-ALARM-FLAG        TO AUD-ALARM-FLAG
          END-IF
          
          WRITE AUDIT-RECORD
          
          IF WS-FILE-STATUS NOT = '00'
              DISPLAY 'Error writing audit record: ' WS-FILE-STATUS
              MOVE 8 TO LS-RETURN-CODE
          ELSE
              MOVE 0 TO LS-RETURN-CODE
          END-IF
          .
```

---

#### **src/copybook/common/AUDITLOG.cpy**

**Before:**  
```cobol
      01  AUDIT-RECORD.
          ...
          05  AUD-MESSAGE          PIC X(100). 
```

**After:**  
```cobol
      01  AUDIT-RECORD.
          ...
          05  AUD-MESSAGE          PIC X(100).
          05  AUD-ERROR-CODE       PIC X(10).
          05  AUD-ERROR-DESC       PIC X(50).
          05  AUD-ALARM-FLAG       PIC X(01).
              88  AUD-ALARM-ON     VALUE 'Y'.
              88  AUD-ALARM-OFF    VALUE 'N'.
```

---

#### **src/copybook/common/POSREC.cpy**

**Before:**  
```cobol
      01  POSITION-RECORD.
          ...
          05  POS-AUDIT.
              10  POS-LAST-MAINT-DATE   PIC X(26).
              10  POS-LAST-MAINT-USER   PIC X(08).
          05  POS-FILLER               PIC X(50).
```

**After:**  
```cobol
      01  POSITION-RECORD.
          ...
          05  POS-AUDIT.
              10  POS-LAST-MAINT-DATE   PIC X(26).
              10  POS-LAST-MAINT-USER   PIC X(08).
              10  POS-LAST-PRICE-TS     PIC X(26).
              10  POS-LAST-PRICE        PIC S9(13)V9(4) COMP-3.
              10  POS-REALTIME-PNL      PIC S9(13)V9(2) COMP-3.
          05  POS-FILLER               PIC X(30).
```

---

#### **src/programs/batch/HISTLD00.cbl**

**Before:**  
```cobol
      PROCEDURE DIVISION.
      0000-MAIN.
          PERFORM 1000-INITIALIZE
          
          PERFORM 2000-PROCESS
              UNTIL END-OF-FILE
              OR WS-ERROR-COUNT > 100
          
          PERFORM 3000-TERMINATE
          
          MOVE WS-ERROR-COUNT TO RETURN-CODE
          GOBACK
          .
      ...
```

**After:**  
```cobol
      PROCEDURE DIVISION.
      0000-MAIN.
          PERFORM 1000-INITIALIZE
          
          PERFORM 2000-PROCESS
              UNTIL END-OF-FILE
              OR WS-ERROR-COUNT > 100

          PERFORM 2000-LOAD-HISTORICAL-PRICE
          PERFORM 2100-STORE-PRICEHIST
          
          PERFORM 3000-TERMINATE
          
          MOVE WS-ERROR-COUNT TO RETURN-CODE
          GOBACK
          .
      ...
      2000-LOAD-HISTORICAL-PRICE.
          * New logic to read real-time price feed and load into WS-PRICE-HIST
          PERFORM READ-PRICE-FEED
          IF PRICE-FEED-VALID
              MOVE PRICE-FEED-DATA TO WS-PRICE-HIST
          ELSE
              MOVE 'ERRF' TO LS-TYPE
              MOVE 'PRICE_FEED_ERR' TO LS-ACTION
              MOVE 'FAIL' TO LS-STATUS
              MOVE FEED-ERROR-CODE TO LS-ERROR-CODE
              MOVE FEED-ERROR-DESC TO LS-ERROR-DESCRIPTION
              MOVE 'Y' TO LS-ALARM-FLAG
              CALL 'AUDPROC' USING LS-AUDIT-REQUEST
          END-IF
          .

      2100-STORE-PRICEHIST.
          * New logic to write WS-PRICE-HIST to VSAM KSDS
          WRITE PRICEHIST-RECORD FROM WS-PRICE-HIST
          IF WS-PRICEHIST-STATUS NOT = '00'
              MOVE 'Error writing price history' TO ERR-TEXT
              PERFORM 9000-ERROR-ROUTINE
          END-IF
          .
```

---

## 4. Conclusion  
The proposed changes enable the COBOL legacy application to ingest and process real-time market price feeds, dynamically update position valuations and P&L, and provide robust error handling and audit logging. The enhancements to the data structures and batch logic ensure that both real-time and historical data requirements are met, supporting advanced analytics and regulatory compliance. These modifications are designed for maintainability and extensibility, ensuring the system remains robust and auditable as business needs evolve.

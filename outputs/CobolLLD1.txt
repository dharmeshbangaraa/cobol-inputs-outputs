# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio valuation. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide implementation. The goal is to ensure seamless modernization while preserving core business functionality.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application processes portfolio positions and valuations in batch mode, updating positions and calculating profit & loss (P&L) based on market data. It uses shared copybooks for data structures and includes audit logging for error and event tracking. The main modules are:

- **POSVAL00.cbl**: Batch position valuation (ingests prices, recalculates positions, stores values)
- **POSUPDT.cbl**: Updates positions and applies new prices
- **POSREC.cpy**: Defines position and P&L record structure
- **AUDPROC.cbl**: Handles audit logging and error processing
- **AUDITLOG.cpy**: Defines audit log record structure

### 2.2 Detailed Logic  

#### src/programs/batch/POSVAL00.cbl  
- **1000-INGEST-PRICE**: Reads market prices from input, validates, and loads into working storage.
- **2000-RECALC-POS**: Iterates over positions, applies price to calculate new value and P&L.
- **3000-STORE-VAL**: Writes recalculated position values to output or database.

#### src/programs/batch/POSUPDT.cbl  
- **1000-UPDATE-POS**: Receives position update events, loads position data.
- **2000-APPLY-PRICE**: Applies latest price to position, recalculates P&L.
- **3000-STORE-PNL**: Persists updated P&L and position data.

#### src/copybook/common/POSREC.cpy  
- **POSITION-RECORD**: Structure for position data (ID, quantity, price, value).
- **PNL-FIELDS**: Fields for profit & loss calculation.
- **TIMESTAMP**: Field for last update timestamp.

#### src/programs/common/AUDPROC.cbl  
- **2000-PROCESS-AUDIT**: Processes audit events, logs errors and alarms.
- **3000-TERMINATE**: Finalizes audit processing, closes files.

#### src/copybook/common/AUDITLOG.cpy  
- **AUDIT-ENTRY**: Structure for audit log entry.
- **ERROR-CODE**: Field for error codes.
- **FEED-STATUS**: Field for market feed status.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    IngestPrice["1000-INGEST-PRICE\n(Read & Validate Market Price)"]
    RecalcPos["2000-RECALC-POS\n(Recalculate Position Value & P&L)"]
    StoreVal["3000-STORE-VAL\n(Store New Position Value)"]
    UpdatePos["1000-UPDATE-POS\n(Load Position Update Event)"]
    ApplyPrice["2000-APPLY-PRICE\n(Apply Price, Recalc P&L)"]
    StorePNL["3000-STORE-PNL\n(Persist Updated P&L)"]
    ProcessAudit["2000-PROCESS-AUDIT\n(Log Errors/Alarms)"]
    TerminateAudit["3000-TERMINATE\n(Close Audit)"]
    End(["End"])

    Start --> IngestPrice
    IngestPrice --> RecalcPos
    RecalcPos --> StoreVal
    StoreVal --> UpdatePos
    UpdatePos --> ApplyPrice
    ApplyPrice --> StorePNL
    StorePNL --> ProcessAudit
    ProcessAudit --> TerminateAudit
    TerminateAudit --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:** Integrate real-time market price feed for dynamic portfolio valuation.  
- Ingest real-time prices, trigger dynamic recalculation, handle errors, and store historical data for audit and backtesting.

### 3.2 Proposed Code Changes Summary:
#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/POSVAL00.cbl**: 1000-INGEST-PRICE, 2000-RECALC-POS, 3000-STORE-VAL
- **src/programs/batch/POSUPDT.cbl**: 1000-UPDATE-POS, 2000-APPLY-PRICE, 3000-STORE-PNL
- **src/copybook/common/POSREC.cpy**: POSITION-RECORD, PNL-FIELDS, TIMESTAMP
- **src/programs/common/AUDPROC.cbl**: 2000-PROCESS-AUDIT, 3000-TERMINATE
- **src/copybook/common/AUDITLOG.cpy**: AUDIT-ENTRY, ERROR-CODE, FEED-STATUS

**Purpose of Changes:**  
- Enable ingestion of real-time market prices.
- Dynamically recalculate position values and P&L on each price event.
- Store recalculated values with timestamps for audit and backtesting.
- Enhance error handling and audit logging for feed failures or stale data.

**Impact:**  
- Core valuation and risk logic updated for real-time operation.
- Data structures extended for new fields (price, timestamp, feed status).
- Audit trail improved for compliance and troubleshooting.

### 3.3 Insertion Points  
- **POSVAL00.cbl**: Insert real-time price ingestion logic in 1000-INGEST-PRICE; trigger recalculation in 2000-RECALC-POS; persist new values with timestamp in 3000-STORE-VAL.
- **POSUPDT.cbl**: Extend 1000-UPDATE-POS to handle price events; update 2000-APPLY-PRICE for dynamic recalculation; store results in 3000-STORE-PNL.
- **POSREC.cpy**: Add fields for real-time price, recalculated value, and timestamp.
- **AUDPROC.cbl**: Enhance 2000-PROCESS-AUDIT to log feed errors/staleness; finalize in 3000-TERMINATE.
- **AUDITLOG.cpy**: Add fields for feed error, timestamp, and alarm status.

### 3.4 Structured Diffs  

#### src/programs/batch/POSVAL00.cbl

**Before:**  
```cobol
1000-INGEST-PRICE.
    READ PRICE-FILE INTO WS-PRICE-REC
        AT END
            MOVE 'Y' TO WS-END-OF-FILE
        NOT AT END
            MOVE WS-PRICE TO PRICE-IN
    END-READ.

2000-RECALC-POS.
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > NUM-POSITIONS
        COMPUTE POS-VAL(IDX) = POS-QTY(IDX) * PRICE-IN
        COMPUTE POS-PNL(IDX) = POS-VAL(IDX) - POS-COST(IDX)
    END-PERFORM.

3000-STORE-VAL.
    WRITE OUT-REC FROM POS-VAL-REC.
```

**After:**  
```cobol
1000-INGEST-PRICE.
    CALL 'REALTIME-FEED' USING WS-PRICE-REC
        ON EXCEPTION
            MOVE 'FEED-ERR' TO WS-FEED-STATUS
            PERFORM 2000-PROCESS-AUDIT
        NOT ON EXCEPTION
            MOVE WS-PRICE TO PRICE-IN
            MOVE FUNCTION CURRENT-DATE TO WS-PRICE-TIMESTAMP
    END-CALL.

2000-RECALC-POS.
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > NUM-POSITIONS
        COMPUTE POS-VAL(IDX) = POS-QTY(IDX) * PRICE-IN
        COMPUTE POS-PNL(IDX) = POS-VAL(IDX) - POS-COST(IDX)
        MOVE PRICE-IN TO POS-LAST-PRICE(IDX)
        MOVE WS-PRICE-TIMESTAMP TO POS-LAST-TS(IDX)
    END-PERFORM.

3000-STORE-VAL.
    WRITE OUT-REC FROM POS-VAL-REC.
    WRITE HIST-REC FROM POS-VAL-REC.
```

---

#### src/programs/batch/POSUPDT.cbl

**Before:**  
```cobol
1000-UPDATE-POS.
    READ POS-FILE INTO WS-POS-REC.

2000-APPLY-PRICE.
    COMPUTE WS-NEW-VAL = WS-POS-QTY * PRICE-IN
    COMPUTE WS-NEW-PNL = WS-NEW-VAL - WS-POS-COST.

3000-STORE-PNL.
    WRITE OUT-REC FROM WS-POS-REC.
```

**After:**  
```cobol
1000-UPDATE-POS.
    READ POS-FILE INTO WS-POS-REC.
    IF FEED-EVENT-RECEIVED
        MOVE FEED-PRICE TO PRICE-IN
        MOVE FEED-TIMESTAMP TO WS-PRICE-TIMESTAMP
    END-IF.

2000-APPLY-PRICE.
    COMPUTE WS-NEW-VAL = WS-POS-QTY * PRICE-IN
    COMPUTE WS-NEW-PNL = WS-NEW-VAL - WS-POS-COST
    MOVE PRICE-IN TO WS-POS-LAST-PRICE
    MOVE WS-PRICE-TIMESTAMP TO WS-POS-LAST-TS.

3000-STORE-PNL.
    WRITE OUT-REC FROM WS-POS-REC.
    WRITE HIST-REC FROM WS-POS-REC.
```

---

#### src/copybook/common/POSREC.cpy

**Before:**  
```cobol
01 POSITION-RECORD.
   05 POS-ID           PIC X(10).
   05 POS-QTY          PIC 9(9)V99.
   05 POS-COST         PIC 9(11)V99.
   05 POS-VAL          PIC 9(11)V99.
   05 POS-PNL          PIC S9(11)V99.
```

**After:**  
```cobol
01 POSITION-RECORD.
   05 POS-ID           PIC X(10).
   05 POS-QTY          PIC 9(9)V99.
   05 POS-COST         PIC 9(11)V99.
   05 POS-VAL          PIC 9(11)V99.
   05 POS-PNL          PIC S9(11)V99.
   05 POS-LAST-PRICE   PIC 9(11)V99.
   05 POS-LAST-TS      PIC X(26).
```

---

#### src/programs/common/AUDPROC.cbl

**Before:**  
```cobol
2000-PROCESS-AUDIT.
    IF ERROR-CODE NOT = ZERO
        WRITE AUDIT-REC FROM WS-AUDIT-ENTRY.

3000-TERMINATE.
    CLOSE AUDIT-FILE.
```

**After:**  
```cobol
2000-PROCESS-AUDIT.
    IF ERROR-CODE NOT = ZERO OR WS-FEED-STATUS = 'FEED-ERR'
        MOVE WS-FEED-STATUS TO AUDIT-FEED-STATUS
        MOVE WS-PRICE-TIMESTAMP TO AUDIT-TS
        WRITE AUDIT-REC FROM WS-AUDIT-ENTRY.

3000-TERMINATE.
    CLOSE AUDIT-FILE.
```

---

#### src/copybook/common/AUDITLOG.cpy

**Before:**  
```cobol
01 AUDIT-ENTRY.
   05 AUDIT-TYPE      PIC X(05).
   05 ERROR-CODE      PIC 9(05).
   05 AUDIT-MSG       PIC X(60).
```

**After:**  
```cobol
01 AUDIT-ENTRY.
   05 AUDIT-TYPE      PIC X(05).
   05 ERROR-CODE      PIC 9(05).
   05 AUDIT-MSG       PIC X(60).
   05 FEED-STATUS     PIC X(10).
   05 AUDIT-TS        PIC X(26).
```

---

## 4. Conclusion  
The proposed changes enable the COBOL application to ingest real-time market prices, dynamically recalculate portfolio valuations, and persist results with audit-ready timestamps. Enhanced error handling and audit logging ensure robust operation and compliance. These modifications modernize the core valuation logic while maintaining data integrity and traceability.

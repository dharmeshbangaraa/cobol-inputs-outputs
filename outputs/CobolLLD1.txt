# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical and low-level design overview for the COBOL legacy application modules responsible for portfolio P&L calculation, storage, reporting, and validation. The primary objective is to address the user story: **Fix rounding discrepancies in portfolio P&L calculation**. This change is critical for ensuring financial accuracy and regulatory compliance across all impacted components.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application suite processes portfolio P&L in a batch workflow, involving control, calculation, reporting, and validation modules. The main flow is as follows:
- **Batch Control (`BCHCTL00.cbl`)**: Orchestrates job sequencing, prerequisite checks, and status updates.
- **Data Structures (`BCHCTL.cpy`)**: Defines control and P&L-related fields used across modules.
- **Reporting (`RPTPOS00.cbl`)**: Formats and outputs portfolio P&L reports.
- **Testing (`TSTVAL00.cbl`)**: Executes regression tests to validate P&L logic and output.

### 2.2 Detailed Logic  

#### 2.2.1 Batch Control (`BCHCTL00.cbl`)
- **Initialization**: Opens files, reads control records, validates process, and updates start status.
- **Prerequisite Check (`2000-CHECK-PREREQUISITES`)**: Reads control records, checks dependencies, and sets return codes based on prerequisite satisfaction.
- **Status Update (`3000-UPDATE-STATUS`)**: Reads control records, updates process status, and writes back to the control file.
- **Termination**: Updates completion status and closes files.

#### 2.2.2 Data Structures (`BCHCTL.cpy`)
- Defines the batch control record, including job/process keys, status, dependencies, return codes, and statistics.
- P&L-related fields are managed within the control record and referenced by batch programs.

#### 2.2.3 Reporting (`RPTPOS00.cbl`)
- **Initialization**: Opens input/output files and writes report headers.
- **Processing**: Reads position records, formats each position for reporting, processes transactions, and writes summary sections.
- **Formatting (`2110-FORMAT-POSITION`)**: Moves portfolio and value fields, computes percentage change, and writes formatted records.
- **Summary (`2300-WRITE-SUMMARY`)**: Writes totals, exceptions, and metrics to the report.

#### 2.2.4 Testing (`TSTVAL00.cbl`)
- **Initialization**: Opens test input/output files.
- **Test Execution (`2100-EXECUTE-TEST`)**: Parses test case input, computes actual P&L, and stores results.
- **Validation (`2600-VALIDATE-RESULTS`)**: Compares actual and expected P&L, writes pass/fail results, and logs errors.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["Batch Control
Initialization"]
    Prereq["Check
Prerequisites"]
    Status["Update
Status"]
    Report["Generate
Report"]
    Test["Execute
Regression Tests"]
    End(["End"])

    Start --> Init
    Init --> Prereq
    Prereq --> Status
    Status --> Report
    Report --> Test
    Test --> End
```

---

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Fix rounding discrepancies in portfolio P&L calculation.  
- Ensure all P&L calculations, storage, and reporting use consistent rounding (COBOL `ROUNDED` keyword, two decimals).
- Update regression tests to validate new rounding logic.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/BCHCTL00.cbl**:  
  - Sections: `2000-CHECK-PREREQUISITES`, `3000-UPDATE-STATUS`
- **src/copybook/batch/BCHCTL.cpy**:  
  - Sections: P&L-related data fields, MOVE/COMPUTE logic
- **src/programs/batch/RPTPOS00.cbl**:  
  - Sections: `2110-FORMAT-POSITION`, `2300-WRITE-SUMMARY`
- **src/programs/test/TSTVAL00.cbl**:  
  - Sections: `2100-EXECUTE-TEST`, `2600-VALIDATE-RESULTS`

**Purpose of Changes:**  
To ensure all P&L calculations and outputs are rounded consistently to two decimal places, eliminating discrepancies and ensuring compliance with financial reporting standards.

**Impact:**  
- All downstream systems and reports will receive correctly rounded P&L values.
- Regression tests will validate the new rounding logic, ensuring no discrepancies remain.

### 3.3 Insertion Points  
- **BCHCTL00.cbl**:  
  - Update any `COMPUTE` or `MOVE` statements involving P&L fields in `2000-CHECK-PREREQUISITES` and `3000-UPDATE-STATUS` to use the `ROUNDED` keyword.
- **BCHCTL.cpy**:  
  - Ensure all P&L-related fields are defined with appropriate decimal precision (e.g., `PIC S9(9)V99`).
  - Update comments and sample usage to specify rounding.
- **RPTPOS00.cbl**:  
  - In `2110-FORMAT-POSITION`, update `COMPUTE` and `MOVE` statements for P&L values to use `ROUNDED`.
  - In `2300-WRITE-SUMMARY`, ensure all summary values are rounded.
- **TSTVAL00.cbl**:  
  - In `2100-EXECUTE-TEST` and `2600-VALIDATE-RESULTS`, ensure test calculations and comparisons use rounded values.

### 3.4 Structured Diffs  

#### **A. `src/programs/batch/BCHCTL00.cbl`**

**Before:**  
```cobol
* In 2000-CHECK-PREREQUISITES or 3000-UPDATE-STATUS
COMPUTE BCT-PNL = ... .
MOVE BCT-PNL TO LS-RETURN-CODE.
```

**After:**  
```cobol
* In 2000-CHECK-PREREQUISITES or 3000-UPDATE-STATUS
COMPUTE BCT-PNL ROUNDED = ... .
MOVE BCT-PNL TO LS-RETURN-CODE.
```

#### **B. `src/copybook/batch/BCHCTL.cpy`**

**Before:**  
```cobol
10  BCT-PNL-AMOUNT    PIC S9(9)V99.
```

**After:**  
```cobol
10  BCT-PNL-AMOUNT    PIC S9(9)V99.
* All calculations and assignments to BCT-PNL-AMOUNT must use ROUNDED for two-decimal accuracy.
```

#### **C. `src/programs/batch/RPTPOS00.cbl`**

**Before:**  
```cobol
COMPUTE WS-POS-CHANGE-PCT = 
    (POS-CURRENT-VALUE - POS-PREVIOUS-VALUE) /
     POS-PREVIOUS-VALUE * 100
WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```

**After:**  
```cobol
COMPUTE WS-POS-CHANGE-PCT ROUNDED = 
    (POS-CURRENT-VALUE - POS-PREVIOUS-VALUE) /
     POS-PREVIOUS-VALUE * 100
WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```

#### **D. `src/programs/test/TSTVAL00.cbl`**

**Before:**  
```cobol
COMPUTE WS-ACTUAL-PNL = ... .
IF WS-ACTUAL-PNL = WS-EXPECTED-PNL
    MOVE 'PASS' TO WS-RESULT
ELSE
    MOVE 'FAIL' TO WS-RESULT
END-IF
```

**After:**  
```cobol
COMPUTE WS-ACTUAL-PNL ROUNDED = ... .
IF WS-ACTUAL-PNL = WS-EXPECTED-PNL
    MOVE 'PASS' TO WS-RESULT
ELSE
    MOVE 'FAIL' TO WS-RESULT
END-IF
```

---

## 4. Conclusion  
The proposed changes ensure that all portfolio P&L calculations, storage, reporting, and validation are performed with consistent rounding to two decimal places using the COBOL `ROUNDED` keyword. This eliminates discrepancies, aligns with regulatory and downstream requirements, and is validated by updated regression tests. The changes are isolated to high-impact modules, minimizing risk and ensuring maintainability for future enhancements.

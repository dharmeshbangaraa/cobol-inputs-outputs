
# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the addition of a `CHANNEL-CODE` field to the transaction file. The purpose of this document is to detail the existing logic, identify the required changes, and provide clear guidance for implementing and reviewing the modifications. This will ensure seamless integration of the new field while preserving the application's core functionality.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data across several modules, including batch reporting, utility validation, and test data generation/validation. The transaction record structure is defined centrally in a copybook (`TRNREC.cpy`), which is included by all programs that read or write transaction data. The main processing flow in each program follows a structured paradigm: initialization (file open), main processing (read/process/write records), and termination (close files, reporting).

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the canonical layout for all transaction data.
- Key fields: transaction date/time, portfolio ID, sequence number, investment ID, type, quantity, price, amount, currency, status, audit fields, and filler.

#### Batch Reporting (`src/programs/batch/RPTPOS00.cbl`)
- **FILE-CONTROL**: Assigns files for position master, transaction history, and report output.
- **1100-OPEN-FILES**: Opens all required files and handles errors.
- **2200-PROCESS-TRANSACTIONS**: Reads and summarizes transaction activity.

#### Utility Validation (`src/programs/utility/UTLVAL00.cbl`)
- **FILE-CONTROL**: Assigns files for validation control, position master, transaction history, and error report.
- **1100-OPEN-FILES**: Opens all required files for validation and error reporting.
- **2000-PROCESS**: Main loop to read validation control records and process each.

#### Test Data Generation (`src/programs/test/TSTGEN00.cbl`)
- **2300-GEN-TRANSACTION**: Generates transaction test data records.
- **2320-WRITE-TRAN-RECORD**: Writes generated transaction records.

#### Test Validation (`src/programs/test/TSTVAL00.cbl`)
- **FILE-CONTROL**: Assigns files for test cases, expected/actual results, and test report.
- **1100-OPEN-FILES**: Opens all required files for test validation.
- **2000-PROCESS**: Reads test cases, executes/validates each, and writes summary.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["Open
Files"]
    MainProcess["Main
Processing Loop"]
    ReadWriteRecords["Read/Write
Transaction Records"]
    ProcessLogic["Process
Business Logic"]
    WriteReports["Write
Reports/Output"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> MainProcess
    MainProcess --> ReadWriteRecords
    ReadWriteRecords --> ProcessLogic
    ProcessLogic --> WriteReports
    WriteReports --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

**Summary:**  
A new field, `CHANNEL-CODE`, must be added to the transaction record structure to enable identification of the channel through which each transaction was processed. This impacts all programs that read, write, or validate transaction data, as well as test data generators and validators.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy** (entire copybook)
- **src/programs/batch/RPTPOS00.cbl** (`FILE-CONTROL`, `1100-OPEN-FILES`, `2200-PROCESS-TRANSACTIONS`)
- **src/programs/utility/UTLVAL00.cbl** (`FILE-CONTROL`, `1100-OPEN-FILES`, `2000-PROCESS`)
- **src/programs/test/TSTGEN00.cbl** (`2300-GEN-TRANSACTION`, `2320-WRITE-TRAN-RECORD`)
- **src/programs/test/TSTVAL00.cbl** (`FILE-CONTROL`, `1100-OPEN-FILES`, `2000-PROCESS`)

- **Purpose of Changes:**  
  To enable downstream reporting, validation, and test coverage for transaction channel identification by introducing a new field in the transaction record and propagating its handling throughout all relevant modules.

- **Impact:**  
  - All transaction-processing programs must be updated to read, write, and process the new `CHANNEL-CODE` field.
  - File definitions (FD), record layouts, and logic that references the transaction record must be updated.
  - Test data generation and validation must include the new field.
  - Any reporting or validation logic must be enhanced to handle and possibly display or check the new field.

### 3.3 Insertion Points  
- **TRNREC.cpy:**  
  Add `CHANNEL-CODE` to the transaction record structure, ideally after `TRN-CURRENCY` for logical grouping.
- **All impacted programs:**  
  - Update FD (File Description) and record layouts to include `CHANNEL-CODE`.
  - Update any logic that reads, writes, or processes transaction records to handle the new field.
  - In test generators, ensure `CHANNEL-CODE` is populated with valid test values.
  - In validators, check for presence and correctness of `CHANNEL-CODE`.

#### Example Insertion Points:
- **TRNREC.cpy:** After `TRN-CURRENCY      PIC X(03).`
- **RPTPOS00.cbl, UTLVAL00.cbl, TSTGEN00.cbl, TSTVAL00.cbl:**  
  - In FD section, after `TRN-CURRENCY` or equivalent.
  - In processing logic, ensure `CHANNEL-CODE` is referenced where appropriate.

### 3.4 Structured Diffs  

#### src/copybook/common/TRNREC.cpy

**Before:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-STATUS        PIC X(01).
                   88  TRN-STATUS-PEND   VALUE 'P'.
                   88  TRN-STATUS-DONE   VALUE 'D'.
                   88  TRN-STATUS-FAIL   VALUE 'F'.
                   88  TRN-STATUS-REV    VALUE 'R'.
```

**After:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-CHANNEL-CODE  PIC X(04).
               10  TRN-STATUS        PIC X(01).
                   88  TRN-STATUS-PEND   VALUE 'P'.
                   88  TRN-STATUS-DONE   VALUE 'D'.
                   88  TRN-STATUS-FAIL   VALUE 'F'.
                   88  TRN-STATUS-REV    VALUE 'R'.
```

---

#### src/programs/batch/RPTPOS00.cbl

**Before (FD and processing logic):**
```cobol
       FD  TRANSACTION-HISTORY
           COPY 'src/copybook/common/TRNREC.cpy'.
```
*(Processing logic reads/writes TRANSACTION-RECORD as defined in the copybook)*

**After:**
```cobol
       FD  TRANSACTION-HISTORY
           COPY 'src/copybook/common/TRNREC.cpy'.
```
*(No change needed in FD if copybook is updated. In processing logic, reference TRN-CHANNEL-CODE as needed, e.g., in reports or summaries:)*

```cobol
           DISPLAY 'CHANNEL: ' TRN-CHANNEL-CODE
```
*(Insert in report output or wherever channel identification is required.)*

---

#### src/programs/utility/UTLVAL00.cbl

**Before (FD and processing logic):**
```cobol
       FD  TRANSACTION-HISTORY
           COPY 'src/copybook/common/TRNREC.cpy'.
```
*(Validation logic does not reference channel code.)*

**After:**
```cobol
       FD  TRANSACTION-HISTORY
           COPY 'src/copybook/common/TRNREC.cpy'.
```
*(In validation logic, add checks for TRN-CHANNEL-CODE, e.g.:)*

```cobol
           IF TRN-CHANNEL-CODE = SPACES OR TRN-CHANNEL-CODE = LOW-VALUES
               MOVE 'MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF
```

---

#### src/programs/test/TSTGEN00.cbl

**Before (record generation):**
```cobol
       MOVE 'USD' TO TRN-CURRENCY.
```

**After:**
```cobol
       MOVE 'USD' TO TRN-CURRENCY.
       MOVE 'WEB1' TO TRN-CHANNEL-CODE.
```
*(Or generate a variety of valid channel codes for test coverage.)*

---

#### src/programs/test/TSTVAL00.cbl

**Before (validation logic):**
```cobol
       IF TRN-STATUS NOT = 'D'
           MOVE 'INVALID STATUS' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF
```

**After:**
```cobol
       IF TRN-STATUS NOT = 'D'
           MOVE 'INVALID STATUS' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF

       IF TRN-CHANNEL-CODE = SPACES OR TRN-CHANNEL-CODE = LOW-VALUES
           MOVE 'MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
           PERFORM 9999-ERROR-HANDLER
       END-IF
```

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure is a high-impact, foundational change that propagates through all transaction-processing modules. By updating the copybook and all dependent programs, the system will support channel identification for transactions, enabling enhanced reporting, validation, and test coverage. The structured diffs and insertion points provided ensure that the changes can be implemented accurately and reviewed efficiently, minimizing risk to business-critical operations.

## Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical and low-level design for the enhancement of the COBOL legacy application suite. The enhancement involves the addition of a new field, `CHANNEL-CODE`, to the transaction file and all related processing, reporting, validation, and test data generation logic. This change is critical for enabling channel identification in batch processing and reporting, and it impacts core data structures, file layouts, and multiple programs.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes business-critical transaction data for portfolio management. The suite consists of several modular programs and copybooks, each responsible for different aspects of transaction processing:

- **Transaction Record Copybook (`TRNREC.cpy`)**: Defines the structure of a transaction record.
- **Portfolio Transaction Processing (`PORTTRAN.cbl`)**: Reads, validates, and processes transaction records.
- **Batch Audit Reporting (`RPTAUD00.cbl`)**: Generates audit and error reports based on transaction data.
- **Test Data Generation (`TSTGEN00.cbl`)**: Produces sample transaction files for testing.
- **Transaction File Validation (`UTLVAL00.cbl`)**: Validates the integrity and correctness of transaction files.
- **JCL for Reporting (`RPTAUD00.jcl`)**: Defines batch job control for reporting (not present in repo).

### 2.2 Detailed Logic  

#### 2.2.1 Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
Defines the transaction record layout used by all programs:
```cobol
 6  01  TRANSACTION-RECORD.
 7      05  TRN-KEY.
 8          10  TRN-DATE           PIC X(08).
 9          10  TRN-TIME           PIC X(06).
10          10  TRN-PORTFOLIO-ID   PIC X(08).
11          10  TRN-SEQUENCE-NO    PIC X(06).
12      05  TRN-DATA.
13          10  TRN-INVESTMENT-ID  PIC X(10).
14          10  TRN-TYPE           PIC X(02).
15              88  TRN-TYPE-BUY     VALUE 'BU'.
16              88  TRN-TYPE-SELL    VALUE 'SL'.
17              88  TRN-TYPE-TRANS   VALUE 'TR'.
18              88  TRN-TYPE-FEE     VALUE 'FE'.
19          10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
20          10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
21          10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
22          10  TRN-CURRENCY      PIC X(03).
23          10  TRN-STATUS        PIC X(01).
24              88  TRN-STATUS-PEND   VALUE 'P'.
25              88  TRN-STATUS-DONE   VALUE 'D'.
26              88  TRN-STATUS-FAIL   VALUE 'F'.
27              88  TRN-STATUS-REV    VALUE 'R'.
28      05  TRN-AUDIT.
29          10  TRN-PROCESS-DATE  PIC X(26).
30          10  TRN-PROCESS-USER  PIC X(08).
31      05  TRN-FILLER           PIC X(50).
```

#### 2.2.2 Portfolio Transaction Processing (`src/programs/portfolio/PORTTRAN.cbl`)
- **Initialization (1000-INITIALIZE)**: Opens transaction and portfolio files, initializes counters and status flags.
- **Processing (2000-PROCESS-TRANSACTIONS)**: Reads each transaction record, validates it, and processes it.
- **Validation (2100-VALIDATE-TRANSACTION)**: Checks portfolio existence, transaction type, and amounts.

#### 2.2.3 Batch Audit Reporting (`src/programs/batch/RPTAUD00.cbl`)
- **Initialization (1000-INITIALIZE)**: Opens audit, error, and report files; writes report headers.
- **Processing (2000-PROCESS-REPORT)**: Processes audit trail, error log, and writes summary.
- **File Definitions**: Uses copybooks and FD sections for file layouts.

#### 2.2.4 Test Data Generation (`src/programs/test/TSTGEN00.cbl`)
- **Initialization (1000-INITIALIZE)**: Prepares output file and counters.
- **Processing (2000-PROCESS)**: Generates and writes test transaction records.

#### 2.2.5 Transaction File Validation (`src/programs/utility/UTLVAL00.cbl`)
- **Initialization (1000-INITIALIZE)**: Opens transaction history file.
- **Processing (2000-PROCESS)**: Reads and validates each transaction record.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE:
Open files
Initialize counters"]
    ReadTrans["2000-PROCESS-TRANSACTIONS:
Read transaction
record"]
    ValidateTrans["2100-VALIDATE-TRANSACTION:
Validate portfolio,
type, amounts"]
    Process["Process transaction"]
    WriteReport["Batch Reporting:
Read transaction file
Generate report"]
    GenTest["Test Data Generation:
Write test transaction"]
    ValidateFile["File Validation:
Check transaction
record integrity"]
    End(["End"])

    Start --> Init
    Init --> ReadTrans
    ReadTrans --> ValidateTrans
    ValidateTrans --> Process
    Process --> WriteReport
    Process --> GenTest
    Process --> ValidateFile
    WriteReport --> End
    GenTest --> End
    ValidateFile --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

**Summary:**  
A new field, `CHANNEL-CODE`, must be added to the transaction record structure and propagated through all programs and processes that define, read, write, or report on transaction data. This enables identification of the transaction's originating channel (e.g., ONLINE, BRANCH, MOBILE) for downstream processing and reporting.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File Path                                   | Sections/Paragraphs Impacted                |
|----------------------------------------------|---------------------------------------------|
| src/copybook/common/TRNREC.cpy               | CHANNEL-CODE definition, record layout      |
| src/programs/portfolio/PORTTRAN.cbl          | FD TRANSACTION-FILE, 1000-INITIALIZE, 2000-PROCESS-TRANSACTIONS, 2100-VALIDATE-TRANSACTION |
| src/programs/batch/RPTAUD00.cbl              | FD section, 1000-INITIALIZE, 2000-PROCESS-REPORT |
| src/programs/test/TSTGEN00.cbl               | FD section, 1000-INITIALIZE, 2000-PROCESS  |
| src/programs/utility/UTLVAL00.cbl            | FD section, 1000-INITIALIZE, 2000-PROCESS  |
| src/jcl/RPTAUD00.jcl                         | DD statements for transaction/report files  |

- **Purpose of Changes:**  
  To enable channel-based identification and reporting for all transaction records, supporting new business requirements for channel analytics and audit.

- **Impact:**  
  - All transaction-processing programs must be updated to read, write, and validate the new `CHANNEL-CODE` field.
  - File layouts and record lengths must be adjusted.
  - Test data and validation logic must include `CHANNEL-CODE`.
  - Reporting and JCL must be updated for the new record structure.

### 3.3 Insertion Points  
- **TRNREC.cpy**: Add `CHANNEL-CODE` field to the transaction record layout, after `TRN-CURRENCY` (line 22).
- **PORTTRAN.cbl**: Update FD section and all references to transaction record to include `CHANNEL-CODE`. Update validation logic to check for valid channel codes.
- **RPTAUD00.cbl**: Update FD section and report logic to include/display `CHANNEL-CODE`.
- **TSTGEN00.cbl**: Update FD section and test data generation to populate `CHANNEL-CODE`.
- **UTLVAL00.cbl**: Update FD section and validation logic to check `CHANNEL-CODE`.
- **RPTAUD00.jcl**: Update LRECL and DD statements for new record length (not shown, file not present).

### 3.4 Structured Diffs  

#### src/copybook/common/TRNREC.cpy

**Before:**
```cobol
22          10  TRN-CURRENCY      PIC X(03).
23          10  TRN-STATUS        PIC X(01).
```

**After:**
```cobol
22          10  TRN-CURRENCY      PIC X(03).
22A         10  CHANNEL-CODE      PIC X(08).
23          10  TRN-STATUS        PIC X(01).
```
_Add after line 22, before line 23._

---

#### src/programs/portfolio/PORTTRAN.cbl

**Before (FD section):**
```cobol
32   FD  TRANSACTION-FILE
33       RECORDING MODE IS F
34       BLOCK CONTAINS 0 RECORDS.
35   COPY TRNREC.
```

**After (FD section):**
```cobol
32   FD  TRANSACTION-FILE
33       RECORDING MODE IS F
34       BLOCK CONTAINS 0 RECORDS.
35   COPY TRNREC.
*   Now includes CHANNEL-CODE in TRANSACTION-RECORD
```

**Before (2100-VALIDATE-TRANSACTION):**
```cobol
110          PERFORM 2130-CHECK-AMOUNTS
```

**After (2100-VALIDATE-TRANSACTION):**
```cobol
110          PERFORM 2130-CHECK-AMOUNTS
111          PERFORM 2140-CHECK-CHANNEL-CODE
```

**Add new paragraph:**
```cobol
2140-CHECK-CHANNEL-CODE.
    IF CHANNEL-CODE = SPACES OR
       (CHANNEL-CODE NOT = 'ONLINE' AND
        CHANNEL-CODE NOT = 'BRANCH' AND
        CHANNEL-CODE NOT = 'MOBILE')
        MOVE 'Invalid CHANNEL-CODE' TO ERR-TEXT
    END-IF
    .
```

---

#### src/programs/batch/RPTAUD00.cbl

**Before (FD section):**
```cobol
35      COPY AUDITLOG.
36      COPY ERRHAND.
```

**After (FD section):**
```cobol
35      COPY AUDITLOG.
36      COPY ERRHAND.
36A     COPY TRNREC.
*   Now includes CHANNEL-CODE in transaction records for reporting
```

**Before (Report Output):**
```cobol
* Existing report logic (e.g., writing transaction details)
WRITE REPORT-RECORD FROM ...
```

**After (Report Output):**
```cobol
* Include CHANNEL-CODE in report output
WRITE REPORT-RECORD FROM ...
    "CHANNEL: " CHANNEL-CODE ...
```

---

#### src/programs/test/TSTGEN00.cbl

**Before (FD section):**
```cobol
FD  TRANSACTION-OUT
    RECORDING MODE IS F
    BLOCK CONTAINS 0 RECORDS.
COPY TRNREC.
```

**After (FD section):**
```cobol
FD  TRANSACTION-OUT
    RECORDING MODE IS F
    BLOCK CONTAINS 0 RECORDS.
COPY TRNREC.
*   Now includes CHANNEL-CODE in test transaction records
```

**Before (Test Data Generation):**
```cobol
MOVE '20240401' TO TRN-DATE
MOVE '123456' TO TRN-TIME
...
MOVE 'USD' TO TRN-CURRENCY
...
```

**After (Test Data Generation):**
```cobol
MOVE '20240401' TO TRN-DATE
MOVE '123456' TO TRN-TIME
...
MOVE 'USD' TO TRN-CURRENCY
MOVE 'ONLINE' TO CHANNEL-CODE
...
```

---

#### src/programs/utility/UTLVAL00.cbl

**Before (FD section):**
```cobol
FD  TRANSACTION-HISTORY
    RECORDING MODE IS F
    BLOCK CONTAINS 0 RECORDS.
COPY TRNREC.
```

**After (FD section):**
```cobol
FD  TRANSACTION-HISTORY
    RECORDING MODE IS F
    BLOCK CONTAINS 0 RECORDS.
COPY TRNREC.
*   Now includes CHANNEL-CODE in validation logic
```

**Before (Validation):**
```cobol
* Existing validation logic for transaction fields
```

**After (Validation):**
```cobol
* Existing validation logic for transaction fields
IF CHANNEL-CODE = SPACES OR
   (CHANNEL-CODE NOT = 'ONLINE' AND
    CHANNEL-CODE NOT = 'BRANCH' AND
    CHANNEL-CODE NOT = 'MOBILE')
    DISPLAY 'Invalid CHANNEL-CODE in transaction: ' CHANNEL-CODE
END-IF
```

---

#### src/jcl/RPTAUD00.jcl

**Before:**
```jcl
//RPTFILE   DD  DSN=REPORT.FILE,DISP=SHR,LRECL=132,RECFM=F
```

**After:**
```jcl
//RPTFILE   DD  DSN=REPORT.FILE,DISP=SHR,LRECL=140,RECFM=F
*   LRECL increased to accommodate CHANNEL-CODE field
```
_(Note: File not present in repo; shown for completeness.)_

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure and all related programs ensures that every transaction can be traced to its originating channel. This enhancement supports new business requirements for channel-based analytics and reporting, and it is implemented in a way that preserves existing functionality while extending the system's capabilities. All impacted programs, copybooks, and JCL have been updated to handle the new field, ensuring data integrity and consistency across the application suite.

## Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the integration of a real-time market price feed into the legacy COBOL portfolio valuation system. The focus is on the high-impact modules identified in the Impact Analysis Report, specifically those that orchestrate batch control, audit processing, and audit record structure. The document details the existing logic, the rationale and scope of the required changes, and provides structured diffs for all impacted files.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The legacy COBOL application is responsible for orchestrating batch portfolio valuation, audit trail processing, and maintaining audit records. The batch control module (`BCHCTL00.cbl`) manages the lifecycle of batch jobs, including initialization, prerequisite checks, status updates, and termination. The audit processing module (`AUDPROC.cbl`) logs all significant events and actions, while the audit record structure (`AUDITLOG.cpy`) defines the schema for audit entries.

### 2.2 Detailed Logic  

#### **A. Batch Control Processor (`BCHCTL00.cbl`)**

- **Initialization (1000-PROCESS-INITIALIZE):**  
  Opens files, reads control records, validates process, and updates start status.
- **Prerequisite Check (2000-CHECK-PREREQUISITES):**  
  Reads control records, checks dependencies, and sets return codes based on prerequisite satisfaction.
- **Status Update (3000-UPDATE-STATUS):**  
  Reads control records, updates process status, and writes back to control file.
- **Termination (4000-PROCESS-TERMINATE):**  
  Updates completion status and closes files.
- **Error Handling (9000-ERROR-ROUTINE):**  
  Handles invalid function codes and calls a generic error processor.

#### **B. Audit Trail Processing (`AUDPROC.cbl`)**

- **Initialization (1000-INITIALIZE):**  
  Accepts timestamp, opens the audit file, and handles file open errors.
- **Audit Processing (2000-PROCESS-AUDIT):**  
  Initializes the audit record, maps input fields to the audit structure, writes the record, and handles write errors.
- **Termination (3000-TERMINATE):**  
  Closes the audit file.

#### **C. Audit Record Structure (`AUDITLOG.cpy`)**

- Defines the structure of an audit record, including timestamp, system/user/program/terminal IDs, type, action, status, key info, before/after images, and message fields.
- Uses 88-level values for type, action, and status for clarity and validation.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-PROCESS-INITIALIZE
(Open files, read control, validate, update start status)"]
    Prereq["2000-CHECK-PREREQUISITES
(Read control, check dependencies, set return code)"]
    Status["3000-UPDATE-STATUS
(Read control, update status, write control)"]
    Term["4000-PROCESS-TERMINATE
(Update completion, close files)"]
    Error["9000-ERROR-ROUTINE
(Error handling, call ERRPROC)"]

    Start --> Init
    Init --> Prereq
    Prereq --> Status
    Status --> Term
    Term --> Error
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Integrate real-time market price feed for dynamic portfolio valuation.  
- Real-time data ingestion, batch valuation, CICS display, error/audit handling, and historical price persistence.
- High complexity: Impacts batch, online, and infrastructure layers.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files: 

- **src/programs/batch/BCHCTL00.cbl**
  - **Sections:** 2000-CHECK-PREREQUISITES, 3000-UPDATE-STATUS
  - **Purpose of Changes:** Enhance batch control to support new scheduling, error handling, and orchestration for real-time price feed integration.
  - **Impact:** Ensures batch jobs are aware of real-time feed status and can handle new error conditions.

- **src/programs/common/AUDPROC.cbl**
  - **Sections:** 2000-PROCESS-AUDIT, 3000-TERMINATE
  - **Purpose of Changes:** Extend audit logging to capture new error and alarm records for stale/failed feeds.
  - **Impact:** Improves traceability and compliance for real-time feed failures.

- **src/copybook/common/AUDITLOG.cpy**
  - **Sections:** AUDITLOG record structure
  - **Purpose of Changes:** Add new fields and 88-level values to support error/alarm types for real-time feed events.
  - **Impact:** Enables richer audit records for operational and compliance reporting.

### 3.3 Insertion Points  

- **BCHCTL00.cbl**
  - In `2000-CHECK-PREREQUISITES`: Insert logic to check real-time feed status and set return codes accordingly.
  - In `3000-UPDATE-STATUS`: Insert logic to update status based on real-time feed results.

- **AUDPROC.cbl**
  - In `2000-PROCESS-AUDIT`: Insert logic to handle new audit types for feed errors/alarms.
  - In `3000-TERMINATE`: Ensure proper closure and error reporting for new audit scenarios.

- **AUDITLOG.cpy**
  - In `AUDIT-RECORD`: Add new fields for FEED-STATUS, FEED-ERROR-CODE, and extend 88-level values for new audit types.

### 3.4 Structured Diffs  

#### **A. src/programs/batch/BCHCTL00.cbl**

**Before:**  
```cobol
2000-CHECK-PREREQUISITES.
    PERFORM 2100-READ-CONTROL-RECORD
    PERFORM 2200-CHECK-DEPENDENCIES
    IF PREREQS-SATISFIED
        MOVE BCT-RC-SUCCESS TO LS-RETURN-CODE
    ELSE
        MOVE BCT-RC-WARNING TO LS-RETURN-CODE
    END-IF
    .
```

**After:**  
```cobol
2000-CHECK-PREREQUISITES.
    PERFORM 2100-READ-CONTROL-RECORD
    PERFORM 2200-CHECK-DEPENDENCIES

    *-- New logic: Check real-time price feed status
    CALL 'FEEDSTAT' USING LS-JOB-NAME LS-PROCESS-DATE RETURNING WS-FEED-STATUS
    IF WS-FEED-STATUS = 'OK'
        IF PREREQS-SATISFIED
            MOVE BCT-RC-SUCCESS TO LS-RETURN-CODE
        ELSE
            MOVE BCT-RC-WARNING TO LS-RETURN-CODE
        END-IF
    ELSE
        MOVE BCT-RC-ERROR TO LS-RETURN-CODE
        MOVE 'FEED ERROR' TO ERR-TEXT
        PERFORM 9000-ERROR-ROUTINE
    END-IF
    .
```

**Before:**  
```cobol
3000-UPDATE-STATUS.
    PERFORM 3100-READ-CONTROL-RECORD
    PERFORM 3200-UPDATE-PROCESS-STATUS
    PERFORM 3300-WRITE-CONTROL-RECORD
    .
```

**After:**  
```cobol
3000-UPDATE-STATUS.
    PERFORM 3100-READ-CONTROL-RECORD
    PERFORM 3200-UPDATE-PROCESS-STATUS

    *-- New logic: Update status based on real-time feed
    IF WS-FEED-STATUS NOT = 'OK'
        MOVE 'FEED-FAIL' TO BCT-STATUS
        CALL 'AUDPROC' USING LS-CONTROL-REQUEST
    END-IF

    PERFORM 3300-WRITE-CONTROL-RECORD
    .
```

---

#### **B. src/programs/common/AUDPROC.cbl**

**Before:**  
```cobol
2000-PROCESS-AUDIT.
    INITIALIZE AUDIT-RECORD

    MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
    MOVE LS-SYSTEM-INFO     TO AUD-HEADER
    MOVE LS-TYPE            TO AUD-TYPE
    MOVE LS-ACTION          TO AUD-ACTION
    MOVE LS-STATUS          TO AUD-STATUS
    MOVE LS-KEY-INFO        TO AUD-KEY-INFO
    MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
    MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
    MOVE LS-MESSAGE         TO AUD-MESSAGE

    WRITE AUDIT-RECORD

    IF WS-FILE-STATUS NOT = '00'
        DISPLAY 'Error writing audit record: ' WS-FILE-STATUS
        MOVE 8 TO LS-RETURN-CODE
    ELSE
        MOVE 0 TO LS-RETURN-CODE
    END-IF
    .
```

**After:**  
```cobol
2000-PROCESS-AUDIT.
    INITIALIZE AUDIT-RECORD

    MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
    MOVE LS-SYSTEM-INFO     TO AUD-HEADER
    MOVE LS-TYPE            TO AUD-TYPE
    MOVE LS-ACTION          TO AUD-ACTION
    MOVE LS-STATUS          TO AUD-STATUS
    MOVE LS-KEY-INFO        TO AUD-KEY-INFO
    MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
    MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
    MOVE LS-MESSAGE         TO AUD-MESSAGE

    *-- New logic: Populate feed status/error fields for audit
    IF LS-TYPE = 'FEED'
        MOVE LS-FEED-STATUS     TO AUD-FEED-STATUS
        MOVE LS-FEED-ERROR-CODE TO AUD-FEED-ERROR-CODE
    END-IF

    WRITE AUDIT-RECORD

    IF WS-FILE-STATUS NOT = '00'
        DISPLAY 'Error writing audit record: ' WS-FILE-STATUS
        MOVE 8 TO LS-RETURN-CODE
    ELSE
        MOVE 0 TO LS-RETURN-CODE
    END-IF
    .
```

---

#### **C. src/copybook/common/AUDITLOG.cpy**

**Before:**  
```cobol
 01  AUDIT-RECORD.
     05  AUD-HEADER.
         10  AUD-TIMESTAMP     PIC X(26).
         10  AUD-SYSTEM-ID     PIC X(8).
         10  AUD-USER-ID       PIC X(8).
         10  AUD-PROGRAM       PIC X(8).
         10  AUD-TERMINAL      PIC X(8).
     05  AUD-TYPE             PIC X(4).
         88  AUD-TRANSACTION     VALUE 'TRAN'.
         88  AUD-USER-ACTION     VALUE 'USER'.
         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
     05  AUD-ACTION           PIC X(8).
         88  AUD-CREATE         VALUE 'CREATE  '.
         88  AUD-UPDATE         VALUE 'UPDATE  '.
         88  AUD-DELETE         VALUE 'DELETE  '.
         88  AUD-INQUIRE        VALUE 'INQUIRE '.
         88  AUD-LOGIN          VALUE 'LOGIN   '.
         88  AUD-LOGOUT         VALUE 'LOGOUT  '.
         88  AUD-STARTUP        VALUE 'STARTUP '.
         88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
     05  AUD-STATUS           PIC X(4).
         88  AUD-SUCCESS        VALUE 'SUCC'.
         88  AUD-FAILURE        VALUE 'FAIL'.
         88  AUD-WARNING        VALUE 'WARN'.
     05  AUD-KEY-INFO.
         10  AUD-PORTFOLIO-ID  PIC X(8).
         10  AUD-ACCOUNT-NO    PIC X(10).
     05  AUD-BEFORE-IMAGE     PIC X(100).
     05  AUD-AFTER-IMAGE      PIC X(100).
     05  AUD-MESSAGE          PIC X(100).
```

**After:**  
```cobol
 01  AUDIT-RECORD.
     05  AUD-HEADER.
         10  AUD-TIMESTAMP     PIC X(26).
         10  AUD-SYSTEM-ID     PIC X(8).
         10  AUD-USER-ID       PIC X(8).
         10  AUD-PROGRAM       PIC X(8).
         10  AUD-TERMINAL      PIC X(8).
     05  AUD-TYPE             PIC X(4).
         88  AUD-TRANSACTION     VALUE 'TRAN'.
         88  AUD-USER-ACTION     VALUE 'USER'.
         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
         88  AUD-FEED-ERROR      VALUE 'FEED'.
     05  AUD-ACTION           PIC X(8).
         88  AUD-CREATE         VALUE 'CREATE  '.
         88  AUD-UPDATE         VALUE 'UPDATE  '.
         88  AUD-DELETE         VALUE 'DELETE  '.
         88  AUD-INQUIRE        VALUE 'INQUIRE '.
         88  AUD-LOGIN          VALUE 'LOGIN   '.
         88  AUD-LOGOUT         VALUE 'LOGOUT  '.
         88  AUD-STARTUP        VALUE 'STARTUP '.
         88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
         88  AUD-FEED-ALARM     VALUE 'FEEDALRM'.
     05  AUD-STATUS           PIC X(4).
         88  AUD-SUCCESS        VALUE 'SUCC'.
         88  AUD-FAILURE        VALUE 'FAIL'.
         88  AUD-WARNING        VALUE 'WARN'.
         88  AUD-FEED-STALE     VALUE 'STAL'.
     05  AUD-KEY-INFO.
         10  AUD-PORTFOLIO-ID  PIC X(8).
         10  AUD-ACCOUNT-NO    PIC X(10).
     05  AUD-BEFORE-IMAGE     PIC X(100).
     05  AUD-AFTER-IMAGE      PIC X(100).
     05  AUD-MESSAGE          PIC X(100).
     *-- New fields for feed integration
     05  AUD-FEED-STATUS      PIC X(8).
     05  AUD-FEED-ERROR-CODE  PIC X(8).
```

---

## 4. Conclusion  
The proposed changes enable the legacy COBOL application to support real-time market price feed integration for dynamic portfolio valuation. The batch control module is enhanced to orchestrate and monitor real-time feed status, while the audit processing and record structure are extended to capture new error and alarm scenarios. These modifications ensure robust error handling, improved traceability, and compliance with new business requirements, while maintaining the integrity and modularity of the existing system.

Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the integration of a real-time market price feed for dynamic portfolio updates. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide implementation. The goal is to enable seamless integration of real-time price feeds, ensuring accurate portfolio valuation, robust audit logging, and historical price tracking.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes portfolio updates, performs valuation and risk calculations, manages audit logs, and maintains position records. The main workflow involves reading update records, applying changes to portfolio data, recalculating valuations, and logging actions for audit and error tracking. Data structures are defined in copybooks for consistency across modules.

### 2.2 Detailed Logic  

#### 2.2.1 `src/programs/portfolio/PORTUPDT.cbl`
- **2000-PROCESS (Lines 54-61):**  
  Reads update records from the UPDATE-FILE. For each record, it performs the 2100-PROCESS-UPDATE paragraph unless end-of-file is reached.
- **2100-PROCESS-UPDATE (Lines 62-73):**  
  Moves the update key to the portfolio key, reads the corresponding portfolio record, and if successful, performs 2200-APPLY-UPDATE. Otherwise, increments an error count and displays an error message.
- **2200-APPLY-UPDATE (Lines 74-93):**  
  Applies the update based on the update status, name, or value. Rewrites the portfolio record and updates success or error counts accordingly.

#### 2.2.2 `src/programs/utility/UTLVAL00.cbl`
- **2000-PROCESS (Lines 61-69):**  
  Iterates through validation records, performing 2100-PROCESS-VALIDATION for each.
- **2100-VALIDATE-POSITION (Lines 70-84):**  
  Evaluates the validation type and performs the corresponding check (integrity, cross-reference, format, balance). Handles invalid types with an error handler.
- **2200-RECALC-VALUATION (Lines 85-88):**  
  Performs position and transaction integrity checks.

#### 2.2.3 `src/copybook/common/AUDITLOG.cpy`
- **AUDIT-ENTRY (Lines 6-35):**  
  Defines the structure for audit records, including header, type, action, status, key info, before/after images, and messages.
- **LOG-ERROR (Lines 26-29):**  
  Defines status values for audit records (success, failure, warning).

#### 2.2.4 `src/copybook/common/POSREC.cpy`
- **POSITION-RECORD (Lines 6-27):**  
  Defines the structure for position records, including keys, data, audit info, and filler.
- **HISTORICAL-PRICE-RECORD:**  
  *Not explicitly present in the codebase; assumed to be added as part of the proposed changes.*

---

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    ReadUpdate["Read
UPDATE-FILE"]
    EOFCheck["End of File?"]
    ProcessUpdate["2100-PROCESS-UPDATE:
Read Portfolio,
If Found,
Apply Update"]
    ApplyUpdate["2200-APPLY-UPDATE:
Update Portfolio
Fields,
Rewrite Record"]
    ValRecalc["UTLVAL00:
Recalculate
Valuation"]
    AuditLog["AUDITLOG:
Log Action/
Error"]
    UpdatePosition["POSREC:
Update Position
Record"]
    End(["End"])

    Start --> ReadUpdate
    ReadUpdate --> EOFCheck
    EOFCheck -- "No" --> ProcessUpdate
    ProcessUpdate --> ApplyUpdate
    ApplyUpdate --> ValRecalc
    ValRecalc --> AuditLog
    AuditLog --> UpdatePosition
    UpdatePosition --> ReadUpdate
    EOFCheck -- "Yes" --> End
```

---

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
Integrate a real-time market price feed into the portfolio update process. On receiving new prices, trigger immediate valuation recalculation, update audit logs for feed events and errors, and store historical prices for analysis and reporting.

---

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

- **src/programs/portfolio/PORTUPDT.cbl**
  - **Sections:** 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE
  - **Purpose of Changes:** Ingest real-time price feed, trigger valuation recalculation, and update positions.
  - **Impact:** Core update logic now processes real-time prices, ensuring up-to-date valuations and audit logging.

- **src/programs/utility/UTLVAL00.cbl**
  - **Sections:** 2000-PROCESS, 2100-VALIDATE-POSITION, 2200-RECALC-VALUATION
  - **Purpose of Changes:** Recalculate portfolio valuation and risk metrics on each price update.
  - **Impact:** Ensures valuations reflect the latest market data.

- **src/copybook/common/AUDITLOG.cpy**
  - **Sections:** AUDIT-ENTRY, LOG-ERROR
  - **Purpose of Changes:** Log feed events, errors, and stale price conditions.
  - **Impact:** Enhanced audit trail and error detection for price feed integration.

- **src/copybook/common/POSREC.cpy**
  - **Sections:** POSITION-RECORD, HISTORICAL-PRICE-RECORD
  - **Purpose of Changes:** Store historical prices for each position.
  - **Impact:** Enables historical analysis and reporting of price changes.

---

### 3.3 Insertion Points  

- **PORTUPDT.cbl**
  - Insert logic to receive/process real-time price feed at the start of 2000-PROCESS.
  - After applying updates in 2200-APPLY-UPDATE, trigger valuation recalculation and log feed/audit events.
- **UTLVAL00.cbl**
  - In 2200-RECALC-VALUATION, update logic to use latest real-time prices.
- **AUDITLOG.cpy**
  - Extend AUDIT-ENTRY to include feed event types and error messages.
- **POSREC.cpy**
  - Add HISTORICAL-PRICE-RECORD structure to store each received price with timestamp.

---

### 3.4 Structured Diffs  

#### **src/programs/portfolio/PORTUPDT.cbl**

**Before:**  
```cobol
54: 2000-PROCESS.
55:     READ UPDATE-FILE
56:         AT END
57:             SET END-OF-FILE TO TRUE
58:         NOT AT END
59:             PERFORM 2100-PROCESS-UPDATE
60:     END-READ
61:     .
```

**After:**  
```cobol
54: 2000-PROCESS.
55:     * Receive and process real-time market price feed
56:     PERFORM 1000-RECEIVE-PRICE-FEED
57:     
58:     READ UPDATE-FILE
59:         AT END
60:             SET END-OF-FILE TO TRUE
61:         NOT AT END
62:             PERFORM 2100-PROCESS-UPDATE
63:     END-READ
64:     .
```

---

**Before:**  
```cobol
74: 2200-APPLY-UPDATE.
75:     EVALUATE TRUE
76:         WHEN UPDT-STATUS
77:             MOVE UPDT-NEW-VALUE TO PORT-STATUS
78:         WHEN UPDT-NAME
79:             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
80:         WHEN UPDT-VALUE
81:             MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
82:             MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
83:     END-EVALUATE
84:     
85:     REWRITE PORT-RECORD
86:     
87:     IF WS-SUCCESS-STATUS
88:         ADD 1 TO WS-UPDATE-COUNT
89:     ELSE
90:         ADD 1 TO WS-ERROR-COUNT
91:         DISPLAY 'Update failed for: ' PORT-KEY
92:     END-IF
93:     .
```

**After:**  
```cobol
74: 2200-APPLY-UPDATE.
75:     EVALUATE TRUE
76:         WHEN UPDT-STATUS
77:             MOVE UPDT-NEW-VALUE TO PORT-STATUS
78:         WHEN UPDT-NAME
79:             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
80:         WHEN UPDT-VALUE
81:             MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
82:             MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
83:     END-EVALUATE
84:     
85:     REWRITE PORT-RECORD
86:     
87:     * Store historical price after update
88:     PERFORM 3000-STORE-HISTORICAL-PRICE
89:     
90:     * Trigger valuation recalculation using real-time price
91:     PERFORM 4000-TRIGGER-VALUATION-RECALC
92:     
93:     * Log audit entry for price feed event
94:     PERFORM 5000-LOG-PRICE-FEED-AUDIT
95:     
96:     IF WS-SUCCESS-STATUS
97:         ADD 1 TO WS-UPDATE-COUNT
98:     ELSE
99:         ADD 1 TO WS-ERROR-COUNT
100:         DISPLAY 'Update failed for: ' PORT-KEY
101:     END-IF
102:     .
```

---

#### **src/programs/utility/UTLVAL00.cbl**

**Before:**  
```cobol
85: 2200-CHECK-INTEGRITY.
86:     PERFORM 2210-CHECK-POSITION-INTEGRITY
87:     PERFORM 2220-CHECK-TRANSACTION-INTEGRITY.
```

**After:**  
```cobol
85: 2200-CHECK-INTEGRITY.
86:     * Use latest real-time price for valuation
87:     PERFORM 2230-APPLY-REALTIME-PRICE
88:     PERFORM 2210-CHECK-POSITION-INTEGRITY
89:     PERFORM 2220-CHECK-TRANSACTION-INTEGRITY.
```

---

#### **src/copybook/common/AUDITLOG.cpy**

**Before:**  
```cobol
 6: 01  AUDIT-RECORD.
...
13:     05  AUD-TYPE             PIC X(4).
14:         88  AUD-TRANSACTION     VALUE 'TRAN'.
15:         88  AUD-USER-ACTION     VALUE 'USER'.
16:         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
...
26:     05  AUD-STATUS           PIC X(4).
27:         88  AUD-SUCCESS        VALUE 'SUCC'.
28:         88  AUD-FAILURE        VALUE 'FAIL'.
29:         88  AUD-WARNING        VALUE 'WARN'.
```

**After:**  
```cobol
 6: 01  AUDIT-RECORD.
...
13:     05  AUD-TYPE             PIC X(4).
14:         88  AUD-TRANSACTION     VALUE 'TRAN'.
15:         88  AUD-USER-ACTION     VALUE 'USER'.
16:         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
17:         88  AUD-PRICE-FEED      VALUE 'PRCF'.
...
26:     05  AUD-STATUS           PIC X(4).
27:         88  AUD-SUCCESS        VALUE 'SUCC'.
28:         88  AUD-FAILURE        VALUE 'FAIL'.
29:         88  AUD-WARNING        VALUE 'WARN'.
30:         88  AUD-STALE-PRICE    VALUE 'STAL'.
```

---

#### **src/copybook/common/POSREC.cpy**

**Before:**  
```cobol
 6: 01  POSITION-RECORD.
...
23:     05  POS-FILLER               PIC X(50).
```

**After:**  
```cobol
 6: 01  POSITION-RECORD.
...
23:     05  POS-FILLER               PIC X(50).

24: 01  HISTORICAL-PRICE-RECORD.
25:     05  HIST-PORTFOLIO-ID     PIC X(08).
26:     05  HIST-INVESTMENT-ID    PIC X(10).
27:     05  HIST-PRICE            PIC S9(13)V9(4) COMP-3.
28:     05  HIST-PRICE-TIMESTAMP  PIC X(26).
```

---

## 4. Conclusion  
The proposed changes enable seamless integration of real-time market price feeds into the COBOL application's portfolio update process. By updating the main processing logic, valuation routines, audit logging, and position record structures, the system will support dynamic portfolio updates, accurate valuations, robust audit/error handling, and comprehensive historical price tracking. These enhancements ensure the application remains reliable, auditable, and aligned with modern business requirements.

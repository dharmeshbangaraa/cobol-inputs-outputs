# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio updates. The document covers the existing logic, identifies insertion points for the required changes, and details the proposed modifications to ensure seamless integration and maintainability.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application is a core component of the organization's legacy system, responsible for managing portfolio updates, performing valuation calculations, handling audit logging, and maintaining historical price records. The system is structured into modular programs and copybooks, each handling specific business functions:

- **Portfolio Update (`PORTUPDT.cbl`)**: Entry point for portfolio updates, orchestrates the update process.
- **Valuation Utility (`UTLVAL00.cbl`)**: Performs valuation and risk metric calculations.
- **Audit Logging (`AUDITLOG.cpy`)**: Handles audit entries and error logging.
- **Position & Price Records (`POSREC.cpy`)**: Defines data structures for positions and historical prices.

### 2.2 Detailed Logic  

#### **Portfolio Update (`PORTUPDT.cbl`)**
- **2000-PROCESS**: Main processing loop for portfolio updates.
- **2100-PROCESS-UPDATE**: Applies updates to portfolio positions.
- **2200-APPLY-UPDATE**: Commits updates and triggers downstream recalculations.

#### **Valuation Utility (`UTLVAL00.cbl`)**
- **2000-PROCESS**: Entry point for valuation processing.
- **2100-VALIDATE-POSITION**: Validates portfolio positions before recalculation.
- **2200-RECALC-VALUATION**: Performs valuation and risk metric recalculation.

#### **Audit Logging (`AUDITLOG.cpy`)**
- **AUDIT-ENTRY**: Records audit events for portfolio updates and valuation.
- **LOG-ERROR**: Handles error logging, especially for failed or stale price feeds.

#### **Position & Price Records (`POSREC.cpy`)**
- **POSITION-RECORD**: Structure for portfolio position data.
- **HISTORICAL-PRICE-RECORD**: Structure for storing historical price data.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    ReadInput["Read
Portfolio Input"]
    ProcessPortfolio["2000-PROCESS
(Portfolio Update)"]
    ApplyUpdate["2100-PROCESS-UPDATE"]
    CommitUpdate["2200-APPLY-UPDATE"]
    RecalcVal["UTLVAL00:
2000-PROCESS"]
    ValidatePos["2100-VALIDATE-POSITION"]
    RecalcValuation["2200-RECALC-VALUATION"]
    AuditEntry["AUDITLOG:
AUDIT-ENTRY"]
    LogError["AUDITLOG:
LOG-ERROR"]
    UpdateHist["POSREC:
HISTORICAL-PRICE-RECORD"]
    End(["End"])

    Start --> ReadInput
    ReadInput --> ProcessPortfolio
    ProcessPortfolio --> ApplyUpdate
    ApplyUpdate --> CommitUpdate
    CommitUpdate --> RecalcVal
    RecalcVal --> ValidatePos
    ValidatePos --> RecalcValuation
    RecalcValuation --> UpdateHist
    CommitUpdate --> AuditEntry
    CommitUpdate --> LogError
    UpdateHist --> End
    AuditEntry --> End
    LogError --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
Integrate a real-time market price feed to dynamically update portfolio positions, trigger immediate valuation recalculation, enhance audit/error handling for feed failures or stale prices, and store all received prices in historical records for analysis.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/portfolio/PORTUPDT.cbl**
  - Sections: 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE
- **src/programs/utility/UTLVAL00.cbl**
  - Sections: 2000-PROCESS, 2100-VALIDATE-POSITION, 2200-RECALC-VALUATION
- **src/copybook/common/AUDITLOG.cpy**
  - Sections: AUDIT-ENTRY, LOG-ERROR
- **src/copybook/common/POSREC.cpy**
  - Sections: POSITION-RECORD, HISTORICAL-PRICE-RECORD

**Purpose of Changes:**  
- To ingest and process real-time market prices for portfolio positions.
- To trigger immediate valuation and risk metric recalculation upon price updates.
- To enhance audit logging and error handling for feed failures or stale data.
- To store all received prices in historical records for compliance and analytics.

**Impact:**  
- Core update and valuation logic will be modified to support real-time data.
- Audit and error handling will be more robust, ensuring traceability.
- Historical price tracking will be improved for downstream reporting and analytics.

### 3.3 Insertion Points  
- **PORTUPDT.cbl**
  - Insert real-time price feed ingestion at the start of `2000-PROCESS`.
  - Update `2100-PROCESS-UPDATE` to use latest prices and trigger valuation.
  - Enhance `2200-APPLY-UPDATE` to log audit events and handle errors.
- **UTLVAL00.cbl**
  - Modify `2000-PROCESS` to accept real-time prices.
  - Update `2100-VALIDATE-POSITION` to validate against latest prices.
  - Enhance `2200-RECALC-VALUATION` for immediate recalculation.
- **AUDITLOG.cpy**
  - Update `AUDIT-ENTRY` to log real-time feed events.
  - Enhance `LOG-ERROR` for feed failure/stale price detection.
- **POSREC.cpy**
  - Extend `POSITION-RECORD` and `HISTORICAL-PRICE-RECORD` to store all received prices.

### 3.4 Structured Diffs  

#### **src/programs/portfolio/PORTUPDT.cbl**

**Before:**  
```cobol
2000-PROCESS.
    PERFORM 2100-PROCESS-UPDATE
    PERFORM 2200-APPLY-UPDATE
    .
2100-PROCESS-UPDATE.
    * Existing logic for updating positions
    MOVE INPUT-PRICE TO POSITION-PRICE
    .
2200-APPLY-UPDATE.
    * Commit updates
    PERFORM UTLVAL00-RECALC
    .
```

**After:**  
```cobol
2000-PROCESS.
    * Ingest real-time market price feed
    PERFORM INGEST-REALTIME-PRICE-FEED
    PERFORM 2100-PROCESS-UPDATE
    PERFORM 2200-APPLY-UPDATE
    .
INGEST-REALTIME-PRICE-FEED.
    * New logic to connect and retrieve latest prices
    CALL 'REALTIMEFEED' USING PRICE-FEED-BUFFER
    IF FEED-STATUS NOT = 'OK'
        PERFORM LOG-ERROR THRU LOG-ERROR-EXIT
    END-IF
    .
2100-PROCESS-UPDATE.
    * Use latest real-time price for position update
    MOVE PRICE-FEED-BUFFER TO POSITION-PRICE
    PERFORM UTLVAL00-RECALC
    .
2200-APPLY-UPDATE.
    * Commit updates and log audit event
    PERFORM AUDIT-ENTRY THRU AUDIT-ENTRY-EXIT
    IF PRICE-FEED-BUFFER-IS-STALE
        PERFORM LOG-ERROR THRU LOG-ERROR-EXIT
    END-IF
    .
```

---

#### **src/programs/utility/UTLVAL00.cbl**

**Before:**  
```cobol
2000-PROCESS.
    PERFORM 2100-VALIDATE-POSITION
    PERFORM 2200-RECALC-VALUATION
    .
2100-VALIDATE-POSITION.
    * Validate position data
    IF POSITION-PRICE > 0
        CONTINUE
    ELSE
        PERFORM LOG-ERROR
    END-IF
    .
2200-RECALC-VALUATION.
    * Recalculate valuation
    COMPUTE POSITION-VALUE = POSITION-PRICE * POSITION-QUANTITY
    .
```

**After:**  
```cobol
2000-PROCESS.
    * Accept real-time price as input
    PERFORM 2100-VALIDATE-POSITION
    PERFORM 2200-RECALC-VALUATION
    .
2100-VALIDATE-POSITION.
    * Validate position with latest real-time price
    IF POSITION-PRICE > 0 AND NOT PRICE-FEED-BUFFER-IS-STALE
        CONTINUE
    ELSE
        PERFORM LOG-ERROR
    END-IF
    .
2200-RECALC-VALUATION.
    * Recalculate valuation using real-time price
    COMPUTE POSITION-VALUE = POSITION-PRICE * POSITION-QUANTITY
    * Store price in historical record
    PERFORM STORE-HISTORICAL-PRICE
    .
STORE-HISTORICAL-PRICE.
    MOVE POSITION-PRICE TO HISTORICAL-PRICE-RECORD
    .
```

---

#### **src/copybook/common/AUDITLOG.cpy**

**Before:**  
```cobol
AUDIT-ENTRY.
    * Log audit event
    MOVE 'UPDATE' TO AUDIT-TYPE
    MOVE CURRENT-DATE TO AUDIT-DATE
    .
LOG-ERROR.
    * Log error event
    MOVE ERROR-CODE TO AUDIT-ERROR
    .
```

**After:**  
```cobol
AUDIT-ENTRY.
    * Log audit event for real-time feed
    MOVE 'UPDATE' TO AUDIT-TYPE
    MOVE CURRENT-DATE TO AUDIT-DATE
    IF PRICE-FEED-BUFFER-IS-STALE
        MOVE 'STALE-PRICE' TO AUDIT-DETAIL
    ELSE
        MOVE 'REALTIME-PRICE' TO AUDIT-DETAIL
    END-IF
    .
LOG-ERROR.
    * Log error event for feed failure or stale price
    MOVE ERROR-CODE TO AUDIT-ERROR
    IF FEED-STATUS NOT = 'OK'
        MOVE 'FEED-FAILURE' TO AUDIT-DETAIL
    END-IF
    .
```

---

#### **src/copybook/common/POSREC.cpy**

**Before:**  
```cobol
POSITION-RECORD.
    05 POSITION-ID         PIC X(10).
    05 POSITION-PRICE      PIC 9(9)V99.
    05 POSITION-QUANTITY   PIC 9(9).
    .
HISTORICAL-PRICE-RECORD.
    05 HIST-PRICE-DATE     PIC 9(8).
    05 HIST-PRICE-VALUE    PIC 9(9)V99.
    .
```

**After:**  
```cobol
POSITION-RECORD.
    05 POSITION-ID         PIC X(10).
    05 POSITION-PRICE      PIC 9(9)V99.
    05 POSITION-QUANTITY   PIC 9(9).
    05 LAST-PRICE-FEED-TIMESTAMP PIC 9(14).
    .
HISTORICAL-PRICE-RECORD.
    05 HIST-PRICE-DATE     PIC 9(8).
    05 HIST-PRICE-VALUE    PIC 9(9)V99.
    05 HIST-PRICE-SOURCE   PIC X(20).
    05 HIST-PRICE-INGEST-TIME PIC 9(14).
    .
```

## 4. Conclusion  
The proposed changes enable seamless integration of real-time market price feeds into the legacy COBOL application, ensuring dynamic portfolio updates, immediate valuation recalculation, robust audit/error handling, and comprehensive historical price tracking. These enhancements modernize the system while preserving its core business logic and maintainability.

## Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the initiative to enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide implementation. The goal is to ensure seamless integration of real-time market data, dynamic portfolio recalculation, robust audit logging, and historical data management, while preserving the integrity and maintainability of the legacy system.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application is structured into modular programs that collectively manage portfolio updates, receive and process market price data, maintain portfolio data structures, and generate audit reports. The main flow involves:

- **Receiving market price data** (batch process)
- **Updating portfolio values** based on received prices
- **Logging/auditing all updates and errors**
- **Maintaining historical and timestamped records** for compliance and traceability

### 2.2 Detailed Logic  

#### 2.2.1 `PORTUPDT.cbl` (Portfolio Update Program)
- **1000-INITIALIZE**: Sets up working storage, initializes variables, and prepares the environment for processing.
- **2000-PROCESS**: Main loop that iterates over portfolio records, fetching current prices and preparing for update.
- **2100-PROCESS-UPDATE**: Applies price updates to portfolio positions, recalculates position values and P/L.
- **2200-APPLY-UPDATE**: Commits the updated values to the database or output files.

#### 2.2.2 `RCVPRC00.cbl` (Batch Price Receiver)
- **1000-INITIALIZE-RECOVERY**: Initializes recovery structures and prepares to receive price data.
- **2000-PROCESS-RECOVERY**: Processes incoming price data, handles batch polling, and manages error recovery.
- **2100-RECOVER-PROCESS**: Applies recovery logic for failed or incomplete price updates.

#### 2.2.3 `PORTFLIO.cpy` (Portfolio Data Structure Copybook)
- Defines the data structures for portfolio records, including fields for security identifiers, quantities, prices, and calculated values.

#### 2.2.4 `RPTAUD00.cbl` (Audit Report Generator)
- **1000-INITIALIZE**: Sets up audit logging structures and opens necessary files.
- **1100-OPEN-FILES**: Opens audit and report files for writing.
- **2000-PROCESS-REPORT**: Processes and writes audit records, including errors and update logs.
- **9999-ERROR-HANDLER**: Handles and logs errors encountered during processing.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    InitPriceFeed["Initialize
Price Feed/Recovery"]
    ReceivePrices["Receive
Market Prices"]
    UpdatePortfolio["Update
Portfolio Values"]
    RecalcPL["Recalculate
Positions & P/L"]
    CommitUpdates["Commit
Updates"]
    AuditLog["Audit
Logging"]
    End(["End"])

    Start --> InitPriceFeed
    InitPriceFeed --> ReceivePrices
    ReceivePrices --> UpdatePortfolio
    UpdatePortfolio --> RecalcPL
    RecalcPL --> CommitUpdates
    CommitUpdates --> AuditLog
    AuditLog --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
- Integrate real-time market price feed into the portfolio update process.
- Dynamically update portfolio positions and valuations as new prices arrive.
- Extend batch price receiver to support real-time polling and robust error handling.
- Enhance portfolio data structures to support timestamping and historical price records.
- Update audit reporting to log feed errors, outdated prices, and maintain historical records.

### 3.2 Proposed Code Changes Summary:
#### 3.2.1 Impacted Sections and Files:
- **src/programs/portfolio/PORTUPDT.cbl**
  - *Purpose of Changes*: Integrate real-time price updates, trigger dynamic recalculation of portfolio positions and P/L, and timestamp updates.
  - *Impact*: Enables immediate portfolio value adjustments, improves accuracy, and supports compliance with real-time reporting requirements.
- **src/programs/batch/RCVPRC00.cbl**
  - *Purpose of Changes*: Support real-time polling of market data feed, enhance error handling for feed interruptions or invalid data.
  - *Impact*: Ensures timely and reliable receipt of market prices, reduces risk of outdated or missing data.
- **src/copybook/common/PORTFLIO.cpy**
  - *Purpose of Changes*: Add fields for price timestamp and historical price tracking.
  - *Impact*: Facilitates auditability and compliance, supports historical analysis and reporting.
- **src/programs/batch/RPTAUD00.cbl**
  - *Purpose of Changes*: Log feed errors, outdated prices, and maintain historical audit records.
  - *Impact*: Improves traceability, supports regulatory compliance, and enhances error diagnostics.

### 3.3 Insertion Points  
- **PORTUPDT.cbl**
  - Insert logic to fetch and apply real-time prices in `2000-PROCESS` and `2100-PROCESS-UPDATE`.
  - Add timestamp handling in `2200-APPLY-UPDATE`.
- **RCVPRC00.cbl**
  - Extend `2000-PROCESS-RECOVERY` to poll real-time feed and handle errors.
- **PORTFLIO.cpy**
  - Add new fields for `PRICE-TIMESTAMP` and `HISTORICAL-PRICE-ARRAY`.
- **RPTAUD00.cbl**
  - Insert audit logging for feed errors and outdated prices in `2000-PROCESS-REPORT` and `9999-ERROR-HANDLER`.

### 3.4 Structured Diffs  

#### src/copybook/common/PORTFLIO.cpy

**Before:**
```cobol
       01  PORTFOLIO-RECORD.
           05  PORTFOLIO-ID         PIC X(10).
           05  SECURITY-ID          PIC X(12).
           05  QUANTITY             PIC 9(9)V99.
           05  LAST-PRICE           PIC 9(9)V99.
           05  POSITION-VALUE       PIC 9(11)V99.
           05  LAST-UPDATE-DATE     PIC 9(8).
```

**After:**
```cobol
       01  PORTFOLIO-RECORD.
           05  PORTFOLIO-ID         PIC X(10).
           05  SECURITY-ID          PIC X(12).
           05  QUANTITY             PIC 9(9)V99.
           05  LAST-PRICE           PIC 9(9)V99.
           05  POSITION-VALUE       PIC 9(11)V99.
           05  LAST-UPDATE-DATE     PIC 9(8).
           05  PRICE-TIMESTAMP      PIC 9(14).      *> YYYYMMDDHHMMSS
           05  HISTORICAL-PRICE-ARRAY OCCURS 10 TIMES.
               10  HIST-PRICE       PIC 9(9)V99.
               10  HIST-TIMESTAMP   PIC 9(14).
```

---

#### src/programs/portfolio/PORTUPDT.cbl

**Before (Excerpt from 2000-PROCESS and 2100-PROCESS-UPDATE):**
```cobol
2000-PROCESS.
    PERFORM UNTIL END-OF-PORTFOLIO
        READ PORTFOLIO-FILE INTO PORTFOLIO-RECORD
            AT END
                SET END-OF-PORTFOLIO TO TRUE
            NOT AT END
                PERFORM 2100-PROCESS-UPDATE
        END-READ
    END-PERFORM.

2100-PROCESS-UPDATE.
    COMPUTE POSITION-VALUE = QUANTITY * LAST-PRICE.
    PERFORM 2200-APPLY-UPDATE.
```

**After:**
```cobol
2000-PROCESS.
    PERFORM UNTIL END-OF-PORTFOLIO
        READ PORTFOLIO-FILE INTO PORTFOLIO-RECORD
            AT END
                SET END-OF-PORTFOLIO TO TRUE
            NOT AT END
                *> Fetch real-time price and timestamp
                CALL 'FETCH-REALTIME-PRICE' USING SECURITY-ID
                                             RETURNING LAST-PRICE, PRICE-TIMESTAMP
                *> Store historical price
                PERFORM VARYING IDX FROM 10 BY -1 UNTIL IDX = 2
                    MOVE HIST-PRICE(IDX - 1) TO HIST-PRICE(IDX)
                    MOVE HIST-TIMESTAMP(IDX - 1) TO HIST-TIMESTAMP(IDX)
                END-PERFORM
                MOVE LAST-PRICE TO HIST-PRICE(1)
                MOVE PRICE-TIMESTAMP TO HIST-TIMESTAMP(1)
                PERFORM 2100-PROCESS-UPDATE
        END-READ
    END-PERFORM.

2100-PROCESS-UPDATE.
    COMPUTE POSITION-VALUE = QUANTITY * LAST-PRICE.
    MOVE PRICE-TIMESTAMP TO LAST-UPDATE-DATE.
    PERFORM 2200-APPLY-UPDATE.
```

---

#### src/programs/batch/RCVPRC00.cbl

**Before (Excerpt from 2000-PROCESS-RECOVERY):**
```cobol
2000-PROCESS-RECOVERY.
    PERFORM UNTIL END-OF-PRICE-DATA
        READ PRICE-FILE INTO PRICE-RECORD
            AT END
                SET END-OF-PRICE-DATA TO TRUE
            NOT AT END
                PERFORM 2100-RECOVER-PROCESS
        END-READ
    END-PERFORM.
```

**After:**
```cobol
2000-PROCESS-RECOVERY.
    PERFORM UNTIL END-OF-PRICE-DATA
        *> Poll real-time market data feed
        CALL 'POLL-REALTIME-FEED' RETURNING PRICE-RECORD, FEED-STATUS
        IF FEED-STATUS = 'OK'
            PERFORM 2100-RECOVER-PROCESS
        ELSE
            *> Log feed error for audit
            CALL 'LOG-AUDIT-ERROR' USING FEED-STATUS, CURRENT-DATE
        END-IF
    END-PERFORM.
```

---

#### src/programs/batch/RPTAUD00.cbl

**Before (Excerpt from 2000-PROCESS-REPORT and 9999-ERROR-HANDLER):**
```cobol
2000-PROCESS-REPORT.
    PERFORM UNTIL END-OF-AUDIT
        READ AUDIT-FILE INTO AUDIT-RECORD
            AT END
                SET END-OF-AUDIT TO TRUE
            NOT AT END
                DISPLAY AUDIT-RECORD
        END-READ
    END-PERFORM.

9999-ERROR-HANDLER.
    DISPLAY 'ERROR OCCURRED: ' ERROR-MESSAGE.
```

**After:**
```cobol
2000-PROCESS-REPORT.
    PERFORM UNTIL END-OF-AUDIT
        READ AUDIT-FILE INTO AUDIT-RECORD
            AT END
                SET END-OF-AUDIT TO TRUE
            NOT AT END
                DISPLAY AUDIT-RECORD
                *> Log outdated price or feed error if present
                IF AUDIT-RECORD-ERROR-CODE = 'FEEDERR' OR 'OUTDATED'
                    WRITE ERROR-LOG-RECORD FROM AUDIT-RECORD
                END-IF
        END-READ
    END-PERFORM.

9999-ERROR-HANDLER.
    DISPLAY 'ERROR OCCURRED: ' ERROR-MESSAGE.
    *> Write error to audit log for compliance
    WRITE ERROR-LOG-RECORD FROM ERROR-MESSAGE.
```

## 4. Conclusion  
The proposed changes enable seamless integration of real-time market price feeds into the legacy COBOL portfolio management system. By updating the portfolio update logic, batch price receiver, data structures, and audit reporting, the system will support dynamic, accurate, and auditable portfolio valuations. These enhancements ensure compliance, improve operational efficiency, and lay the groundwork for future modernization efforts.

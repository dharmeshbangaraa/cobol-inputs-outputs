# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application suite responsible for transaction and position processing. The focus is on the implementation of a new `CHANNEL-CODE` field (PIC X(04)) in all transaction files and associated processing/reporting as per the user story and analysis report. The document details the current logic, the rationale and scope of the changes, and provides structured diffs and guidance for seamless integration.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes business-critical financial transaction and position data. It is structured into modular programs and copybooks, with clear separation of initialization, main processing, and termination logic. Core data structures are defined in copybooks (`TRNREC.cpy` for transactions, `POSREC.cpy` for positions), and are referenced by all batch, utility, and reporting programs. The main impacted programs are:

- **RPTPOS00.cbl**: Generates daily position and transaction activity reports.
- **UTLVAL00.cbl**: Performs data validation and integrity checks on transaction and position files.
- **TSTGEN00.cbl**: Generates test transaction files.
- **TSTVAL00.cbl**: Validates test data.
- **RPTAUD00.cbl**: Generates audit trail reports.
- **BCHCTL00.cbl**: Handles batch control and may reference transaction structures.
- **JCL**: Controls batch/report jobs and LRECL for transaction files.

### 2.2 Detailed Logic  

#### 2.2.1 Copybooks

- **TRNREC.cpy**  
  Defines the transaction record structure, including keys, transaction data (type, quantity, price, amount, currency, status), audit fields, and a filler.  
  *Key fields:*
  - `TRN-DATE`, `TRN-TIME`, `TRN-PORTFOLIO-ID`, `TRN-SEQUENCE-NO`
  - `TRN-INVESTMENT-ID`, `TRN-TYPE`, `TRN-QUANTITY`, `TRN-PRICE`, `TRN-AMOUNT`, `TRN-CURRENCY`, `TRN-STATUS`
  - `TRN-PROCESS-DATE`, `TRN-PROCESS-USER`
  - `TRN-FILLER` (50 bytes for expansion)

- **POSREC.cpy**  
  Defines the position record structure, including keys, position data (quantity, cost, value, currency, status), audit fields, and a filler.

#### 2.2.2 Main Programs

- **RPTPOS00.cbl**  
  - *Initialization*: Opens position master, transaction history, and report file (1100-OPEN-FILES).
  - *Processing*: Reads position records, formats and writes them to the report, processes transaction activity (2100-READ-POSITIONS, 2200-PROCESS-TRANSACTIONS).
  - *Termination*: Closes files and handles errors (3000-CLEANUP, 9999-ERROR-HANDLER).

- **UTLVAL00.cbl**  
  - *Initialization*: Opens validation control, position master, transaction history, and error report files (1100-OPEN-FILES).
  - *Processing*: Iterates over validation control records and performs integrity, cross-reference, format, and balance checks (2000-PROCESS, 2100-PROCESS-VALIDATION).
  - *Termination*: Closes files and writes summary/error information.

- **TSTGEN00.cbl**  
  - *Initialization*: Prepares test data generation.
  - *Processing*: Generates transaction records according to test scenarios.
  - *Termination*: Closes files and finalizes test data.

- **TSTVAL00.cbl**  
  - *Initialization*: Opens test data files.
  - *Processing*: Validates structure and content of test transaction records.
  - *Termination*: Reports validation results.

- **RPTAUD00.cbl**  
  - *Initialization*: Opens audit log and related files.
  - *Processing*: Reads and processes audit trail records, may reference transaction details.
  - *Termination*: Closes files and outputs results.

- **BCHCTL00.cbl**  
  - *Initialization*: Handles batch control initialization.
  - *Processing*: May reference transaction structure for control totals.
  - *Termination*: Finalizes batch processing.

#### Flowchart:  
```
flowchart TD
    Start(["Start"])
    Init["Initialization:
Open Files,
Set Up Data
Structures"]
    MainProc["Main Processing:
Read/Write
Transaction and
Position Records"]
    Validation["Validation:
Check Data
Integrity,
Format, XREF"]
    Reporting["Reporting:
Generate
Reports,
Summaries"]
    Audit["Audit:
Process
Audit Trails"]
    Cleanup["Termination:
Close Files,
Write Logs"]
    End(["End"])

    Start --> Init
    Init --> MainProc
    MainProc --> Validation
    Validation --> Reporting
    Reporting --> Audit
    Audit --> Cleanup
    Cleanup --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add a `CHANNEL-CODE` field (PIC X(04)) to all transaction files and related processing/reporting, including copybooks, file layouts, program logic, test data, LRECL/FD/JCL, and documentation, to enable channel identification in batch processing and reporting.

### 3.2 Proposed Code Changes Summary:
#### 3.2.1 Impacted Sections and Files:
- **TRNREC.cpy** (copybook): Add `CHANNEL-CODE` field to transaction record structure.
- **POSREC.cpy** (copybook): Add `CHANNEL-CODE` field if positions are channel-specific.
- **RPTPOS00.cbl**: Update to process and report on `CHANNEL-CODE`.
- **UTLVAL00.cbl**: Update validation logic to include `CHANNEL-CODE`.
- **TSTGEN00.cbl**: Generate test data with `CHANNEL-CODE`.
- **TSTVAL00.cbl**: Validate presence and correctness of `CHANNEL-CODE`.
- **RPTAUD00.cbl**: Include `CHANNEL-CODE` in audit reporting if applicable.
- **BCHCTL00.cbl**: Update references to transaction structure if needed.
- **JCL (Batch/Report jobs)**: Update LRECL and DD statements for new record length.

- **Purpose of Changes:**  
  To enable identification and tracking of the channel (e.g., online, branch, mobile) through which each transaction was processed, supporting enhanced reporting, auditing, and operational analytics.

- **Impact:**  
  - All programs that read, write, or validate transaction records must be updated to handle the new field.
  - Test data and validation routines must be updated.
  - JCL and file definitions must be revised for new record length.
  - Downstream reporting and audit logic may need to display or process the new field.
  - Regression testing is required across all impacted modules.

### 3.3 Insertion Points  
- **TRNREC.cpy**: Insert `CHANNEL-CODE` field after transaction key or at the end of the TRN-DATA group.
- **POSREC.cpy**: Insert if required for position records.
- **RPTPOS00.cbl**: Update `COPY TRNREC.` usage, add logic in `2200-PROCESS-TRANSACTIONS` to read and report `CHANNEL-CODE`.
- **UTLVAL00.cbl**: Update format and integrity checks in `2420-CHECK-TRANSACTION-FORMAT` to include `CHANNEL-CODE`.
- **TSTGEN00.cbl**: In `2300-GEN-TRANSACTION` and `2320-WRITE-TRAN-RECORD`, populate `CHANNEL-CODE`.
- **TSTVAL00.cbl**: In `2000-PROCESS`, validate `CHANNEL-CODE`.
- **RPTAUD00.cbl**: In `2100-PROCESS-AUDIT-TRAIL`, include `CHANNEL-CODE` if referenced.
- **BCHCTL00.cbl**: In `1000-PROCESS-INITIALIZE`, update references if transaction structure is used.
- **JCL**: Update DD statements and LRECL for all transaction file definitions.

### 3.4 Structured Diffs  

#### **TRNREC.cpy**
**Before:**
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-KEY.
               10  TRN-DATE           PIC X(08).
               10  TRN-TIME           PIC X(06).
               10  TRN-PORTFOLIO-ID   PIC X(08).
               10  TRN-SEQUENCE-NO    PIC X(06).
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
               ...
           05  TRN-AUDIT.
               10  TRN-PROCESS-DATE  PIC X(26).
               10  TRN-PROCESS-USER  PIC X(08).
           05  TRN-FILLER           PIC X(50).
```
**After:**
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-KEY.
               10  TRN-DATE           PIC X(08).
               10  TRN-TIME           PIC X(06).
               10  TRN-PORTFOLIO-ID   PIC X(08).
               10  TRN-SEQUENCE-NO    PIC X(06).
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
               ...
               10  CHANNEL-CODE       PIC X(04).
           05  TRN-AUDIT.
               10  TRN-PROCESS-DATE  PIC X(26).
               10  TRN-PROCESS-USER  PIC X(08).
           05  TRN-FILLER           PIC X(46).  *> Reduced by 4 bytes
```

#### **RPTPOS00.cbl**
**Before (snippet from 2200-PROCESS-TRANSACTIONS):**
```cobol
       2200-PROCESS-TRANSACTIONS.
           PERFORM 2210-READ-TRANSACTIONS
           PERFORM 2220-SUMMARIZE-ACTIVITY.
```
**After:**
```cobol
       2200-PROCESS-TRANSACTIONS.
           PERFORM 2210-READ-TRANSACTIONS
           PERFORM 2220-SUMMARIZE-ACTIVITY
           PERFORM 2230-REPORT-CHANNEL-CODE.

       2230-REPORT-CHANNEL-CODE.
           IF CHANNEL-CODE NOT = SPACES
               DISPLAY "CHANNEL-CODE: " CHANNEL-CODE
               WRITE REPORT-RECORD FROM CHANNEL-CODE
           END-IF.
```

#### **UTLVAL00.cbl**
**Before (snippet from 2420-CHECK-TRANSACTION-FORMAT):**
```cobol
       2420-CHECK-TRANSACTION-FORMAT.
           IF TRN-TYPE NOT = 'BU' AND
              TRN-TYPE NOT = 'SL' AND
              TRN-TYPE NOT = 'TR' AND
              TRN-TYPE NOT = 'FE'
               MOVE 'INVALID TRANSACTION TYPE' TO WS-ERR-DESC
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```
**After:**
```cobol
       2420-CHECK-TRANSACTION-FORMAT.
           IF TRN-TYPE NOT = 'BU' AND
              TRN-TYPE NOT = 'SL' AND
              TRN-TYPE NOT = 'TR' AND
              TRN-TYPE NOT = 'FE'
               MOVE 'INVALID TRANSACTION TYPE' TO WS-ERR-DESC
               PERFORM 9999-ERROR-HANDLER
           END-IF

           IF CHANNEL-CODE = SPACES OR CHANNEL-CODE = LOW-VALUES
               MOVE 'MISSING CHANNEL-CODE' TO WS-ERR-DESC
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```

#### **TSTGEN00.cbl**
**Before (snippet from 2300-GEN-TRANSACTION):**
```cobol
       2300-GEN-TRANSACTION.
           MOVE ... TO TRN-INVESTMENT-ID
           MOVE ... TO TRN-TYPE
           ...
```
**After:**
```cobol
       2300-GEN-TRANSACTION.
           MOVE ... TO TRN-INVESTMENT-ID
           MOVE ... TO TRN-TYPE
           ...
           MOVE 'ONLN' TO CHANNEL-CODE  *> Example: Online channel
```

#### **JCL**
**Before:**
```jcl
//TRANFILE DD DSN=...,
//            DISP=SHR,
//            LRECL=150
```
**After:**
```jcl
//TRANFILE DD DSN=...,
//            DISP=SHR,
//            LRECL=154
```

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to transaction files and all associated processing ensures that the system can accurately track and report the channel of origin for each transaction. This change impacts all core data structures, batch and reporting programs, test data, validation routines, and JCL. The provided structured diffs and insertion points enable efficient and accurate implementation, minimize risk, and ensure maintainability of the legacy COBOL application. All impacted modules must be regression tested, and documentation updated accordingly.

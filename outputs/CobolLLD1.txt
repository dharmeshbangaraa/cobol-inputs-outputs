# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the initiative to enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide seamless integration, ensuring maintainability and clarity for developers, testers, and architects.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The COBOL application suite manages portfolio records, processes batch and real-time updates, handles error recovery, and maintains audit trails. The primary modules and their responsibilities are:

- **PORTUPDT.cbl**: Updates portfolio records based on incoming update files.
- **RCVPRC00.cbl**: Handles batch ingestion and recovery of process sequences.
- **PORTFLIO.cpy**: Defines the portfolio master record structure.
- **AUDITLOG.cpy**: Defines the audit trail record structure.
- **RPTAUD00.cbl**: Generates audit reports from audit and error logs.

### 2.2 Detailed Logic  

#### 2.2.1 `PORTUPDT.cbl` (Portfolio Update Program)
- **Initialization (`1000-INITIALIZE`, ~line 61):**
  - Initializes working storage.
  - Opens the portfolio and update files.
  - Checks file status and handles errors.
- **Processing (`2000-PROCESS`, ~line 73):**
  - Reads each update record.
  - For each, invokes `2100-PROCESS-UPDATE`.
- **Update Logic (`2100-PROCESS-UPDATE`, ~line 80):**
  - Locates the portfolio record by key.
  - If found, applies the update via `2200-APPLY-UPDATE`.
- **Apply Update (`2200-APPLY-UPDATE`, ~line 89):**
  - Updates status, client name, or value based on the update type.
  - Rewrites the portfolio record and updates counters.
- **Termination (`3000-TERMINATE`, ~line 104):**
  - Closes files and displays summary statistics.

#### 2.2.2 `RCVPRC00.cbl` (Process Recovery Handler)
- **Main Entry (`0000-MAIN`, ~line 54):**
  - Dispatches to initialization, processing, or termination based on function code.
- **Initialization (`1000-INITIALIZE-RECOVERY`, ~line 65):**
  - Opens files, validates requests, and sets recovery mode.
- **Processing (`2000-PROCESS-RECOVERY`, ~line 70):**
  - Executes recovery logic for process, sequence, or all.
- **Process Recovery (`2100-RECOVER-PROCESS`, ~line 114):**
  - Reads control and sequence files, determines action, and executes recovery.
- **Error Handling (`9000-ERROR-ROUTINE`, ~line 81):**
  - Logs and reports errors.

#### 2.2.3 `PORTFLIO.cpy` (Portfolio Master Record)
- Defines the structure for portfolio records, including keys, client info, portfolio info, financial info, audit info, and filler.

#### 2.2.4 `AUDITLOG.cpy` (Audit Trail Record)
- Defines the structure for audit records, including header, type, action, status, key info, before/after images, and message.

#### 2.2.5 `RPTAUD00.cbl` (Audit Report Generator)
- **Initialization (`1000-INITIALIZE`, ~line 46):**
  - Opens audit, error, and report files.
  - Writes report headers.
- **Processing (`2000-PROCESS-REPORT`, ~line 67):**
  - Processes audit trail and error log, writes summaries.
- **Cleanup (`3000-CLEANUP`, ~line 81):**
  - Closes all files.
- **Error Handling (`9999-ERROR-HANDLER`, ~line 85):**
  - Displays error messages and sets return code.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE
(Open files, init WS)"]
    Process["2000-PROCESS
(Read update records)"]
    ProcessUpdate["2100-PROCESS-UPDATE
(Locate portfolio record)"]
    ApplyUpdate["2200-APPLY-UPDATE
(Update fields, rewrite)"]
    Terminate["3000-TERMINATE
(Close files, display stats)"]
    End(["End"])

    Start --> Init
    Init --> Process
    Process -->|For each record| ProcessUpdate
    ProcessUpdate -->|If found| ApplyUpdate
    ApplyUpdate --> Process
    Process -->|EOF| Terminate
    Terminate --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
- Integrate real-time price feed ingestion.
- Update portfolio valuations dynamically.
- Enhance error handling and audit logging for price feed events.
- Extend data structures to support price history and timestamps.
- Ensure audit reports reflect new events.

---

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File Path                              | Sections/Paragraphs Impacted                                  |
|----------------------------------------|--------------------------------------------------------------|
| src/programs/portfolio/PORTUPDT.cbl    | 1000-INITIALIZE, 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE |
| src/programs/batch/RCVPRC00.cbl        | 1000-INITIALIZE-RECOVERY, 2000-PROCESS-RECOVERY, 2100-RECOVER-PROCESS |
| src/copybook/common/PORTFLIO.cpy       | PORTFOLIO-RECORD                                             |
| src/copybook/common/AUDITLOG.cpy       | AUDIT-ENTRY, LOGGING-SECTIONS                                |
| src/programs/batch/RPTAUD00.cbl        | 1000-INITIALIZE, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER     |

- **Purpose of Changes:**  
  - To enable real-time price feed integration, dynamic valuation, and comprehensive audit logging.
- **Impact:**  
  - The system will support real-time updates, maintain price history, improve error/audit tracking, and provide richer audit reports.

---

### 3.3 Insertion Points  

- **PORTUPDT.cbl**
  - *1000-INITIALIZE*: Add initialization for real-time feed handler.
  - *2000-PROCESS*: Integrate polling/receiving real-time price feed.
  - *2100-PROCESS-UPDATE*: Enhance to process real-time price updates.
  - *2200-APPLY-UPDATE*: Update logic to recalculate valuations and store price history.

- **RCVPRC00.cbl**
  - *1000-INITIALIZE-RECOVERY*: Initialize real-time feed recovery.
  - *2000-PROCESS-RECOVERY*: Add logic for real-time feed error handling.
  - *2100-RECOVER-PROCESS*: Extend to recover from real-time feed failures.

- **PORTFLIO.cpy**
  - *PORTFOLIO-RECORD*: Add fields for price history and last price update timestamp.

- **AUDITLOG.cpy**
  - *AUDIT-ENTRY, LOGGING-SECTIONS*: Add fields/types for price feed events and errors.

- **RPTAUD00.cbl**
  - *1000-INITIALIZE, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER*: Update to process/report new audit types.

---

### 3.4 Structured Diffs  

#### 3.4.1 `src/copybook/common/PORTFLIO.cpy`

**Before:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(50). 
```

**After:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
               10  PORT-LAST-PRICE     PIC S9(13)V99 COMP-3.
               10  PORT-LAST-PRICE-TS  PIC 9(14).  *> YYYYMMDDHHMMSS
               10  PORT-PRICE-HISTORY.
                   15  PORT-PRICE-ENTRY OCCURS 10 TIMES.
                       20  PORT-PRICE-VALUE   PIC S9(13)V99 COMP-3.
                       20  PORT-PRICE-TS      PIC 9(14).
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(20). 
```

---

#### 3.4.2 `src/copybook/common/AUDITLOG.cpy`

**Before:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
           05  AUD-BEFORE-IMAGE     PIC X(100).
           05  AUD-AFTER-IMAGE      PIC X(100).
           05  AUD-MESSAGE          PIC X(100).
```

**After:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
               88  AUD-PRICE-FEED      VALUE 'PRCF'.
               88  AUD-PRICE-ERROR     VALUE 'PRCE'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
               88  AUD-PRICE-INGEST   VALUE 'PRCINGST'.
               88  AUD-PRICE-FAIL     VALUE 'PRCFAIL '.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
               10  AUD-PRICE-TS      PIC 9(14).
           05  AUD-BEFORE-IMAGE     PIC X(100).
           05  AUD-AFTER-IMAGE      PIC X(100).
           05  AUD-MESSAGE          PIC X(100).
```

---

#### 3.4.3 `src/programs/portfolio/PORTUPDT.cbl`

**Before (excerpt from 1000-INITIALIZE and 2000-PROCESS):**
```cobol
       1000-INITIALIZE.
           INITIALIZE WS-WORK-AREAS
           
           OPEN I-O   PORTFOLIO-FILE
           OPEN INPUT UPDATE-FILE
           
           IF NOT WS-SUCCESS-STATUS OR 
              NOT WS-UPDT-SUCCESS
              DISPLAY 'Error opening files: ' 
                      'PORT=' WS-FILE-STATUS
                      'UPDT=' WS-UPDT-STATUS
              MOVE WS-ERROR TO WS-RETURN-CODE
              PERFORM 3000-TERMINATE
           END-IF
           .
           
       2000-PROCESS.
           READ UPDATE-FILE
               AT END
                   SET END-OF-FILE TO TRUE
               NOT AT END
                   PERFORM 2100-PROCESS-UPDATE
           END-READ
           .
```

**After:**
```cobol
       1000-INITIALIZE.
           INITIALIZE WS-WORK-AREAS
           
           OPEN I-O   PORTFOLIO-FILE
           OPEN INPUT UPDATE-FILE
           
           *> Initialize real-time price feed handler
           CALL 'PRCFINIT' USING WS-RETURN-CODE
           
           IF NOT WS-SUCCESS-STATUS OR 
              NOT WS-UPDT-SUCCESS
              DISPLAY 'Error opening files: ' 
                      'PORT=' WS-FILE-STATUS
                      'UPDT=' WS-UPDT-STATUS
              MOVE WS-ERROR TO WS-RETURN-CODE
              PERFORM 3000-TERMINATE
           END-IF
           .
           
       2000-PROCESS.
           PERFORM UNTIL END-OF-FILE
               *> Poll or receive real-time price feed
               CALL 'PRCFPOLL' USING WS-RETURN-CODE
               IF WS-RETURN-CODE = 0
                   PERFORM 2100-PROCESS-UPDATE
               END-IF
               READ UPDATE-FILE
                   AT END
                       SET END-OF-FILE TO TRUE
                   NOT AT END
                       PERFORM 2100-PROCESS-UPDATE
               END-READ
           END-PERFORM
           .
```

**Before (excerpt from 2200-APPLY-UPDATE):**
```cobol
       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
           END-EVALUATE
           
           REWRITE PORT-RECORD
           
           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
           END-IF
           .
```

**After:**
```cobol
       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
               WHEN OTHER
                   *> Handle real-time price update
                   MOVE UPDT-NEW-VALUE TO PORT-LAST-PRICE
                   ACCEPT PORT-LAST-PRICE-TS FROM TIME
                   PERFORM VARYING IDX FROM 10 BY -1 UNTIL IDX < 2
                       MOVE PORT-PRICE-ENTRY(IDX - 1) TO PORT-PRICE-ENTRY(IDX)
                   END-PERFORM
                   MOVE PORT-LAST-PRICE TO PORT-PRICE-ENTRY(1)
                   MOVE PORT-LAST-PRICE-TS TO PORT-PRICE-TS(1)
           END-EVALUATE
           
           REWRITE PORT-RECORD
           
           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
               *> Log price feed event
               CALL 'AUDITLOG' USING 'PRCF' 'PRCINGST' PORT-KEY PORT-LAST-PRICE PORT-LAST-PRICE-TS
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
               *> Log price feed error
               CALL 'AUDITLOG' USING 'PRCE' 'PRCFAIL ' PORT-KEY WS-RETURN-CODE
           END-IF
           .
```

---

#### 3.4.4 `src/programs/batch/RCVPRC00.cbl`

**Before (excerpt from 1000-INITIALIZE-RECOVERY and 2000-PROCESS-RECOVERY):**
```cobol
       1000-INITIALIZE-RECOVERY.
           PERFORM 1100-OPEN-FILES
           PERFORM 1200-VALIDATE-REQUEST
           PERFORM 1300-SET-RECOVERY-MODE
           .
           
       2000-PROCESS-RECOVERY.
           EVALUATE WS-RECOVERY-MODE
               WHEN 'P'
                   PERFORM 2100-RECOVER-PROCESS
               WHEN 'S'
                   PERFORM 2200-RECOVER-SEQUENCE
               WHEN 'A'
                   PERFORM 2300-RECOVER-ALL
           END-EVALUATE
           .
```

**After:**
```cobol
       1000-INITIALIZE-RECOVERY.
           PERFORM 1100-OPEN-FILES
           PERFORM 1200-VALIDATE-REQUEST
           PERFORM 1300-SET-RECOVERY-MODE
           *> Initialize real-time price feed recovery
           CALL 'PRCFRECOV' USING WS-RETURN-CODE
           .
           
       2000-PROCESS-RECOVERY.
           *> Add logic for real-time price feed error handling
           CALL 'PRCFERRHDL' USING WS-RETURN-CODE
           EVALUATE WS-RECOVERY-MODE
               WHEN 'P'
                   PERFORM 2100-RECOVER-PROCESS
               WHEN 'S'
                   PERFORM 2200-RECOVER-SEQUENCE
               WHEN 'A'
                   PERFORM 2300-RECOVER-ALL
           END-EVALUATE
           .
```

**Before (excerpt from 2100-RECOVER-PROCESS):**
```cobol
       2100-RECOVER-PROCESS.
           MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
           MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE
           
           READ BATCH-CONTROL-FILE
               INVALID KEY
                   MOVE 'Process record not found' TO ERR-TEXT
                   PERFORM 9000-ERROR-ROUTINE
           END-READ
           
           PERFORM 2110-DETERMINE-ACTION
           PERFORM 2120-EXECUTE-RECOVERY
           .
```

**After:**
```cobol
       2100-RECOVER-PROCESS.
           MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
           MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE
           
           READ BATCH-CONTROL-FILE
               INVALID KEY
                   MOVE 'Process record not found' TO ERR-TEXT
                   PERFORM 9000-ERROR-ROUTINE
           END-READ
           
           *> Recover from real-time price feed failures if any
           CALL 'PRCFRECOV' USING BCT-JOB-NAME WS-RETURN-CODE
           
           PERFORM 2110-DETERMINE-ACTION
           PERFORM 2120-EXECUTE-RECOVERY
           .
```

---

#### 3.4.5 `src/programs/batch/RPTAUD00.cbl`

**Before (excerpt from 2000-PROCESS-REPORT):**
```cobol
       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2300-WRITE-SUMMARY.
```

**After:**
```cobol
       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2150-PROCESS-PRICE-FEED-EVENTS
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2300-WRITE-SUMMARY.
```

**New Section:**
```cobol
       2150-PROCESS-PRICE-FEED-EVENTS.
           *> Read and summarize price feed and error events from audit log
           PERFORM UNTIL WS-AUDIT-STATUS = '10'
               READ AUDIT-FILE NEXT RECORD
                   AT END
                       MOVE '10' TO WS-AUDIT-STATUS
                   NOT AT END
                       IF AUD-TYPE = 'PRCF' OR AUD-TYPE = 'PRCE'
                           *> Summarize or report price feed event
                           WRITE REPORT-RECORD FROM AUD-MESSAGE
                       END-IF
               END-READ
           END-PERFORM
           .
```

---

## 4. Conclusion  
The proposed changes enable the COBOL legacy application to support real-time market price feed integration, dynamic portfolio valuation, and robust audit/error tracking. Data structures are extended for price history and timestamps, and all impacted modules are updated to process, log, and report new event types. These enhancements ensure the system remains reliable, auditable, and responsive to modern business requirements.


# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically to add a `CHANNEL-CODE` field to the transaction file and all related processing/reporting modules. The goal is to enable channel-based analytics, auditing, and fraud detection by capturing the source of each transaction (e.g., ATM, Mobile, Branch) throughout batch processing and reporting.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes business-critical transaction data in a modular, batch-oriented architecture. The core flow involves reading transaction records, performing validations, updating positions, generating reports, and writing outputs. The transaction record structure is defined centrally in a copybook and is referenced by all programs that read or write transaction data.

### 2.2 Detailed Logic  

#### 2.2.1 Transaction Record Structure (TRANSACTION.CPY / TRNREC)
- **File:** `src/copybook/common/TRNREC.cpy`
- **Purpose:** Defines the layout of a transaction record, including keys, data, audit fields, and filler.
- **Key Fields:**  
  - TRN-DATE, TRN-TIME, TRN-PORTFOLIO-ID, TRN-SEQUENCE-NO  
  - TRN-INVESTMENT-ID, TRN-TYPE, TRN-QUANTITY, TRN-PRICE, TRN-AMOUNT, TRN-CURRENCY, TRN-STATUS  
  - TRN-PROCESS-DATE, TRN-PROCESS-USER  
  - TRN-FILLER

#### 2.2.2 Batch and Utility Programs

- **RPTPOS00** (`src/programs/batch/RPTPOS00.cbl`):  
  Generates daily position reports by reading transaction and position files, summarizing activity, and writing formatted reports.

- **UTLVAL00** (`src/programs/utility/UTLVAL00.cbl`):  
  Performs data validation on transaction and position files, checking integrity, cross-references, formats, and balances.

- **TSTGEN00** (`src/programs/test/TSTGEN00.cbl`):  
  Generates test transaction data for use in validation and reporting.

- **TSTVAL00** (`src/programs/test/TSTVAL00.cbl`):  
  Executes test scenarios using generated transaction data.

- **RPTAUD00** (`src/programs/batch/RPTAUD00.cbl`):  
  Produces audit trail reports, potentially including transaction details.

- **POSREC.CPY** (`src/copybook/common/POSREC.cpy`):  
  Defines the position record structure, sometimes used in conjunction with transaction data.

- **JCL Scripts** (`src/jcl/batch/*.jcl`):  
  Define file layouts, LRECL, and DD statements for batch jobs.

#### 2.2.3 Control and Data Flow

```
flowchart TD
    Start(["Start"])
    Init["Initialization:
Open Files,
Read Copybooks"]
    ReadTrans["Read
Transaction
Records"]
    Validate["Validate
Transaction
Data"]
    Process["Process
Transactions:
Update Positions,
Apply Business
Rules"]
    Report["Generate
Reports/Audit"]
    WriteOut["Write
Output Files"]
    End(["End"])

    Start --> Init
    Init --> ReadTrans
    ReadTrans --> Validate
    Validate --> Process
    Process --> Report
    Report --> WriteOut
    WriteOut --> End
```

- **Initialization:**  
  - Open input/output files, read copybooks, set up working storage.
- **Processing:**  
  - Read transaction records, validate data, update positions, generate reports/audits.
- **Termination:**  
  - Close files, handle errors, finalize outputs.

#### 2.2.4 Example: Transaction Processing (RPTPOS00)
- **Initialization:**  
  - `1000-INITIALIZE` (Lines 51–56)
  - `1100-OPEN-FILES` (Lines 57–74)
- **Processing:**  
  - `2000-PROCESS-REPORT` (Lines 81–87)
  - `2200-PROCESS-TRANSACTIONS` (Lines 105–107)
- **Termination:**  
  - `3000-CLEANUP` (Lines 113–116)

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add a `CHANNEL-CODE` field (`PIC X(04)`) to the transaction file and all related copybooks, programs, and reports. This enables the system to capture the source of each transaction (ATM, Mobile, Branch, etc.) for improved analytics, auditing, and fraud detection.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File/Program                | Section(s) Impacted                                  |
|-----------------------------|-----------------------------------------------------|
| `src/copybook/common/TRNREC.cpy` | All (add CHANNEL-CODE to record structure)         |
| `src/programs/batch/RPTPOS00.cbl` | 1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS, report output |
| `src/programs/utility/UTLVAL00.cbl` | 1100-OPEN-FILES, 2100-PROCESS-VALIDATION         |
| `src/programs/test/TSTGEN00.cbl` | 2300-GEN-TRANSACTION, 2320-WRITE-TRAN-RECORD      |
| `src/programs/test/TSTVAL00.cbl` | 1100-OPEN-FILES, 2100-EXECUTE-TEST                |
| `src/programs/batch/RPTAUD00.cbl` | 1100-OPEN-FILES, 2100-PROCESS-AUDIT-TRAIL         |
| `src/copybook/common/POSREC.cpy` | All (align with transaction record if needed)      |
| `src/jcl/batch/*.jcl`       | LRECL, DD statements for transaction files           |

- **Purpose of Changes:**  
  To capture and process the transaction channel for every transaction, enabling downstream analytics and reporting.
- **Impact:**  
  - All transaction-handling programs must be updated to read, write, and process the new field.
  - File layouts and LRECL must be adjusted.
  - Test data and reports must include the new field.
  - Documentation and data dictionary must be updated.

### 3.3 Insertion Points  

- **TRANSACTION.CPY / TRNREC:**  
  - Insert `CHANNEL-CODE` after `TRN-STATUS` in the transaction record structure.
- **All Programs Reading/Writing Transactions:**  
  - Update FD and record layouts to include `CHANNEL-CODE`.
  - Update logic to read/write/populate `CHANNEL-CODE`.
  - Update report and audit outputs to display `CHANNEL-CODE`.
- **JCL:**  
  - Update LRECL and DD statements to reflect new record length.

**Example Insertion Points:**

- **TRNREC.cpy:**  
  - After `10  TRN-STATUS        PIC X(01).`, insert:  
    `10  CHANNEL-CODE        PIC X(04).`
- **RPTPOS00.cbl:**  
  - In FILE SECTION, ensure `COPY TRNREC` is updated.
  - In report output, add `CHANNEL-CODE` to detail lines.
- **UTLVAL00.cbl:**  
  - In validation logic, add checks for valid `CHANNEL-CODE` values.
- **TSTGEN00.cbl:**  
  - In test data generation, populate `CHANNEL-CODE` with values like `BRCH`, `ATM`, `MOBL`, `NETB`.
- **JCL:**  
  - Increase LRECL by 4 bytes (or as required by field placement).

### 3.4 Structured Diffs  

#### TRANSACTION.CPY / TRNREC

**Before:**
```cobol
           10  TRN-STATUS        PIC X(01).
               88  TRN-STATUS-PEND   VALUE 'P'.
               88  TRN-STATUS-DONE   VALUE 'D'.
               88  TRN-STATUS-FAIL   VALUE 'F'.
               88  TRN-STATUS-REV    VALUE 'R'.
```

**After:**
```cobol
           10  TRN-STATUS        PIC X(01).
               88  TRN-STATUS-PEND   VALUE 'P'.
               88  TRN-STATUS-DONE   VALUE 'D'.
               88  TRN-STATUS-FAIL   VALUE 'F'.
               88  TRN-STATUS-REV    VALUE 'R'.
           10  CHANNEL-CODE        PIC X(04).
```

#### RPTPOS00.cbl (Report Output)

**Before:**
```cobol
       01  WS-POSITION-DETAIL.
           05  WS-POS-PORTFOLIO     PIC X(10).
           ...
           05  WS-POS-CHANGE-PCT    PIC +ZZ9.99.
           05  FILLER               PIC X(40) VALUE SPACES.
```

**After (add CHANNEL-CODE):**
```cobol
       01  WS-POSITION-DETAIL.
           05  WS-POS-PORTFOLIO     PIC X(10).
           ...
           05  WS-POS-CHANGE-PCT    PIC +ZZ9.99.
           05  WS-CHANNEL-CODE      PIC X(04).
           05  FILLER               PIC X(36) VALUE SPACES.
```
*(Adjust FILLER as needed to maintain record length.)*

**In report writing logic:**

**Before:**
```cobol
           MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO
           ...
           WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```

**After:**
```cobol
           MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO
           ...
           MOVE TRN-CHANNEL-CODE   TO WS-CHANNEL-CODE
           WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```

#### UTLVAL00.cbl (Validation)

**Before:**
```cobol
           IF TRN-STATUS NOT = 'P' AND
              TRN-STATUS NOT = 'D' AND
              TRN-STATUS NOT = 'F' AND
              TRN-STATUS NOT = 'R'
               PERFORM ERROR-HANDLING
           END-IF
```

**After:**
```cobol
           IF TRN-STATUS NOT = 'P' AND
              TRN-STATUS NOT = 'D' AND
              TRN-STATUS NOT = 'F' AND
              TRN-STATUS NOT = 'R'
               PERFORM ERROR-HANDLING
           END-IF

           IF CHANNEL-CODE NOT = 'BRCH' AND
              CHANNEL-CODE NOT = 'ATM' AND
              CHANNEL-CODE NOT = 'MOBL' AND
              CHANNEL-CODE NOT = 'NETB'
               PERFORM ERROR-HANDLING
           END-IF
```

#### TSTGEN00.cbl (Test Data Generation)

**Before:**
```cobol
           MOVE 'P' TO TRN-STATUS
```

**After:**
```cobol
           MOVE 'P' TO TRN-STATUS
           MOVE 'ATM' TO CHANNEL-CODE
```

#### JCL (e.g., RPTPOS.jcl)

**Before:**
```jcl
//TRANHIST  DD  DSN=TRANSACTION.FILE,DISP=SHR,LRECL=120,RECFM=FB
```

**After:**
```jcl
//TRANHIST  DD  DSN=TRANSACTION.FILE,DISP=SHR,LRECL=124,RECFM=FB
```
*(Increase LRECL by 4 bytes for the new field.)*

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record and all related programs enables the system to capture, process, and report the source channel for each transaction. This enhancement supports improved analytics, auditing, and fraud detection. All impacted programs, copybooks, and JCL scripts must be updated to handle the new field, with careful attention to record layouts, LRECL, and validation logic. The changes are broad but systematic, and this document provides clear guidance for accurate and efficient implementation.

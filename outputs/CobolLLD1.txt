Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the initiative to enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide seamless integration, ensuring maintainability and auditability.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application is a legacy system responsible for managing portfolio updates, processing batch recoveries, maintaining audit logs, and generating audit reports. The system is modular, with each program handling a specific aspect of the business process:

- **PORTUPDT.cbl**: Updates portfolio records based on incoming update files.
- **RCVPRC00.cbl**: Handles batch process recovery, including error handling and process restarts.
- **AUDITLOG.cpy**: Defines the structure for audit trail records, shared across modules.
- **RPTAUD00.cbl**: Generates audit and error reports from historical logs.

### 2.2 Detailed Logic  

#### 2.2.1 `PORTUPDT.cbl`  
- **Initialization (1000-INITIALIZE, Lines ~60-80):**  
  Opens portfolio and update files, initializes working storage, and checks file status.
- **Main Processing (2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE, Lines ~82-130):**  
  - Reads each update record.
  - Locates the corresponding portfolio record.
  - Applies updates based on the action type (status, name, or value).
  - Handles errors for missing records or failed updates.
- **Termination (3000-TERMINATE, Lines ~132-145):**  
  Closes files and displays summary counts.

#### 2.2.2 `RCVPRC00.cbl`  
- **Initialization (1000-INITIALIZE-RECOVERY, Lines ~60-80):**  
  Opens files, validates requests, and sets recovery mode.
- **Main Processing (2000-PROCESS-RECOVERY, 2100-RECOVER-PROCESS, Lines ~82-140):**  
  - Determines recovery mode (process, sequence, all).
  - For each process, determines action (restart, bypass, terminate) and updates control records.
  - Handles errors and logs recovery actions.
- **Termination (3100-UPDATE-FINAL-STATUS, 3200-CLOSE-FILES, Lines ~180-200):**  
  Updates final status and closes files.

#### 2.2.3 `AUDITLOG.cpy`  
- **Audit Record Structure:**  
  Defines fields for timestamp, system/user/program IDs, action types, status, key info, before/after images, and messages. Used for logging all significant events and updates.

#### 2.2.4 `RPTAUD00.cbl`  
- **Initialization (1000-INITIALIZE, 1100-OPEN-FILES, 1200-WRITE-HEADERS, Lines ~20-60):**  
  Opens audit, error, and report files; writes report headers.
- **Main Processing (2000-PROCESS-REPORT, 2100-PROCESS-AUDIT-TRAIL, 2200-PROCESS-ERROR-LOG, 2300-WRITE-SUMMARY, Lines ~62-100):**  
  - Reads and summarizes audit and error logs.
  - Writes summary sections to the report.
- **Termination (3000-CLEANUP, Lines ~102-110):**  
  Closes all files and handles errors.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["Initialization:
Open files,
init WS"]
    ProcessUpdate["PORTUPDT:
Read update,
Find portfolio,
Apply update"]
    Recovery["RCVPRC00:
Determine recovery mode,
Process recovery,
Update control"]
    AuditLog["AUDITLOG:
Record audit trail"]
    Report["RPTAUD00:
Read audit/error logs,
Summarize,
Write report"]
    End(["End"])

    Start --> Init
    Init --> ProcessUpdate
    ProcessUpdate --> AuditLog
    ProcessUpdate --> Recovery
    Recovery --> AuditLog
    AuditLog --> Report
    Report --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
- Integrate real-time market data ingestion.
- Dynamically update portfolio valuations as new prices arrive.
- Enhance error handling for feed failures.
- Log all price updates and errors in the audit trail.
- Ensure audit reports include new real-time update events.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/portfolio/PORTUPDT.cbl**
  - Sections: 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE
- **src/programs/batch/RCVPRC00.cbl**
  - Sections: 2000-PROCESS-RECOVERY, 2100-RECOVER-PROCESS
- **src/copybook/common/AUDITLOG.cpy**
  - Entire file (structure extension)
- **src/programs/batch/RPTAUD00.cbl**
  - Sections: 2000-PROCESS-REPORT, 2100-WRITE-AUDIT

**Purpose of Changes:**  
- To enable ingestion and processing of real-time market price feeds, update portfolio values dynamically, log all relevant events, and provide comprehensive audit reporting.

**Impact:**  
- Real-time data will drive portfolio updates, increasing system responsiveness.
- Enhanced audit logging and error handling will improve traceability and reliability.
- Audit reports will reflect new types of events, supporting compliance and operational transparency.

### 3.3 Insertion Points  
- **PORTUPDT.cbl**
  - Insert logic in `2000-PROCESS` to accept/process real-time price feed input.
  - Extend `2100-PROCESS-UPDATE` and `2200-APPLY-UPDATE` to recalculate portfolio values using real-time prices.
  - Add audit logging after each update.
- **RCVPRC00.cbl**
  - Insert real-time market data ingestion and polling logic in `2000-PROCESS-RECOVERY`.
  - Enhance error handling for feed failures in `2100-RECOVER-PROCESS`.
  - Log ingestion events and errors to audit log.
- **AUDITLOG.cpy**
  - Extend structure to include fields for market feed source, price, and error codes.
- **RPTAUD00.cbl**
  - Update `2000-PROCESS-REPORT` and `2100-WRITE-AUDIT` to include new audit event types and error logs related to real-time updates.

### 3.4 Structured Diffs  

#### **src/programs/portfolio/PORTUPDT.cbl**

**Before:**  
```cobol
 2000-PROCESS.
     READ UPDATE-FILE
         AT END
             SET END-OF-FILE TO TRUE
         NOT AT END
             PERFORM 2100-PROCESS-UPDATE
     END-READ
     .
```

**After:**  
```cobol
 2000-PROCESS.
     PERFORM 2010-READ-REALTIME-PRICE-FEED
     READ UPDATE-FILE
         AT END
             SET END-OF-FILE TO TRUE
         NOT AT END
             PERFORM 2100-PROCESS-UPDATE
     END-READ
     .
 
 2010-READ-REALTIME-PRICE-FEED.
     * Logic to poll or receive real-time market price feed
     * Store latest prices in WS or temp storage
     * On error, PERFORM 2900-LOG-PRICE-FEED-ERROR
     .
```

**Before:**  
```cobol
 2100-PROCESS-UPDATE.
     MOVE UPDT-KEY TO PORT-KEY
     
     READ PORTFOLIO-FILE
     
     IF WS-SUCCESS-STATUS
         PERFORM 2200-APPLY-UPDATE
     ELSE
         ADD 1 TO WS-ERROR-COUNT
         DISPLAY 'Record not found: ' PORT-KEY
     END-IF
     .
```

**After:**  
```cobol
 2100-PROCESS-UPDATE.
     MOVE UPDT-KEY TO PORT-KEY
     
     READ PORTFOLIO-FILE
     
     IF WS-SUCCESS-STATUS
         PERFORM 2200-APPLY-UPDATE
         PERFORM 2900-LOG-REALTIME-UPDATE
     ELSE
         ADD 1 TO WS-ERROR-COUNT
         DISPLAY 'Record not found: ' PORT-KEY
         PERFORM 2900-LOG-PRICE-FEED-ERROR
     END-IF
     .
```

**Before:**  
```cobol
 2200-APPLY-UPDATE.
     EVALUATE TRUE
         WHEN UPDT-STATUS
             MOVE UPDT-NEW-VALUE TO PORT-STATUS
         WHEN UPDT-NAME
             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
         WHEN UPDT-VALUE
             MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
             MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
     END-EVALUATE
     
     REWRITE PORT-RECORD
     
     IF WS-SUCCESS-STATUS
         ADD 1 TO WS-UPDATE-COUNT
     ELSE
         ADD 1 TO WS-ERROR-COUNT
         DISPLAY 'Update failed for: ' PORT-KEY
     END-IF
     .
```

**After:**  
```cobol
 2200-APPLY-UPDATE.
     EVALUATE TRUE
         WHEN UPDT-STATUS
             MOVE UPDT-NEW-VALUE TO PORT-STATUS
         WHEN UPDT-NAME
             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
         WHEN UPDT-VALUE
             * Use real-time price if available
             IF WS-REALTIME-PRICE-AVAILABLE
                 MOVE WS-REALTIME-PRICE TO PORT-TOTAL-VALUE
             ELSE
                 MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                 MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
             END-IF
     END-EVALUATE
     
     REWRITE PORT-RECORD
     
     IF WS-SUCCESS-STATUS
         ADD 1 TO WS-UPDATE-COUNT
     ELSE
         ADD 1 TO WS-ERROR-COUNT
         DISPLAY 'Update failed for: ' PORT-KEY
     END-IF
     .
```

**New Section:**  
```cobol
 2900-LOG-REALTIME-UPDATE.
     * Populate AUDIT-RECORD with real-time update details
     * CALL 'AUDITLOG' or WRITE to AUDIT-FILE
     .

 2900-LOG-PRICE-FEED-ERROR.
     * Populate AUDIT-RECORD with error details
     * CALL 'AUDITLOG' or WRITE to AUDIT-FILE
     .
```

---

#### **src/programs/batch/RCVPRC00.cbl**

**Before:**  
```cobol
 2000-PROCESS-RECOVERY.
     EVALUATE WS-RECOVERY-MODE
         WHEN 'P'
             PERFORM 2100-RECOVER-PROCESS
         WHEN 'S'
             PERFORM 2200-RECOVER-SEQUENCE
         WHEN 'A'
             PERFORM 2300-RECOVER-ALL
     END-EVALUATE
     .
```

**After:**  
```cobol
 2000-PROCESS-RECOVERY.
     PERFORM 2010-INGEST-REALTIME-PRICE-FEED
     EVALUATE WS-RECOVERY-MODE
         WHEN 'P'
             PERFORM 2100-RECOVER-PROCESS
         WHEN 'S'
             PERFORM 2200-RECOVER-SEQUENCE
         WHEN 'A'
             PERFORM 2300-RECOVER-ALL
     END-EVALUATE
     .

 2010-INGEST-REALTIME-PRICE-FEED.
     * Logic to poll/receive real-time market data
     * On error, PERFORM 2900-LOG-PRICE-FEED-ERROR
     .
```

**Before:**  
```cobol
 2100-RECOVER-PROCESS.
     MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
     MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE

     READ BATCH-CONTROL-FILE
         INVALID KEY
             MOVE 'Process record not found' TO ERR-TEXT
             PERFORM 9000-ERROR-ROUTINE
     END-READ

     PERFORM 2110-DETERMINE-ACTION
     PERFORM 2120-EXECUTE-RECOVERY
     .
```

**After:**  
```cobol
 2100-RECOVER-PROCESS.
     MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
     MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE

     READ BATCH-CONTROL-FILE
         INVALID KEY
             MOVE 'Process record not found' TO ERR-TEXT
             PERFORM 9000-ERROR-ROUTINE
             PERFORM 2900-LOG-PRICE-FEED-ERROR
     END-READ

     PERFORM 2110-DETERMINE-ACTION
     PERFORM 2120-EXECUTE-RECOVERY
     PERFORM 2900-LOG-REALTIME-INGESTION
     .
```

**New Section:**  
```cobol
 2900-LOG-REALTIME-INGESTION.
     * Populate AUDIT-RECORD with ingestion event details
     * CALL 'AUDITLOG' or WRITE to AUDIT-FILE
     .

 2900-LOG-PRICE-FEED-ERROR.
     * Populate AUDIT-RECORD with error details
     * CALL 'AUDITLOG' or WRITE to AUDIT-FILE
     .
```

---

#### **src/copybook/common/AUDITLOG.cpy**

**Before:**  
```cobol
 01  AUDIT-RECORD.
     05  AUD-HEADER.
         10  AUD-TIMESTAMP     PIC X(26).
         10  AUD-SYSTEM-ID     PIC X(8).
         10  AUD-USER-ID       PIC X(8).
         10  AUD-PROGRAM       PIC X(8).
         10  AUD-TERMINAL      PIC X(8).
     05  AUD-TYPE             PIC X(4).
         88  AUD-TRANSACTION     VALUE 'TRAN'.
         88  AUD-USER-ACTION     VALUE 'USER'.
         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
     05  AUD-ACTION           PIC X(8).
         88  AUD-CREATE         VALUE 'CREATE  '.
         88  AUD-UPDATE         VALUE 'UPDATE  '.
         88  AUD-DELETE         VALUE 'DELETE  '.
         88  AUD-INQUIRE        VALUE 'INQUIRE '.
         88  AUD-LOGIN          VALUE 'LOGIN   '.
         88  AUD-LOGOUT         VALUE 'LOGOUT  '.
         88  AUD-STARTUP        VALUE 'STARTUP '.
         88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
     05  AUD-STATUS           PIC X(4).
         88  AUD-SUCCESS        VALUE 'SUCC'.
         88  AUD-FAILURE        VALUE 'FAIL'.
         88  AUD-WARNING        VALUE 'WARN'.
     05  AUD-KEY-INFO.
         10  AUD-PORTFOLIO-ID  PIC X(8).
         10  AUD-ACCOUNT-NO    PIC X(10).
     05  AUD-BEFORE-IMAGE     PIC X(100).
     05  AUD-AFTER-IMAGE      PIC X(100).
     05  AUD-MESSAGE          PIC X(100). 
```

**After:**  
```cobol
 01  AUDIT-RECORD.
     05  AUD-HEADER.
         10  AUD-TIMESTAMP     PIC X(26).
         10  AUD-SYSTEM-ID     PIC X(8).
         10  AUD-USER-ID       PIC X(8).
         10  AUD-PROGRAM       PIC X(8).
         10  AUD-TERMINAL      PIC X(8).
     05  AUD-TYPE             PIC X(4).
         88  AUD-TRANSACTION     VALUE 'TRAN'.
         88  AUD-USER-ACTION     VALUE 'USER'.
         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
         88  AUD-PRICE-FEED      VALUE 'PRCF'.
     05  AUD-ACTION           PIC X(8).
         88  AUD-CREATE         VALUE 'CREATE  '.
         88  AUD-UPDATE         VALUE 'UPDATE  '.
         88  AUD-DELETE         VALUE 'DELETE  '.
         88  AUD-INQUIRE        VALUE 'INQUIRE '.
         88  AUD-LOGIN          VALUE 'LOGIN   '.
         88  AUD-LOGOUT         VALUE 'LOGOUT  '.
         88  AUD-STARTUP        VALUE 'STARTUP '.
         88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
         88  AUD-PRICE-INGEST   VALUE 'PRCINGST'.
     05  AUD-STATUS           PIC X(4).
         88  AUD-SUCCESS        VALUE 'SUCC'.
         88  AUD-FAILURE        VALUE 'FAIL'.
         88  AUD-WARNING        VALUE 'WARN'.
     05  AUD-KEY-INFO.
         10  AUD-PORTFOLIO-ID  PIC X(8).
         10  AUD-ACCOUNT-NO    PIC X(10).
         10  AUD-FEED-SOURCE   PIC X(16).
     05  AUD-PRICE            PIC 9(13)V99.
     05  AUD-ERROR-CODE       PIC X(8).
     05  AUD-BEFORE-IMAGE     PIC X(100).
     05  AUD-AFTER-IMAGE      PIC X(100).
     05  AUD-MESSAGE          PIC X(100). 
```

---

#### **src/programs/batch/RPTAUD00.cbl**

**Before:**  
```cobol
 2000-PROCESS-REPORT.
     PERFORM 2100-PROCESS-AUDIT-TRAIL
     PERFORM 2200-PROCESS-ERROR-LOG
     PERFORM 2300-WRITE-SUMMARY.
```

**After:**  
```cobol
 2000-PROCESS-REPORT.
     PERFORM 2100-PROCESS-AUDIT-TRAIL
     PERFORM 2150-PROCESS-REALTIME-PRICE-UPDATES
     PERFORM 2200-PROCESS-ERROR-LOG
     PERFORM 2300-WRITE-SUMMARY.

 2150-PROCESS-REALTIME-PRICE-UPDATES.
     * Read and summarize audit records with AUD-TYPE = 'PRCF'
     * Include price feed events and errors in the report
     .
```

**Before:**  
```cobol
 2310-WRITE-AUDIT-SUMMARY.
     DISPLAY 'AUDIT SUMMARY WRITTEN'
     .
```

**After:**  
```cobol
 2310-WRITE-AUDIT-SUMMARY.
     DISPLAY 'AUDIT SUMMARY WRITTEN'
     PERFORM 2315-WRITE-REALTIME-PRICE-SUMMARY
     .

 2315-WRITE-REALTIME-PRICE-SUMMARY.
     * Write summary of real-time price feed events and errors
     .
```

---

## 4. Conclusion  
The proposed changes integrate real-time market price feeds into the portfolio update process, ensuring dynamic and accurate portfolio valuations. Enhanced audit logging and error handling provide robust traceability and compliance, while updated reporting ensures all new events are visible to stakeholders. These modifications modernize the legacy COBOL system, improve operational agility, and support future enhancements.

1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application's enhancements to enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates. The document details the existing logic, identifies impacted modules, and outlines the required changes with structured code diffs to guide implementation and review.

2. Existing Logic and Flow  
2.1 Overview  
The COBOL application processes portfolio updates in a batch-oriented manner. The main program (`PORTUPDT.cbl`) reads update records, applies changes to portfolio data, and logs errors. Portfolio data structures are defined in the `PORTFLIO.cpy` copybook, while audit logging structures are defined in `AUDITLOG.cpy`. The batch report program (`RPTAUD00.cbl`) generates audit reports based on the audit log.

2.2 Detailed Logic  

src/programs/portfolio/PORTUPDT.cbl
- 1000-INITIALIZE (Lines 54–68):  
  Initializes working storage, opens portfolio and update files, and handles file open errors.
- 2000-PROCESS (Lines 69–76):  
  Reads each update record and, if not end-of-file, processes the update.
- 2100-PROCESS-UPDATE (Lines 77–88):  
  Moves the update key to the portfolio key, reads the portfolio record, and if found, applies the update; otherwise, logs an error.
- 2200-APPLY-UPDATE (Lines 89–108):  
  Applies the update based on the update type, rewrites the portfolio record, and updates success/error counters.

src/copybook/common/PORTFLIO.cpy
Defines the portfolio master record layout, including keys, client info, portfolio info, financial info, and audit info.

src/copybook/common/AUDITLOG.cpy
Defines the audit trail record, including header, type, action, status, key info, before/after images, and message.

src/programs/batch/RPTAUD00.cbl
- 1000-INITIALIZE (Lines 54–56):  
  Performs file opening and writes report headers.
- 1100-OPEN-FILES (Lines 57–77):  
  Opens audit, error, and report files, handling errors as needed.
- 2000-PROCESS-REPORT (Lines 80–83):  
  Processes the audit trail, error log, and writes a summary.

Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE\nInitialize WS, open files,\nhandle open errors"]
    Process["2000-PROCESS\nRead update file,\nprocess each record"]
    ProcUpdate["2100-PROCESS-UPDATE\nMove update key,\nread portfolio record,\napply update or log error"]
    ApplyUpdate["2200-APPLY-UPDATE\nApply update type,\nrewrite record,\nupdate counters"]
    End(["End"])

    Start --> Init
    Init --> Process
    Process -->|For each update| ProcUpdate
    ProcUpdate -->|If found| ApplyUpdate
    ProcUpdate -->|If not found| End
    ApplyUpdate --> Process
    Process -->|End of file| End
```

3. Proposed Changes  
3.1 User Story or Analysis Report Summary  
User Story:  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

Summary:  
- Integrate real-time price feed ingestion into the portfolio update process.
- Recalculate portfolio valuations dynamically based on incoming prices.
- Enhance error handling and audit logging for feed events and failures.
- Update data structures to store latest prices, timestamps, and historical prices as needed.
- Ensure audit reporting reflects new feed-related events.

3.2 Proposed Code Changes Summary:
3.2.1 Impacted Sections and Files:
- src/programs/portfolio/PORTUPDT.cbl  
  - Sections: 1000-INITIALIZE, 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE  
- src/copybook/common/PORTFLIO.cpy  
  - Entire copybook  
- src/copybook/common/AUDITLOG.cpy  
  - Entire copybook  
- src/programs/batch/RPTAUD00.cbl  
  - Sections: 1000-INITIALIZE, 1100-OPEN-FILES, 2000-PROCESS-REPORT  

Purpose of Changes:  
- To enable ingestion and processing of real-time market price feeds, update portfolio valuations accordingly, and ensure all feed events and errors are logged for audit and reporting.

Impact:  
- Core update logic is extended for real-time data.
- Portfolio and audit data structures are enhanced.
- Audit reporting includes new event types.
- System is more responsive and traceable for real-time market changes.

3.3 Insertion Points  
- PORTUPDT.cbl
  - 1000-INITIALIZE: Add initialization for real-time feed connection and error handling.
  - 2000-PROCESS: Integrate loop or handler for real-time feed messages.
  - 2100-PROCESS-UPDATE: Extend to process real-time price updates, trigger recalculation, and log feed events.
  - 2200-APPLY-UPDATE: Update logic to handle new price fields and audit logging for feed events.
- PORTFLIO.cpy
  - Add fields for latest price, price timestamp, and historical prices.
- AUDITLOG.cpy
  - Add event types and fields for feed integration, error messages, and price details.
- RPTAUD00.cbl
  - Update initialization and processing to handle/report new audit log entries related to real-time feed events.

3.4 Structured Diffs  

src/programs/portfolio/PORTUPDT.cbl
Before:  
```cobol
054 1000-INITIALIZE.
055     INITIALIZE WS-WORK-AREAS
056     
057     OPEN I-O   PORTFOLIO-FILE
058     OPEN INPUT UPDATE-FILE
059     
060     IF NOT WS-SUCCESS-STATUS OR 
061        NOT WS-UPDT-SUCCESS
062        DISPLAY 'Error opening files: ' 
063                'PORT=' WS-FILE-STATUS
064                'UPDT=' WS-UPDT-STATUS
065        MOVE WS-ERROR TO WS-RETURN-CODE
066        PERFORM 3000-TERMINATE
067     END-IF
068     .
```
After:  
```cobol
054 1000-INITIALIZE.
055     INITIALIZE WS-WORK-AREAS
056     
057     OPEN I-O   PORTFOLIO-FILE
058     OPEN INPUT UPDATE-FILE
059     
059A    * Initialize real-time price feed connection
059B    PERFORM 1500-INIT-PRICE-FEED
059C    IF NOT WS-FEED-CONNECTED
059D        DISPLAY 'Error connecting to price feed'
059E        MOVE WS-ERROR TO WS-RETURN-CODE
059F        PERFORM 3000-TERMINATE
059G    END-IF
060     IF NOT WS-SUCCESS-STATUS OR 
061        NOT WS-UPDT-SUCCESS
062        DISPLAY 'Error opening files: ' 
063                'PORT=' WS-FILE-STATUS
064                'UPDT=' WS-UPDT-STATUS
065        MOVE WS-ERROR TO WS-RETURN-CODE
066        PERFORM 3000-TERMINATE
067     END-IF
068     .
```

Before:  
```cobol
069 2000-PROCESS.
070     READ UPDATE-FILE
071         AT END
072             SET END-OF-FILE TO TRUE
073         NOT AT END
074             PERFORM 2100-PROCESS-UPDATE
075     END-READ
076     .
```
After:  
```cobol
069 2000-PROCESS.
070     PERFORM UNTIL END-OF-FILE
071         * Process real-time price feed messages
072         PERFORM 2010-PROCESS-PRICE-FEED
073         READ UPDATE-FILE
074             AT END
075                 SET END-OF-FILE TO TRUE
076             NOT AT END
077                 PERFORM 2100-PROCESS-UPDATE
078         END-READ
079     END-PERFORM
080     .
```

Before:  
```cobol
077 2100-PROCESS-UPDATE.
078     MOVE UPDT-KEY TO PORT-KEY
079     
080     READ PORTFOLIO-FILE
081     
082     IF WS-SUCCESS-STATUS
083         PERFORM 2200-APPLY-UPDATE
084     ELSE
085         ADD 1 TO WS-ERROR-COUNT
086         DISPLAY 'Record not found: ' PORT-KEY
087     END-IF
088     .
```
After:  
```cobol
077 2100-PROCESS-UPDATE.
078     MOVE UPDT-KEY TO PORT-KEY
079     
080     READ PORTFOLIO-FILE
081     
082     IF WS-SUCCESS-STATUS
083         IF UPDT-TYPE = 'PRICE'
084             PERFORM 2210-APPLY-PRICE-UPDATE
085         ELSE
086             PERFORM 2200-APPLY-UPDATE
087         END-IF
088     ELSE
089         ADD 1 TO WS-ERROR-COUNT
090         DISPLAY 'Record not found: ' PORT-KEY
091         PERFORM 2500-LOG-FEED-ERROR
092     END-IF
093     .
```

Before:  
```cobol
089 2200-APPLY-UPDATE.
090     EVALUATE TRUE
091         WHEN UPDT-STATUS
092             MOVE UPDT-NEW-VALUE TO PORT-STATUS
093         WHEN UPDT-NAME
094             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
095         WHEN UPDT-VALUE
096             MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
097             MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
098     END-EVALUATE
099     
100     REWRITE PORT-RECORD
101     
102     IF WS-SUCCESS-STATUS
103         ADD 1 TO WS-UPDATE-COUNT
104     ELSE
105         ADD 1 TO WS-ERROR-COUNT
106         DISPLAY 'Update failed for: ' PORT-KEY
107     END-IF
108     .
```
After:  
```cobol
089 2200-APPLY-UPDATE.
090     EVALUATE TRUE
091         WHEN UPDT-STATUS
092             MOVE UPDT-NEW-VALUE TO PORT-STATUS
093         WHEN UPDT-NAME
094             MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
095         WHEN UPDT-VALUE
096             MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
097             MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
098     END-EVALUATE
099     
100     REWRITE PORT-RECORD
101     
102     IF WS-SUCCESS-STATUS
103         ADD 1 TO WS-UPDATE-COUNT
104         PERFORM 2400-LOG-FEED-EVENT
105     ELSE
106         ADD 1 TO WS-ERROR-COUNT
107         DISPLAY 'Update failed for: ' PORT-KEY
108         PERFORM 2500-LOG-FEED-ERROR
109     END-IF
110     .
```

New Paragraph Example:  
```cobol
* New paragraph for price update
2210-APPLY-PRICE-UPDATE.
    MOVE FEED-PRICE TO PORT-LATEST-PRICE
    MOVE FEED-TIMESTAMP TO PORT-PRICE-TIMESTAMP
    PERFORM 2220-RECALCULATE-PORTFOLIO-VALUE
    REWRITE PORT-RECORD
    IF WS-SUCCESS-STATUS
        ADD 1 TO WS-PRICE-UPDATE-COUNT
        PERFORM 2400-LOG-FEED-EVENT
    ELSE
        ADD 1 TO WS-ERROR-COUNT
        PERFORM 2500-LOG-FEED-ERROR
    END-IF
    .
```

src/copybook/common/PORTFLIO.cpy
Before:  
```cobol
028     05  PORT-FINANCIAL-INFO.
029         10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
030         10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
```
After:  
```cobol
028     05  PORT-FINANCIAL-INFO.
029         10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
030         10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
030A        10  PORT-LATEST-PRICE   PIC S9(9)V99 COMP-3.
030B        10  PORT-PRICE-TIMESTAMP PIC 9(14).
030C        10  PORT-PRICE-HISTORY  OCCURS 10 TIMES.
030D            15  PORT-HIST-PRICE     PIC S9(9)V99 COMP-3.
030E            15  PORT-HIST-TIMESTAMP PIC 9(14).
```

src/copybook/common/AUDITLOG.cpy
Before:  
```cobol
014     05  AUD-TYPE             PIC X(4).
015         88  AUD-TRANSACTION     VALUE 'TRAN'.
016         88  AUD-USER-ACTION     VALUE 'USER'.
017         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
```
After:  
```cobol
014     05  AUD-TYPE             PIC X(4).
015         88  AUD-TRANSACTION     VALUE 'TRAN'.
016         88  AUD-USER-ACTION     VALUE 'USER'.
017         88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
017A        88  AUD-PRICE-FEED      VALUE 'FEED'.
017B        88  AUD-PRICE-ERROR     VALUE 'FERR'.
```
Before:  
```cobol
036     05  AUD-MESSAGE          PIC X(100). 
```
After:  
```cobol
036     05  AUD-MESSAGE          PIC X(100).
036A        05  AUD-PRICE-DETAILS    PIC X(50).
```

src/programs/batch/RPTAUD00.cbl
Before:  
```cobol
080 2000-PROCESS-REPORT.
081     PERFORM 2100-PROCESS-AUDIT-TRAIL
082     PERFORM 2200-PROCESS-ERROR-LOG
083     PERFORM 2300-WRITE-SUMMARY.
```
After:  
```cobol
080 2000-PROCESS-REPORT.
081     PERFORM 2100-PROCESS-AUDIT-TRAIL
081A    PERFORM 2150-PROCESS-PRICE-FEED-EVENTS
082     PERFORM 2200-PROCESS-ERROR-LOG
083     PERFORM 2300-WRITE-SUMMARY.
```
New Paragraph Example:  
```cobol
2150-PROCESS-PRICE-FEED-EVENTS.
    READ AUDIT-FILE NEXT RECORD
        AT END
            EXIT PARAGRAPH
        NOT AT END
            IF AUD-TYPE = 'FEED' OR AUD-TYPE = 'FERR'
                PERFORM 2160-WRITE-PRICE-FEED-REPORT
            END-IF
            PERFORM 2150-PROCESS-PRICE-FEED-EVENTS
    END-READ
    .
```

4. Conclusion  
The proposed changes integrate real-time market price feeds into the portfolio update process, enabling dynamic valuation updates and robust audit logging. Data structures are enhanced to support new price and timestamp fields, and reporting is extended to reflect feed-related events. These enhancements modernize the legacy COBOL system, improve responsiveness to market changes, and ensure traceability and auditability for all real-time updates.

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically to add a `CHANNEL-CODE` field to the transaction file structure. The change is required to enable channel identification in batch processing and reporting, impacting the transaction record copybook and all programs that read or write transaction records.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data in batch and utility programs. The transaction record structure is centrally defined in a copybook (`TRNREC.cpy`), which is included by all programs that handle transaction files. The batch reporting program (`RPTPOS00.cbl`) and the utility validation program (`UTLVAL00.cbl`) both rely on this structure for reading, processing, and validating transaction data.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the layout for all transaction records.
- Contains fields for transaction key, data, audit, and filler.
- Used by all transaction-processing programs.

#### Batch Reporting Program (`src/programs/batch/RPTPOS00.cbl`)
- **1100-OPEN-FILES**: Opens all required files (position master, transaction history, report file) and checks their status.
- **2200-PROCESS-TRANSACTIONS**: Orchestrates the reading and summarizing of transaction activity.

#### Utility Validation Program (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES**: Opens validation control, position master, transaction history, and error report files, with error handling.
- **2400-CHECK-FORMAT**: Calls routines to check the format of position and transaction records.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["1100-OPEN-FILES
(Open all required files)"]
    ProcessTransactions["2200-PROCESS-TRANSACTIONS
(Read and summarize transactions)"]
    CheckFormat["2400-CHECK-FORMAT
(Validate record formats)"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ProcessTransactions
    ProcessTransactions --> CheckFormat
    CheckFormat --> End
```

#### Key Code Snippets (Pre-Change)

**src/copybook/common/TRNREC.cpy**
```cobol
01  TRANSACTION-RECORD.
    05  TRN-KEY.
        10  TRN-DATE           PIC X(08).
        10  TRN-TIME           PIC X(06).
        10  TRN-PORTFOLIO-ID   PIC X(08).
        10  TRN-SEQUENCE-NO    PIC X(06).
    05  TRN-DATA.
        10  TRN-INVESTMENT-ID  PIC X(10).
        10  TRN-TYPE           PIC X(02).
            88  TRN-TYPE-BUY     VALUE 'BU'.
            88  TRN-TYPE-SELL    VALUE 'SL'.
            88  TRN-TYPE-TRANS   VALUE 'TR'.
            88  TRN-TYPE-FEE     VALUE 'FE'.
        10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
        10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
        10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
        10  TRN-CURRENCY      PIC X(03).
        10  TRN-STATUS        PIC X(01).
            88  TRN-STATUS-PEND   VALUE 'P'.
            88  TRN-STATUS-DONE   VALUE 'D'.
            88  TRN-STATUS-FAIL   VALUE 'F'.
            88  TRN-STATUS-REV    VALUE 'R'.
    05  TRN-AUDIT.
        10  TRN-PROCESS-DATE  PIC X(26).
        10  TRN-PROCESS-USER  PIC X(08).
    05  TRN-FILLER           PIC X(50).
```

**src/programs/batch/RPTPOS00.cbl** (1100-OPEN-FILES, lines 54–72)
```cobol
1100-OPEN-FILES.
    OPEN INPUT POSITION-MASTER
    IF WS-POSITION-STATUS NOT = '00'
        MOVE 'ERROR OPENING POSITION MASTER'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    OPEN INPUT TRANSACTION-HISTORY
    IF WS-TRAN-STATUS NOT = '00'
        MOVE 'ERROR OPENING TRANSACTION HISTORY'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    OPEN OUTPUT REPORT-FILE
    IF WS-REPORT-STATUS NOT = '00'
        MOVE 'ERROR OPENING REPORT FILE'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF.
```

**src/programs/batch/RPTPOS00.cbl** (2200-PROCESS-TRANSACTIONS, lines 109–111)
```cobol
2200-PROCESS-TRANSACTIONS.
    PERFORM 2210-READ-TRANSACTIONS
    PERFORM 2220-SUMMARIZE-ACTIVITY.
```

**src/programs/utility/UTLVAL00.cbl** (1100-OPEN-FILES, lines 54–77)
```cobol
1100-OPEN-FILES.
    OPEN INPUT VALIDATION-CONTROL
    IF WS-VAL-STATUS NOT = '00'
        MOVE 'ERROR OPENING VALIDATION CONTROL'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    OPEN INPUT POSITION-MASTER
    IF WS-POS-STATUS NOT = '00'
        MOVE 'ERROR OPENING POSITION MASTER'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    OPEN INPUT TRANSACTION-HISTORY
    IF WS-TRAN-STATUS NOT = '00'
        MOVE 'ERROR OPENING TRANSACTION HISTORY'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF

    OPEN OUTPUT ERROR-REPORT
    IF WS-RPT-STATUS NOT = '00'
        MOVE 'ERROR OPENING ERROR REPORT'
          TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF.
```

**src/programs/utility/UTLVAL00.cbl** (2400-CHECK-FORMAT, lines 120–122)
```cobol
2400-CHECK-FORMAT.
    PERFORM 2410-CHECK-POSITION-FORMAT
    PERFORM 2420-CHECK-TRANSACTION-FORMAT.
```

---

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- The `CHANNEL-CODE` field will allow the system to identify the source channel (e.g., online, branch, mobile) for each transaction, supporting enhanced reporting and auditability.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy** (copybook structure)
- **src/programs/batch/RPTPOS00.cbl** (1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS, and all logic referencing transaction fields)
- **src/programs/utility/UTLVAL00.cbl** (1100-OPEN-FILES, 2400-CHECK-FORMAT, and all logic referencing transaction fields)

**Purpose of Changes:**  
To introduce a new `CHANNEL-CODE` field in the transaction record, update all programs that read/write transaction files to recognize and process this new field, and ensure validation and reporting logic includes channel identification.

**Impact:**  
- All transaction-processing programs will now read/write an additional field.
- File layouts, LRECL, and validation logic must be updated.
- Reporting and batch processing can now segment or filter by channel.

### 3.3 Insertion Points  
- **TRNREC.cpy**: Insert `CHANNEL-CODE` under `TRN-DATA` group, after `TRN-CURRENCY` for logical grouping.
- **RPTPOS00.cbl**: Update all references to the transaction record to include `CHANNEL-CODE`. Update report output logic to display or process the new field.
- **UTLVAL00.cbl**: Update validation logic in `2420-CHECK-TRANSACTION-FORMAT` to check for valid `CHANNEL-CODE` values.

### 3.4 Structured Diffs  

#### src/copybook/common/TRNREC.cpy

**Before:**
```cobol
05  TRN-DATA.
    10  TRN-INVESTMENT-ID  PIC X(10).
    10  TRN-TYPE           PIC X(02).
        88  TRN-TYPE-BUY     VALUE 'BU'.
        88  TRN-TYPE-SELL    VALUE 'SL'.
        88  TRN-TYPE-TRANS   VALUE 'TR'.
        88  TRN-TYPE-FEE     VALUE 'FE'.
    10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
    10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
    10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
    10  TRN-CURRENCY      PIC X(03).
    10  TRN-STATUS        PIC X(01).
        88  TRN-STATUS-PEND   VALUE 'P'.
        88  TRN-STATUS-DONE   VALUE 'D'.
        88  TRN-STATUS-FAIL   VALUE 'F'.
        88  TRN-STATUS-REV    VALUE 'R'.
```

**After:**
```cobol
05  TRN-DATA.
    10  TRN-INVESTMENT-ID  PIC X(10).
    10  TRN-TYPE           PIC X(02).
        88  TRN-TYPE-BUY     VALUE 'BU'.
        88  TRN-TYPE-SELL    VALUE 'SL'.
        88  TRN-TYPE-TRANS   VALUE 'TR'.
        88  TRN-TYPE-FEE     VALUE 'FE'.
    10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
    10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
    10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
    10  TRN-CURRENCY      PIC X(03).
    10  TRN-CHANNEL-CODE  PIC X(04).
        88  TRN-CHANNEL-ONLINE   VALUE 'ONLN'.
        88  TRN-CHANNEL-BRANCH   VALUE 'BRCH'.
        88  TRN-CHANNEL-MOBILE   VALUE 'MOBL'.
        88  TRN-CHANNEL-OTHER    VALUE 'OTHR'.
    10  TRN-STATUS        PIC X(01).
        88  TRN-STATUS-PEND   VALUE 'P'.
        88  TRN-STATUS-DONE   VALUE 'D'.
        88  TRN-STATUS-FAIL   VALUE 'F'.
        88  TRN-STATUS-REV    VALUE 'R'.
```

#### src/programs/batch/RPTPOS00.cbl

**Before (Excerpt from transaction processing logic):**
```cobol
MOVE TRN-DATA-TRN-TYPE TO WS-REPORT-TYPE
MOVE TRN-DATA-TRN-AMOUNT TO WS-REPORT-AMOUNT
```

**After:**
```cobol
MOVE TRN-DATA-TRN-TYPE TO WS-REPORT-TYPE
MOVE TRN-DATA-TRN-AMOUNT TO WS-REPORT-AMOUNT
MOVE TRN-DATA-TRN-CHANNEL-CODE TO WS-REPORT-CHANNEL
```

**Before (Report output):**
```cobol
WRITE REPORT-RECORD FROM WS-REPORT-LINE
```

**After:**
```cobol
STRING
    WS-REPORT-TYPE DELIMITED BY SPACE
    WS-REPORT-AMOUNT DELIMITED BY SPACE
    WS-REPORT-CHANNEL DELIMITED BY SPACE
    INTO WS-REPORT-LINE
END-STRING
WRITE REPORT-RECORD FROM WS-REPORT-LINE
```

#### src/programs/utility/UTLVAL00.cbl

**Before (Excerpt from 2420-CHECK-TRANSACTION-FORMAT):**
```cobol
IF TRN-DATA-TRN-TYPE NOT = 'BU' AND
   TRN-DATA-TRN-TYPE NOT = 'SL' AND
   TRN-DATA-TRN-TYPE NOT = 'TR' AND
   TRN-DATA-TRN-TYPE NOT = 'FE'
    MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

**After:**
```cobol
IF TRN-DATA-TRN-TYPE NOT = 'BU' AND
   TRN-DATA-TRN-TYPE NOT = 'SL' AND
   TRN-DATA-TRN-TYPE NOT = 'TR' AND
   TRN-DATA-TRN-TYPE NOT = 'FE'
    MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF

IF TRN-DATA-TRN-CHANNEL-CODE NOT = 'ONLN' AND
   TRN-DATA-TRN-CHANNEL-CODE NOT = 'BRCH' AND
   TRN-DATA-TRN-CHANNEL-CODE NOT = 'MOBL' AND
   TRN-DATA-TRN-CHANNEL-CODE NOT = 'OTHR'
    MOVE 'INVALID CHANNEL CODE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF
```

---

## 4. Conclusion  
The proposed changes introduce a `CHANNEL-CODE` field to the transaction record structure, enabling channel-based identification for all transaction processing, reporting, and validation. All impacted programs and copybooks have been updated to recognize, process, and validate the new field, ensuring seamless integration with existing logic and maintaining system integrity. These enhancements support improved reporting, auditability, and future extensibility for channel-based business requirements.

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a detailed technical explanation and Low-Level Design (LLD) for the enhancement of the COBOL legacy application, specifically to add a `TRANSACTION-TYPE` field to batch processing and reporting. The document covers the existing logic, identifies impacted modules, explains the rationale for the change, and provides structured diffs and diagrams for clarity.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The application processes financial transactions in batch mode, storing transaction records in a central structure and generating summary reports. The main modules are:
- **TRNREC.cpy**: Defines the transaction record structure.
- **PORTTRAN.cbl**: Batch processor that reads, validates, processes, and writes transactions.
- **RPTPOS00.cbl**: Generates reports from processed transactions.

### 2.2 Detailed Logic  

#### TRNREC.cpy  
- **Purpose**: Defines the layout for each transaction record.
- **Structure**:
    ```cobol
    01  TRANSACTION-RECORD.
        05  TRANSACTION-ID        PIC X(10).
        05  TRANSACTION-DATE      PIC 9(8).
        05  TRANSACTION-AMOUNT    PIC S9(9)V99.
        05  ACCOUNT-NUMBER        PIC X(12).
        ...
    ```
- **Usage**: Included in both processing and reporting modules.

#### PORTTRAN.cbl  
- **Initialization** (e.g., lines 10-40): Opens files, initializes counters.
    ```cobol
    OPEN INPUT TRANSACTION-FILE
    OPEN OUTPUT PROCESSED-FILE
    MOVE ZERO TO TRANSACTION-COUNT
    ```
- **Main Processing** (e.g., lines 50-200): Reads, validates, processes, and writes transactions.
    ```cobol
    PERFORM UNTIL END-OF-FILE
        READ TRANSACTION-FILE INTO TRANSACTION-RECORD
            AT END
                SET END-OF-FILE TO TRUE
            NOT AT END
                PERFORM VALIDATE-TRANSACTION
                IF VALID
                    PERFORM PROCESS-TRANSACTION
                    WRITE PROCESSED-RECORD FROM TRANSACTION-RECORD
                END-IF
        END-READ
    END-PERFORM
    ```
- **Termination** (e.g., lines 210-230): Summarizes and closes files.
    ```cobol
    DISPLAY "TOTAL TRANSACTIONS: " TRANSACTION-COUNT
    CLOSE TRANSACTION-FILE
    CLOSE PROCESSED-FILE
    ```

#### RPTPOS00.cbl  
- **Initialization** (e.g., lines 10-30): Opens files, sets up report headers.
    ```cobol
    OPEN INPUT PROCESSED-FILE
    OPEN OUTPUT REPORT-FILE
    ```
- **Processing** (e.g., lines 40-150): Reads records, formats report lines.
    ```cobol
    PERFORM UNTIL END-OF-FILE
        READ PROCESSED-FILE INTO TRANSACTION-RECORD
            AT END
                SET END-OF-FILE TO TRUE
            NOT AT END
                PERFORM FORMAT-REPORT-LINE
                WRITE REPORT-RECORD
        END-READ
    END-PERFORM
    ```
- **Termination** (e.g., lines 160-180): Prints summary, closes files.

#### Flowchart  
```mermaid
flowchart TD
    Start([Start])
    ReadInput([Read Input File])
    Validate([Validate Transaction])
    Process([Process Transaction])
    WriteOut([Write Output File])
    Report([Generate Report])
    End([End])

    Start --> ReadInput
    ReadInput --> Validate
    Validate --> Process
    Process --> WriteOut
    WriteOut --> Report
    Report --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:** Add Transaction Type Field to Batch Processing and Reporting  
- Add a new `TRANSACTION-TYPE` field to the transaction record.
- Update batch processing to validate and process the new field.
- Update reporting to display the new field.

---

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| Program         | Impact | Nature  | Affected Paragraphs/Sections      | Dependency Path                |
|-----------------|--------|---------|-----------------------------------|-------------------------------|
| TRNREC.cpy      | High   | Direct  | TRANSACTION-RECORD                | [TRNREC.cpy]                  |
| PORTTRAN.cbl    | High   | Direct  | 2100-VALIDATE-TRANSACTION, 2120-CHECK-TRANSACTION-TYPE, 2200-UPDATE-POSITIONS, 2210-PROCESS-BUY, 2220-PROCESS-SELL, 2230-PROCESS-TRANSFER, 2240-PROCESS-FEE, 2300-UPDATE-AUDIT-TRAIL | [PORTTRAN.cbl → TRNREC.cpy]   |
| RPTPOS00.cbl    | High   | Direct  | 2200-PROCESS-TRANSACTIONS, 2110-FORMAT-POSITION, 2000-PROCESS-REPORT | [RPTPOS00.cbl → TRNREC.cpy]   |

- **Purpose of Changes:**  
  To allow the system to capture, validate, process, and report on the type of each transaction, enabling enhanced business logic and reporting capabilities.

- **Impact:**  
  - All transaction records will now include a type field.
  - Batch processing must validate and potentially branch logic based on transaction type.
  - Reports will display transaction type, providing more granular insights.

---

### 3.3 Insertion Points  

#### TRNREC.cpy  
- **Where:** After `TRANSACTION-DATE` in the `TRANSACTION-RECORD` structure.
- **Why:** Keeps related fields grouped logically.

#### PORTTRAN.cbl  
- **Where:**  
  - In `VALIDATE-TRANSACTION` paragraph: Add validation for `TRANSACTION-TYPE`.
  - In all processing paragraphs (e.g., `2120-CHECK-TRANSACTION-TYPE`, `2210-PROCESS-BUY`, etc.): Reference or branch on `TRANSACTION-TYPE` as needed.
- **Why:** Ensures only valid types are processed and allows for type-specific logic.

#### RPTPOS00.cbl  
- **Where:**  
  - In `FORMAT-REPORT-LINE` or equivalent: Add `TRANSACTION-TYPE` to report output.
  - In report headers/footers as appropriate.
- **Why:** Makes transaction type visible in reports.

---

### 3.4 Structured Diffs  

#### TRNREC.cpy

**Before:**  
```cobol
01  TRANSACTION-RECORD.
    05  TRANSACTION-ID        PIC X(10).
    05  TRANSACTION-DATE      PIC 9(8).
    05  TRANSACTION-AMOUNT    PIC S9(9)V99.
    05  ACCOUNT-NUMBER        PIC X(12).
```

**After:**  
```cobol
01  TRANSACTION-RECORD.
    05  TRANSACTION-ID        PIC X(10).
    05  TRANSACTION-DATE      PIC 9(8).
    05  TRANSACTION-TYPE      PIC X(2).    *> New field
    05  TRANSACTION-AMOUNT    PIC S9(9)V99.
    05  ACCOUNT-NUMBER        PIC X(12).
```

---

#### PORTTRAN.cbl

**Before (VALIDATE-TRANSACTION):**  
```cobol
VALIDATE-TRANSACTION.
    IF TRANSACTION-AMOUNT <= 0
        MOVE 'N' TO VALID
    ELSE
        MOVE 'Y' TO VALID
    END-IF
```

**After:**  
```cobol
VALIDATE-TRANSACTION.
    IF TRANSACTION-AMOUNT <= 0
        MOVE 'N' TO VALID
    ELSE IF TRANSACTION-TYPE NOT = 'CR' AND TRANSACTION-TYPE NOT = 'DB'
        MOVE 'N' TO VALID
    ELSE
        MOVE 'Y' TO VALID
    END-IF
```

---

#### RPTPOS00.cbl

**Before (FORMAT-REPORT-LINE):**  
```cobol
FORMAT-REPORT-LINE.
    MOVE TRANSACTION-ID TO REPORT-ID
    MOVE TRANSACTION-DATE TO REPORT-DATE
    MOVE TRANSACTION-AMOUNT TO REPORT-AMOUNT
```

**After:**  
```cobol
FORMAT-REPORT-LINE.
    MOVE TRANSACTION-ID TO REPORT-ID
    MOVE TRANSACTION-DATE TO REPORT-DATE
    MOVE TRANSACTION-TYPE TO REPORT-TYPE    *> New field
    MOVE TRANSACTION-AMOUNT TO REPORT-AMOUNT
```

---

## 4. Conclusion  
The proposed changes introduce a new `TRANSACTION-TYPE` field, enhancing the application's ability to process and report on transaction types. All impacted modules are updated in a modular, standards-compliant manner, ensuring maintainability and clarity for future enhancements. The structured diffs and diagrams provide clear implementation guidance for developers and reviewers.

---

### Visualization

```mermaid
graph TD
    TRNREC[TRNREC.cpy]:::high
    PORTTRAN[PORTTRAN.cbl]:::high
    RPTPOS00[RPTPOS00.cbl]:::high

    PORTTRAN --> TRNREC
    RPTPOS00 --> TRNREC

    classDef high fill:#ffcccc,stroke:#b22222,stroke-width:2px;
    class TRNREC,PORTTRAN,RPTPOS00 high;
```

```mermaid
flowchart TD
    A[Input File] --> B[PORTTRAN.cbl: Read & Validate]
    B --> C{TRANSACTION-TYPE Valid?}
    C -- Yes --> D[Process Transaction]
    C -- No --> E[Reject/Log Error]
    D --> F[Write to Output File]
    F --> G[RPTPOS00.cbl: Read Output]
    G --> H[Format Report (with TRANSACTION-TYPE)]
    H --> I[Report File]
```

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the integration of a real-time market price feed for dynamic portfolio valuation. The document covers the existing logic, identifies insertion points for the required changes, and details the proposed modifications, including structured before-and-after code snippets. The goal is to facilitate accurate implementation, review, and testing of the enhancements across the legacy system.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application is a batch-driven legacy system responsible for updating portfolio positions, recalculating valuations, and maintaining an audit trail. The core processing flow involves reading position records, performing updates, and logging audit information. The system is modular, with copybooks defining record structures and subprograms handling audit processing.

### 2.2 Detailed Logic  

#### 2.2.1 Main Batch Update Program (`src/programs/batch/POSUPDT.cbl`)
- **Initialization (Lines 53-67):**  
  Opens the position and audit files, checks file status, and reads the first position record.
- **Processing Loop (Lines 69-77):**  
  Iterates over each position record, invoking the update logic and reading the next record until end-of-file.
- **Position Update Logic (Lines 79-90):**  
  For active positions (`POS-STATUS = 'A'`), computes market value, updates audit fields, and writes an audit record. Error count is incremented for non-active positions.
- **Audit Write (Lines 92-109):**  
  Prepares and writes an audit record for each update.
- **Termination (Lines 111-116):**  
  Closes files and displays update/error counts.

#### 2.2.2 Position Record Structure (`src/copybook/common/POSREC.cpy`)
- Defines the layout for position records, including keys, quantities, cost basis, market value, currency, status, and audit fields.

#### 2.2.3 Audit Log Record Structure (`src/copybook/common/AUDITLOG.cpy`)
- Specifies the audit record format, including timestamp, system/user/program IDs, action types, status, key info, before/after images, and message.

#### 2.2.4 Audit Processing Subroutine (`src/programs/common/AUDPROC.cbl`)
- **Initialization (Lines 59-69):**  
  Accepts timestamp, opens the audit file, and handles file status.
- **Audit Processing (Lines 71-92):**  
  Initializes and populates the audit record from linkage section data, writes the record, and sets return codes.
- **Termination (Lines 94-96):**  
  Closes the audit file.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE:
Open files
Read first position"]
    LoopCheck["WS-EOF = 'Y'?"]
    Process["2000-PROCESS:
PERFORM 2100-UPDATE-POSITION"]
    Update["2100-UPDATE-POSITION:
If POS-STATUS = 'A'
Compute market value
Update audit fields
PERFORM 2200-WRITE-AUDIT"]
    Audit["2200-WRITE-AUDIT:
Prepare and write audit record"]
    ReadNext["Read next position record"]
    Terminate["3000-TERMINATE:
Close files
Display counts"]
    End(["End"])

    Start --> Init
    Init --> LoopCheck
    LoopCheck -- No --> Process
    Process --> Update
    Update --> Audit
    Audit --> ReadNext
    ReadNext --> LoopCheck
    LoopCheck -- Yes --> Terminate
    Terminate --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:** Integrate real-time market price feed for dynamic portfolio valuation.  
- Ingest real-time prices, recalculate position values, persist new values with timestamps, and enhance audit/error handling.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/POSUPDT.cbl**  
  - *Purpose of Changes:* Integrate real-time price ingestion, recalculate position values using live data, persist new fields, and trigger enhanced audit/error handling.
  - *Impact:* Core update logic, new error/audit scenarios, and data persistence.
- **src/copybook/common/POSREC.cpy**  
  - *Purpose of Changes:* Extend position record to store real-time price, valuation timestamp, and P&L fields.
  - *Impact:* Data structure change affecting all position-processing programs.
- **src/copybook/common/AUDITLOG.cpy**  
  - *Purpose of Changes:* Add fields for feed status, error codes, and alarms to audit records.
  - *Impact:* Enables richer audit logging for feed failures and stale prices.
- **src/programs/common/AUDPROC.cbl**  
  - *Purpose of Changes:* Handle new audit/error scenarios, process additional audit fields.
  - *Impact:* Enhanced error handling and audit trail for real-time feed integration.

### 3.3 Insertion Points  
- **POSUPDT.cbl:**  
  - After reading each position record (Line 64), insert logic to fetch real-time price and handle errors.
  - In `2100-UPDATE-POSITION` (Lines 79-90), replace static price calculation with real-time price, update new fields, and handle feed errors.
  - In `2200-WRITE-AUDIT` (Lines 92-109), log feed status and error codes.
- **POSREC.cpy:**  
  - Add new fields for real-time price, valuation timestamp, and P&L after existing market value field.
- **AUDITLOG.cpy:**  
  - Add fields for feed status, error code, and alarm after AUD-STATUS.
- **AUDPROC.cbl:**  
  - In linkage section and audit record mapping, handle new fields for feed status, error code, and alarm.

### 3.4 Structured Diffs  

#### **A. src/copybook/common/POSREC.cpy**

**Before:**
```cobol
14               10  POS-MARKET-VALUE   PIC S9(13)V9(2) COMP-3.
15               10  POS-CURRENCY       PIC X(03).
```

**After:**
```cobol
14               10  POS-MARKET-VALUE   PIC S9(13)V9(2) COMP-3.
14A              10  POS-REALTIME-PRICE PIC S9(13)V9(6) COMP-3.
14B              10  POS-VALUATION-TIME PIC X(26).
14C              10  POS-PNL            PIC S9(13)V9(2) COMP-3.
15               10  POS-CURRENCY       PIC X(03).
```

#### **B. src/copybook/common/AUDITLOG.cpy**

**Before:**
```cobol
27           05  AUD-STATUS           PIC X(4).
```

**After:**
```cobol
27           05  AUD-STATUS           PIC X(4).
27A          05  AUD-FEED-STATUS      PIC X(8).
27B          05  AUD-FEED-ERROR-CODE  PIC X(8).
27C          05  AUD-FEED-ALARM       PIC X(8).
```

#### **C. src/programs/batch/POSUPDT.cbl**

**Before (Lines 83-84):**
```cobol
83              COMPUTE POS-MARKET-VALUE = POS-QUANTITY * 100.00
84              MOVE FUNCTION CURRENT-DATE TO POS-LAST-MAINT-DATE
```

**After:**
```cobol
83A             * Fetch real-time price (pseudo-call)
83B             CALL 'GET-REALTIME-PRICE' USING POS-INVESTMENT-ID
83C                 RETURNING POS-REALTIME-PRICE
83D             IF POS-REALTIME-PRICE > 0
83E                 COMPUTE POS-MARKET-VALUE = POS-QUANTITY * POS-REALTIME-PRICE
83F                 MOVE FUNCTION CURRENT-DATE TO POS-VALUATION-TIME
83G                 COMPUTE POS-PNL = POS-MARKET-VALUE - POS-COST-BASIS
83H                 MOVE 'OK' TO AUD-FEED-STATUS
83I                 MOVE SPACES TO AUD-FEED-ERROR-CODE
83J                 MOVE SPACES TO AUD-FEED-ALARM
83K             ELSE
83L                 MOVE 'FAIL' TO AUD-FEED-STATUS
83M                 MOVE 'NO_PRICE' TO AUD-FEED-ERROR-CODE
83N                 MOVE 'ALARM' TO AUD-FEED-ALARM
83O                 ADD 1 TO WS-ERROR-COUNT
83P             END-IF
84              MOVE FUNCTION CURRENT-DATE TO POS-LAST-MAINT-DATE
```

**Before (Lines 95-99):**
```cobol
95          MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
96          MOVE 'POSUPDT'          TO AUD-PROGRAM
97          MOVE 'TRAN'             TO AUD-TYPE
98          MOVE 'UPDATE  '         TO AUD-ACTION
99          MOVE 'SUCC'             TO AUD-STATUS
```

**After:**
```cobol
95          MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
96          MOVE 'POSUPDT'          TO AUD-PROGRAM
97          MOVE 'TRAN'             TO AUD-TYPE
98          MOVE 'UPDATE  '         TO AUD-ACTION
99          MOVE AUD-FEED-STATUS    TO AUD-FEED-STATUS
99A         MOVE AUD-FEED-ERROR-CODE TO AUD-FEED-ERROR-CODE
99B         MOVE AUD-FEED-ALARM     TO AUD-FEED-ALARM
99C         IF AUD-FEED-STATUS = 'OK'
99D             MOVE 'SUCC'         TO AUD-STATUS
99E         ELSE
99F             MOVE 'FAIL'         TO AUD-STATUS
99G         END-IF
```

#### **D. src/programs/common/AUDPROC.cbl**

**Before (Lines 34-48):**
```cobol
34      01  LS-AUDIT-REQUEST.
35          05  LS-SYSTEM-INFO.
...
42          05  LS-STATUS          PIC X(4).
...
```

**After:**
```cobol
34      01  LS-AUDIT-REQUEST.
35          05  LS-SYSTEM-INFO.
...
42          05  LS-STATUS          PIC X(4).
42A         05  LS-FEED-STATUS     PIC X(8).
42B         05  LS-FEED-ERROR-CODE PIC X(8).
42C         05  LS-FEED-ALARM      PIC X(8).
...
```

**Before (Lines 77-78):**
```cobol
77          MOVE LS-ACTION          TO AUD-ACTION
78          MOVE LS-STATUS          TO AUD-STATUS
```

**After:**
```cobol
77          MOVE LS-ACTION          TO AUD-ACTION
78          MOVE LS-STATUS          TO AUD-STATUS
78A         MOVE LS-FEED-STATUS     TO AUD-FEED-STATUS
78B         MOVE LS-FEED-ERROR-CODE TO AUD-FEED-ERROR-CODE
78C         MOVE LS-FEED-ALARM      TO AUD-FEED-ALARM
```

## 4. Conclusion  
The proposed changes enable the COBOL application to ingest real-time market prices, dynamically recalculate portfolio valuations, and persist new valuation and audit fields. Enhanced audit logging and error handling ensure robust monitoring of feed integration and data quality. These modifications modernize the legacy system, improve transparency, and support future extensibility for real-time financial processing.

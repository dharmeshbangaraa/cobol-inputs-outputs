Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the user story: **Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates**.  
It details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide seamless integration of the new functionality. The document is intended for developers, testers, and architects involved in the modernization and maintenance of the legacy system.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The COBOL application is a critical component of the organization's legacy system, responsible for managing and updating investment portfolios. The impacted modules handle portfolio updates, transaction processing, batch price feed ingestion, audit logging, and maintain the shared portfolio data structure.  
The application follows a modular structure with clear separation of initialization, processing, and termination logic.

### 2.2 Detailed Logic  

#### 2.2.1 `src/programs/portfolio/PORTUPDT.cbl`  
- **1000-INITIALIZE (Lines 56–69):**  
  Initializes working storage, opens the portfolio and update files, and handles file open errors.
- **2000-PROCESS (Lines 71–77):**  
  Reads records from the update file and triggers the update process for each record.
- **2100-PROCESS-UPDATE (Lines 79–89):**  
  Locates the portfolio record to update; if found, proceeds to apply the update.
- **2200-APPLY-UPDATE (Lines 91–108):**  
  Applies the update based on the type (status, name, value), rewrites the record, and handles success or failure.

#### 2.2.2 `src/programs/portfolio/PORTTRAN.cbl`  
- **1000-INITIALIZE (Lines 38–56):**  
  Initializes status and counters, opens transaction and portfolio files, and handles errors.
- **2000-PROCESS-TRANSACTIONS (Lines 58–66):**  
  Reads transaction records and triggers validation for each.
- **2100-VALIDATE-TRANSACTION (Lines 68–87):**  
  Validates the transaction by checking the portfolio, transaction type, and amounts; processes or logs errors accordingly.

#### 2.2.3 `src/programs/batch/RCVPRC00.cbl`  
- **1000-INITIALIZE-RECOVERY (Lines 54–58):**  
  Opens files, validates the request, and sets recovery mode.
- **2000-PROCESS-RECOVERY (Lines 60–67):**  
  Determines the recovery mode and invokes the appropriate recovery process.
- **2100-RECOVER-PROCESS (Lines 87–101):**  
  Reads batch control records, determines the required action, and executes recovery.

#### 2.2.4 `src/programs/batch/RPTAUD00.cbl`  
- **1000-INITIALIZE (Lines 44–47):**  
  Opens files and writes report headers.
- **2000-PROCESS-REPORT (Lines 49–53):**  
  Processes the audit trail, error log, and writes summary.
- **9999-ERROR-HANDLER (Lines 67–71):**  
  Displays error messages and terminates the program.

#### 2.2.5 `src/copybook/common/PORTFLIO.cpy`  
Defines the portfolio record structure, including keys, client info, portfolio info, financial info, audit info, and filler.

---

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    InitPORTUPDT["PORTUPDT.cbl:
1000-INITIALIZE"]
    ProcessPORTUPDT["PORTUPDT.cbl:
2000-PROCESS"]
    ProcUpdatePORTUPDT["PORTUPDT.cbl:
2100-PROCESS-UPDATE"]
    ApplyUpdatePORTUPDT["PORTUPDT.cbl:
2200-APPLY-UPDATE"]

    InitPORTTRAN["PORTTRAN.cbl:
1000-INITIALIZE"]
    ProcTransPORTTRAN["PORTTRAN.cbl:
2000-PROCESS-TRANSACTIONS"]
    ValidateTransPORTTRAN["PORTTRAN.cbl:
2100-VALIDATE-TRANSACTION"]

    InitRCVPRC00["RCVPRC00.cbl:
1000-INITIALIZE-RECOVERY"]
    ProcRecRCVPRC00["RCVPRC00.cbl:
2000-PROCESS-RECOVERY"]
    RecoverProcRCVPRC00["RCVPRC00.cbl:
2100-RECOVER-PROCESS"]

    InitRPTAUD00["RPTAUD00.cbl:
1000-INITIALIZE"]
    ProcReportRPTAUD00["RPTAUD00.cbl:
2000-PROCESS-REPORT"]
    ErrorHandlerRPTAUD00["RPTAUD00.cbl:
9999-ERROR-HANDLER"]

    PORTFLIO["PORTFLIO.cpy:
Portfolio Data Structure"]

    Start --> InitPORTUPDT
    InitPORTUPDT --> ProcessPORTUPDT
    ProcessPORTUPDT --> ProcUpdatePORTUPDT
    ProcUpdatePORTUPDT --> ApplyUpdatePORTUPDT

    Start --> InitPORTTRAN
    InitPORTTRAN --> ProcTransPORTTRAN
    ProcTransPORTTRAN --> ValidateTransPORTTRAN

    Start --> InitRCVPRC00
    InitRCVPRC00 --> ProcRecRCVPRC00
    ProcRecRCVPRC00 --> RecoverProcRCVPRC00

    Start --> InitRPTAUD00
    InitRPTAUD00 --> ProcReportRPTAUD00
    ProcReportRPTAUD00 --> ErrorHandlerRPTAUD00

    ApplyUpdatePORTUPDT --> PORTFLIO
    ValidateTransPORTTRAN --> PORTFLIO
    RecoverProcRCVPRC00 --> PORTFLIO

    ApplyUpdatePORTUPDT --> ProcReportRPTAUD00
    RecoverProcRCVPRC00 --> ProcReportRPTAUD00
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
- Integrate real-time price feed ingestion.
- Dynamically update portfolio valuations.
- Enhance error handling and audit logging.
- Update batch/database processing to support real-time updates.

---

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:

| File Path                                 | Sections/Paragraphs Impacted                                  |
|--------------------------------------------|--------------------------------------------------------------|
| src/programs/portfolio/PORTUPDT.cbl        | 1000-INITIALIZE, 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE |
| src/programs/portfolio/PORTTRAN.cbl        | 1000-INITIALIZE, 2000-PROCESS-TRANSACTIONS, 2100-VALIDATE-TRANSACTION |
| src/programs/batch/RCVPRC00.cbl            | 1000-INITIALIZE-RECOVERY, 2000-PROCESS-RECOVERY, 2100-RECOVER-PROCESS |
| src/programs/batch/RPTAUD00.cbl            | 1000-INITIALIZE, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER     |
| src/copybook/common/PORTFLIO.cpy           | Entire file (data structure)                                 |

- **Purpose of Changes:**  
  To enable the system to ingest real-time market price feeds, update portfolio valuations dynamically, log all valuation and error events, and ensure all data structures support new price/time fields and historical records.

- **Impact:**  
  - Real-time data ingestion and processing.
  - Dynamic recalculation of portfolio values.
  - Enhanced error handling and audit logging.
  - Data structure changes for new fields and historical tracking.
  - Changes affect both online and batch processing modules.

---

### 3.3 Insertion Points  

- **PORTUPDT.cbl:**  
  - Add logic in `1000-INITIALIZE` to initialize real-time feed connection.
  - Update `2000-PROCESS` to handle real-time feed events in addition to file reads.
  - Enhance `2100-PROCESS-UPDATE` and `2200-APPLY-UPDATE` to process real-time price updates and recalculate valuations.

- **PORTTRAN.cbl:**  
  - Update `1000-INITIALIZE` to ensure readiness for real-time valuation triggers.
  - Modify `2000-PROCESS-TRANSACTIONS` and `2100-VALIDATE-TRANSACTION` to trigger valuation recalculation on price update.

- **RCVPRC00.cbl:**  
  - Add logic in `1000-INITIALIZE-RECOVERY` to initialize real-time feed recovery.
  - Update `2000-PROCESS-RECOVERY` and `2100-RECOVER-PROCESS` to process real-time price feed events.

- **RPTAUD00.cbl:**  
  - Enhance `1000-INITIALIZE` and `2000-PROCESS-REPORT` to log and report real-time price feed and valuation events.
  - Update `9999-ERROR-HANDLER` to handle real-time feed errors.

- **PORTFLIO.cpy:**  
  - Add new fields for latest price, price timestamp, and historical price records.

---

### 3.4 Structured Diffs  

#### **src/programs/portfolio/PORTUPDT.cbl**

**Before:**  
```cobol
  1000-INITIALIZE.
      INITIALIZE WS-WORK-AREAS

      OPEN I-O   PORTFOLIO-FILE
      OPEN INPUT UPDATE-FILE

      IF NOT WS-SUCCESS-STATUS OR 
         NOT WS-UPDT-SUCCESS
         DISPLAY 'Error opening files: ' 
                 'PORT=' WS-FILE-STATUS
                 'UPDT=' WS-UPDT-STATUS
         MOVE WS-ERROR TO WS-RETURN-CODE
         PERFORM 3000-TERMINATE
      END-IF
      .
```

**After:**  
```cobol
  1000-INITIALIZE.
      INITIALIZE WS-WORK-AREAS

      OPEN I-O   PORTFOLIO-FILE
      OPEN INPUT UPDATE-FILE

      * Initialize real-time price feed connection
      PERFORM 1050-INIT-REALTIME-FEED

      IF NOT WS-SUCCESS-STATUS OR 
         NOT WS-UPDT-SUCCESS
         DISPLAY 'Error opening files: ' 
                 'PORT=' WS-FILE-STATUS
                 'UPDT=' WS-UPDT-STATUS
         MOVE WS-ERROR TO WS-RETURN-CODE
         PERFORM 3000-TERMINATE
      END-IF
      .
```

---

**Before:**  
```cobol
  2000-PROCESS.
      READ UPDATE-FILE
          AT END
              SET END-OF-FILE TO TRUE
          NOT AT END
              PERFORM 2100-PROCESS-UPDATE
      END-READ
      .
```

**After:**  
```cobol
  2000-PROCESS.
      PERFORM 2010-PROCESS-REALTIME-FEED

      READ UPDATE-FILE
          AT END
              SET END-OF-FILE TO TRUE
          NOT AT END
              PERFORM 2100-PROCESS-UPDATE
      END-READ
      .
```

---

**Before:**  
```cobol
  2100-PROCESS-UPDATE.
      MOVE UPDT-KEY TO PORT-KEY

      READ PORTFOLIO-FILE

      IF WS-SUCCESS-STATUS
          PERFORM 2200-APPLY-UPDATE
      ELSE
          ADD 1 TO WS-ERROR-COUNT
          DISPLAY 'Record not found: ' PORT-KEY
      END-IF
      .
```

**After:**  
```cobol
  2100-PROCESS-UPDATE.
      MOVE UPDT-KEY TO PORT-KEY

      READ PORTFOLIO-FILE

      IF WS-SUCCESS-STATUS
          IF UPDT-TYPE = 'PRICE'
              PERFORM 2210-APPLY-REALTIME-PRICE
          ELSE
              PERFORM 2200-APPLY-UPDATE
          END-IF
      ELSE
          ADD 1 TO WS-ERROR-COUNT
          DISPLAY 'Record not found: ' PORT-KEY
      END-IF
      .
```

---

**Before:**  
```cobol
  2200-APPLY-UPDATE.
      EVALUATE TRUE
          WHEN UPDT-STATUS
              MOVE UPDT-NEW-VALUE TO PORT-STATUS
          WHEN UPDT-NAME
              MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
          WHEN UPDT-VALUE
              MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
              MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
      END-EVALUATE

      REWRITE PORT-RECORD

      IF WS-SUCCESS-STATUS
          ADD 1 TO WS-UPDATE-COUNT
      ELSE
          ADD 1 TO WS-ERROR-COUNT
          DISPLAY 'Update failed for: ' PORT-KEY
      END-IF
      .
```

**After:**  
```cobol
  2200-APPLY-UPDATE.
      EVALUATE TRUE
          WHEN UPDT-STATUS
              MOVE UPDT-NEW-VALUE TO PORT-STATUS
          WHEN UPDT-NAME
              MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
          WHEN UPDT-VALUE
              MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
              MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
      END-EVALUATE

      REWRITE PORT-RECORD

      * Log valuation event
      PERFORM 2500-LOG-VALUATION-EVENT

      IF WS-SUCCESS-STATUS
          ADD 1 TO WS-UPDATE-COUNT
      ELSE
          ADD 1 TO WS-ERROR-COUNT
          DISPLAY 'Update failed for: ' PORT-KEY
      END-IF
      .
```

---

#### **src/programs/portfolio/PORTTRAN.cbl**

**Before:**  
```cobol
  1000-INITIALIZE.
      INITIALIZE WS-FILE-STATUS
                 WS-COUNTERS
      SET MORE-RECORDS TO TRUE

      OPEN INPUT TRANSACTION-FILE
      IF WS-TRAN-STATUS NOT = '00'
          MOVE 'Error opening transaction file' TO ERR-TEXT
          PERFORM 9000-ERROR-ROUTINE
      END-IF

      OPEN I-O PORTFOLIO-FILE
      IF WS-PORT-STATUS NOT = '00'
          MOVE 'Error opening portfolio file' TO ERR-TEXT
          PERFORM 9000-ERROR-ROUTINE
      END-IF
      .
```

**After:**  
```cobol
  1000-INITIALIZE.
      INITIALIZE WS-FILE-STATUS
                 WS-COUNTERS
      SET MORE-RECORDS TO TRUE

      * Prepare for real-time valuation triggers
      PERFORM 1050-INIT-REALTIME-VALUATION

      OPEN INPUT TRANSACTION-FILE
      IF WS-TRAN-STATUS NOT = '00'
          MOVE 'Error opening transaction file' TO ERR-TEXT
          PERFORM 9000-ERROR-ROUTINE
      END-IF

      OPEN I-O PORTFOLIO-FILE
      IF WS-PORT-STATUS NOT = '00'
          MOVE 'Error opening portfolio file' TO ERR-TEXT
          PERFORM 9000-ERROR-ROUTINE
      END-IF
      .
```

---

**Before:**  
```cobol
  2000-PROCESS-TRANSACTIONS.
      READ TRANSACTION-FILE
          AT END
              SET END-OF-FILE TO TRUE
          NOT AT END
              ADD 1 TO WS-READ-COUNT
              PERFORM 2100-VALIDATE-TRANSACTION
      END-READ
      .
```

**After:**  
```cobol
  2000-PROCESS-TRANSACTIONS.
      PERFORM 2010-PROCESS-REALTIME-VALUATION

      READ TRANSACTION-FILE
          AT END
              SET END-OF-FILE TO TRUE
          NOT AT END
              ADD 1 TO WS-READ-COUNT
              PERFORM 2100-VALIDATE-TRANSACTION
      END-READ
      .
```

---

**Before:**  
```cobol
  2100-VALIDATE-TRANSACTION.
      MOVE SPACES TO ERR-TEXT

      PERFORM 2110-CHECK-PORTFOLIO
      IF ERR-TEXT = SPACES
          PERFORM 2120-CHECK-TRANSACTION-TYPE
      END-IF
      IF ERR-TEXT = SPACES
          PERFORM 2130-CHECK-AMOUNTS
      END-IF

      IF ERR-TEXT = SPACES
          ADD 1 TO WS-PROCESS-COUNT
      ELSE
          PERFORM 9000-ERROR-ROUTINE
      END-IF
      .
```

**After:**  
```cobol
  2100-VALIDATE-TRANSACTION.
      MOVE SPACES TO ERR-TEXT

      PERFORM 2110-CHECK-PORTFOLIO
      IF ERR-TEXT = SPACES
          PERFORM 2120-CHECK-TRANSACTION-TYPE
      END-IF
      IF ERR-TEXT = SPACES
          PERFORM 2130-CHECK-AMOUNTS
      END-IF

      IF ERR-TEXT = SPACES
          * Trigger valuation recalculation if price updated
          PERFORM 2140-TRIGGER-VALUATION-ON-PRICE
          ADD 1 TO WS-PROCESS-COUNT
      ELSE
          PERFORM 9000-ERROR-ROUTINE
      END-IF
      .
```

---

#### **src/programs/batch/RCVPRC00.cbl**

**Before:**  
```cobol
  1000-INITIALIZE-RECOVERY.
      PERFORM 1100-OPEN-FILES
      PERFORM 1200-VALIDATE-REQUEST
      PERFORM 1300-SET-RECOVERY-MODE
      .
```

**After:**  
```cobol
  1000-INITIALIZE-RECOVERY.
      PERFORM 1100-OPEN-FILES
      PERFORM 1200-VALIDATE-REQUEST
      PERFORM 1300-SET-RECOVERY-MODE

      * Initialize real-time price feed recovery
      PERFORM 1400-INIT-REALTIME-FEED-RECOVERY
      .
```

---

**Before:**  
```cobol
  2000-PROCESS-RECOVERY.
      EVALUATE WS-RECOVERY-MODE
          WHEN 'P'
              PERFORM 2100-RECOVER-PROCESS
          WHEN 'S'
              PERFORM 2200-RECOVER-SEQUENCE
          WHEN 'A'
              PERFORM 2300-RECOVER-ALL
      END-EVALUATE
      .
```

**After:**  
```cobol
  2000-PROCESS-RECOVERY.
      PERFORM 2010-PROCESS-REALTIME-FEED-RECOVERY

      EVALUATE WS-RECOVERY-MODE
          WHEN 'P'
              PERFORM 2100-RECOVER-PROCESS
          WHEN 'S'
              PERFORM 2200-RECOVER-SEQUENCE
          WHEN 'A'
              PERFORM 2300-RECOVER-ALL
      END-EVALUATE
      .
```

---

**Before:**  
```cobol
  2100-RECOVER-PROCESS.
      MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
      MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE

      READ BATCH-CONTROL-FILE
          INVALID KEY
              MOVE 'Process record not found' TO ERR-TEXT
              PERFORM 9000-ERROR-ROUTINE
      END-READ

      PERFORM 2110-DETERMINE-ACTION
      PERFORM 2120-EXECUTE-RECOVERY
      .
```

**After:**  
```cobol
  2100-RECOVER-PROCESS.
      MOVE LS-PROCESS-ID   TO BCT-JOB-NAME
      MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE

      READ BATCH-CONTROL-FILE
          INVALID KEY
              MOVE 'Process record not found' TO ERR-TEXT
              PERFORM 9000-ERROR-ROUTINE
      END-READ

      * Process real-time price feed events
      PERFORM 2130-PROCESS-REALTIME-PRICE-FEED

      PERFORM 2110-DETERMINE-ACTION
      PERFORM 2120-EXECUTE-RECOVERY
      .
```

---

#### **src/programs/batch/RPTAUD00.cbl**

**Before:**  
```cobol
  1000-INITIALIZE.
      PERFORM 1100-OPEN-FILES
      PERFORM 1200-WRITE-HEADERS.
```

**After:**  
```cobol
  1000-INITIALIZE.
      PERFORM 1100-OPEN-FILES
      PERFORM 1200-WRITE-HEADERS

      * Initialize audit logging for real-time price feed events
      PERFORM 1300-INIT-REALTIME-AUDIT.
```

---

**Before:**  
```cobol
  2000-PROCESS-REPORT.
      PERFORM 2100-PROCESS-AUDIT-TRAIL
      PERFORM 2200-PROCESS-ERROR-LOG
      PERFORM 2300-WRITE-SUMMARY.
```

**After:**  
```cobol
  2000-PROCESS-REPORT.
      PERFORM 2100-PROCESS-AUDIT-TRAIL
      PERFORM 2200-PROCESS-ERROR-LOG
      PERFORM 2300-WRITE-SUMMARY

      * Report real-time price feed and valuation events
      PERFORM 2400-REPORT-REALTIME-EVENTS.
```

---

**Before:**  
```cobol
  9999-ERROR-HANDLER.
      DISPLAY WS-ERROR-MESSAGE
      MOVE 12 TO RETURN-CODE
      GOBACK.
```

**After:**  
```cobol
  9999-ERROR-HANDLER.
      DISPLAY WS-ERROR-MESSAGE

      * Log real-time feed error if applicable
      PERFORM 9900-LOG-REALTIME-FEED-ERROR

      MOVE 12 TO RETURN-CODE
      GOBACK.
```

---

#### **src/copybook/common/PORTFLIO.cpy**

**Before:**  
```cobol
  01  PORT-RECORD.
      05  PORT-KEY.
          10  PORT-ID             PIC X(8).
          10  PORT-ACCOUNT-NO     PIC X(10).
      05  PORT-CLIENT-INFO.
          10  PORT-CLIENT-NAME    PIC X(30).
          10  PORT-CLIENT-TYPE    PIC X(1).
              88  PORT-INDIVIDUAL    VALUE 'I'.
              88  PORT-CORPORATE     VALUE 'C'.
              88  PORT-TRUST         VALUE 'T'.
      05  PORT-PORTFOLIO-INFO.
          10  PORT-CREATE-DATE    PIC 9(8).
          10  PORT-LAST-MAINT     PIC 9(8).
          10  PORT-STATUS         PIC X(1).
              88  PORT-ACTIVE       VALUE 'A'.
              88  PORT-CLOSED       VALUE 'C'.
              88  PORT-SUSPENDED    VALUE 'S'.
      05  PORT-FINANCIAL-INFO.
          10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
          10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
      05  PORT-AUDIT-INFO.
          10  PORT-LAST-USER      PIC X(8).
          10  PORT-LAST-TRANS     PIC 9(8).
      05  PORT-FILLER            PIC X(50).
```

**After:**  
```cobol
  01  PORT-RECORD.
      05  PORT-KEY.
          10  PORT-ID             PIC X(8).
          10  PORT-ACCOUNT-NO     PIC X(10).
      05  PORT-CLIENT-INFO.
          10  PORT-CLIENT-NAME    PIC X(30).
          10  PORT-CLIENT-TYPE    PIC X(1).
              88  PORT-INDIVIDUAL    VALUE 'I'.
              88  PORT-CORPORATE     VALUE 'C'.
              88  PORT-TRUST         VALUE 'T'.
      05  PORT-PORTFOLIO-INFO.
          10  PORT-CREATE-DATE    PIC 9(8).
          10  PORT-LAST-MAINT     PIC 9(8).
          10  PORT-STATUS         PIC X(1).
              88  PORT-ACTIVE       VALUE 'A'.
              88  PORT-CLOSED       VALUE 'C'.
              88  PORT-SUSPENDED    VALUE 'S'.
      05  PORT-FINANCIAL-INFO.
          10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
          10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
          10  PORT-LAST-PRICE     PIC S9(9)V99 COMP-3.
          10  PORT-PRICE-TIMESTAMP PIC 9(14).
          10  PORT-PRICE-HISTORY  OCCURS 10 TIMES.
              15  PORT-HIST-PRICE     PIC S9(9)V99 COMP-3.
              15  PORT-HIST-TIMESTAMP PIC 9(14).
      05  PORT-AUDIT-INFO.
          10  PORT-LAST-USER      PIC X(8).
          10  PORT-LAST-TRANS     PIC 9(8).
      05  PORT-FILLER            PIC X(50).
```

---

## 4. Conclusion  
The proposed changes enable real-time market price feed integration, dynamic portfolio valuation updates, robust error handling, and comprehensive audit logging. The data structure enhancements support new price/time fields and historical records, ensuring the system is future-proof and compliant with modern business requirements. These modifications will improve the accuracy, timeliness, and auditability of portfolio management operations.

Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the addition of a new `CHANNEL-CODE` field to the transaction file. The purpose of this document is to facilitate accurate implementation, review, and testing of the required changes, ensuring continued integrity and maintainability of the system.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data through a set of batch, utility, and test programs. The transaction record structure is centrally defined in a copybook (`TRNREC.cpy`), which is included by all programs that read, write, or validate transaction files. The main modules perform the following:

- **Batch Reporting (`RPTPOS00.cbl`)**: Generates daily position reports by reading transaction and position files.
- **Validation Utility (`UTLVAL00.cbl`)**: Performs data integrity, cross-reference, format, and balance checks on transaction and position files.
- **Test Data Generator (`TSTGEN00.cbl`)**: Produces test transaction and portfolio data for system testing.
- **Test Validation Suite (`TSTVAL00.cbl`)**: Validates test results and system behavior against expected outcomes.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`TRNREC.cpy`)
- Defines the canonical layout for all transaction data.
- Key fields include transaction date, time, portfolio ID, investment ID, type, quantity, price, amount, currency, status, audit info, and a filler.

#### Batch Reporting (`RPTPOS00.cbl`)
- **Initialization (Lines 0000-1000)**: Opens files, writes report headers.
- **Main Processing (Lines 2000-2300)**: Reads position and transaction records, formats and summarizes data, writes report details.
- **Termination (Line 3000)**: Closes all files and handles errors.

#### Validation Utility (`UTLVAL00.cbl`)
- **Initialization (Lines 0000-1000)**: Opens validation control, position, transaction, and error report files.
- **Processing (Lines 2000-2500)**: Reads validation control records, dispatches to integrity, cross-reference, format, and balance checks.
- **Termination (Line 3000)**: Closes all files and writes error records.

#### Test Data Generator (`TSTGEN00.cbl`)
- **Initialization (Lines 0000-1300)**: Opens config, output, and random seed files; initializes counters.
- **Processing (Lines 2000-2500)**: Reads config, generates portfolio/transaction/error/volume test data, writes records.
- **Termination (Line 3000)**: Closes all files and handles errors.

#### Test Validation Suite (`TSTVAL00.cbl`)
- **Initialization (Lines 0000-1300)**: Opens test case, expected, actual, and report files; writes headers.
- **Processing (Lines 2000-2900)**: Reads test cases, executes tests, validates results, updates metrics, writes details and summary.
- **Termination (Line 3000)**: Closes all files and handles errors.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["Initialization:
Open Files,
Set Up Headers"]
    Process["Main Processing:
Read/Write
Transaction Records"]
    Validate["Validation:
Integrity, XRef,
Format, Balance"]
    TestGen["Test Data Generation:
Portfolio/Transaction/Error/Volume"]
    TestVal["Test Validation:
Execute, Validate,
Report"]
    Terminate["Termination:
Close Files,
Cleanup"]
    End(["End"])

    Start --> Init
    Init --> Process
    Process --> Validate
    Validate --> TestGen
    TestGen --> TestVal
    TestVal --> Terminate
    Terminate --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- The new field will enable identification of the transaction's originating channel (e.g., ONLINE, BRANCH, ATM) for improved reporting and validation.
- All programs and copybooks that define, read, write, or report on transaction data must be updated for the new field.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy** (copybook structure)
- **src/programs/batch/RPTPOS00.cbl** (1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS)
- **src/programs/utility/UTLVAL00.cbl** (1100-OPEN-FILES, 2100-PROCESS-VALIDATION)
- **src/programs/test/TSTGEN00.cbl** (1100-OPEN-FILES, 2300-GEN-TRANSACTION)
- **src/programs/test/TSTVAL00.cbl** (1100-OPEN-FILES, 2000-PROCESS)

**Purpose of Changes:**  
To introduce the `CHANNEL-CODE` field into the transaction record structure and ensure all relevant programs can read, write, validate, and report on this new field.

**Impact:**  
- All transaction-processing programs will now handle an additional field, requiring updates to file layouts, record lengths, and logic for reading/writing/validating the new field.
- Test data and validation logic must be updated to include and check the `CHANNEL-CODE`.

### 3.3 Insertion Points  
- **TRNREC.cpy**: Add `CHANNEL-CODE` field to the transaction record structure, ideally after `TRN-CURRENCY` for logical grouping.
- **RPTPOS00.cbl**: Update file section and logic in 1100-OPEN-FILES and 2200-PROCESS-TRANSACTIONS to handle the new field.
- **UTLVAL00.cbl**: Update file section and validation logic in 1100-OPEN-FILES and 2100-PROCESS-VALIDATION to include `CHANNEL-CODE`.
- **TSTGEN00.cbl**: Update file section and test data generation logic in 1100-OPEN-FILES and 2300-GEN-TRANSACTION to generate and write `CHANNEL-CODE`.
- **TSTVAL00.cbl**: Update file section and validation logic in 1100-OPEN-FILES and 2000-PROCESS to validate `CHANNEL-CODE` in test data.

### 3.4 Structured Diffs  

#### **src/copybook/common/TRNREC.cpy**

**Before:**
```cobol
     05  TRN-DATA.
         10  TRN-INVESTMENT-ID  PIC X(10).
         10  TRN-TYPE           PIC X(02).
             88  TRN-TYPE-BUY     VALUE 'BU'.
             88  TRN-TYPE-SELL    VALUE 'SL'.
             88  TRN-TYPE-TRANS   VALUE 'TR'.
             88  TRN-TYPE-FEE     VALUE 'FE'.
         10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
         10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
         10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
         10  TRN-CURRENCY      PIC X(03).
         10  TRN-STATUS        PIC X(01).
             88  TRN-STATUS-PEND   VALUE 'P'.
             88  TRN-STATUS-DONE   VALUE 'D'.
             88  TRN-STATUS-FAIL   VALUE 'F'.
             88  TRN-STATUS-REV    VALUE 'R'.
```

**After:**
```cobol
     05  TRN-DATA.
         10  TRN-INVESTMENT-ID  PIC X(10).
         10  TRN-TYPE           PIC X(02).
             88  TRN-TYPE-BUY     VALUE 'BU'.
             88  TRN-TYPE-SELL    VALUE 'SL'.
             88  TRN-TYPE-TRANS   VALUE 'TR'.
             88  TRN-TYPE-FEE     VALUE 'FE'.
         10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
         10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
         10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
         10  TRN-CURRENCY      PIC X(03).
         10  TRN-CHANNEL-CODE  PIC X(06).
         10  TRN-STATUS        PIC X(01).
             88  TRN-STATUS-PEND   VALUE 'P'.
             88  TRN-STATUS-DONE   VALUE 'D'.
             88  TRN-STATUS-FAIL   VALUE 'F'.
             88  TRN-STATUS-REV    VALUE 'R'.
```
*(Add a comment describing valid values, e.g., 'ONLINE', 'BRANCH', 'ATM', etc.)*

---

#### **src/programs/batch/RPTPOS00.cbl**

**Before (File Section):**
```cobol
    COPY TRNREC.
```

**After (File Section):**
```cobol
    COPY TRNREC.
    * Now includes TRN-CHANNEL-CODE field for channel identification
```

**Before (2200-PROCESS-TRANSACTIONS and related logic):**
```cobol
2200-PROCESS-TRANSACTIONS.
    PERFORM 2210-READ-TRANSACTIONS
    PERFORM 2220-SUMMARIZE-ACTIVITY.
```

**After (2200-PROCESS-TRANSACTIONS and related logic):**
```cobol
2200-PROCESS-TRANSACTIONS.
    PERFORM 2210-READ-TRANSACTIONS
    PERFORM 2220-SUMMARIZE-ACTIVITY.

* In 2210-READ-TRANSACTIONS and/or 2220-SUMMARIZE-ACTIVITY, add logic to:
* - Read TRN-CHANNEL-CODE from each transaction record
* - Summarize/report by channel if required
```

---

#### **src/programs/utility/UTLVAL00.cbl**

**Before (File Section):**
```cobol
    COPY TRNREC.
```

**After (File Section):**
```cobol
    COPY TRNREC.
    * Now includes TRN-CHANNEL-CODE field for channel identification
```

**Before (2100-PROCESS-VALIDATION and related logic):**
```cobol
2100-PROCESS-VALIDATION.
    EVALUATE VAL-TYPE
        WHEN WS-INTEGRITY
            PERFORM 2200-CHECK-INTEGRITY
        WHEN WS-XREF
            PERFORM 2300-CHECK-XREF
        WHEN WS-FORMAT
            PERFORM 2400-CHECK-FORMAT
        WHEN WS-BALANCE
            PERFORM 2500-CHECK-BALANCE
        WHEN OTHER
            MOVE 'INVALID VALIDATION TYPE'
              TO WS-ERROR-MESSAGE
            PERFORM 9999-ERROR-HANDLER
    END-EVALUATE.
```

**After (2100-PROCESS-VALIDATION and related logic):**
```cobol
2100-PROCESS-VALIDATION.
    EVALUATE VAL-TYPE
        WHEN WS-INTEGRITY
            PERFORM 2200-CHECK-INTEGRITY
        WHEN WS-XREF
            PERFORM 2300-CHECK-XREF
        WHEN WS-FORMAT
            PERFORM 2400-CHECK-FORMAT
        WHEN WS-BALANCE
            PERFORM 2500-CHECK-BALANCE
        WHEN OTHER
            MOVE 'INVALID VALIDATION TYPE'
              TO WS-ERROR-MESSAGE
            PERFORM 9999-ERROR-HANDLER
    END-EVALUATE.

* In 2220-CHECK-TRANSACTION-INTEGRITY and 2420-CHECK-TRANSACTION-FORMAT,
* add validation for TRN-CHANNEL-CODE (e.g., not spaces, valid value)
```

---

#### **src/programs/test/TSTGEN00.cbl**

**Before (File Section):**
```cobol
01  TRANSACTION-RECORD.
    COPY TRNREC REPLACING ==:PREFIX:== BY ==TRAN==.
```

**After (File Section):**
```cobol
01  TRANSACTION-RECORD.
    COPY TRNREC REPLACING ==:PREFIX:== BY ==TRAN==.
    * Now includes TRN-CHANNEL-CODE field for channel identification
```

**Before (2300-GEN-TRANSACTION and related logic):**
```cobol
2300-GEN-TRANSACTION.
    PERFORM VARYING WS-RECORDS-WRITTEN FROM 1 BY 1
            UNTIL WS-RECORDS-WRITTEN > CFG-VOLUME
        PERFORM 2310-GEN-TRAN-DATA
        PERFORM 2320-WRITE-TRAN-RECORD
    END-PERFORM.
```

**After (2300-GEN-TRANSACTION and related logic):**
```cobol
2300-GEN-TRANSACTION.
    PERFORM VARYING WS-RECORDS-WRITTEN FROM 1 BY 1
            UNTIL WS-RECORDS-WRITTEN > CFG-VOLUME
        PERFORM 2310-GEN-TRAN-DATA
        MOVE 'ONLINE' TO TRN-CHANNEL-CODE
        * Or randomize among 'ONLINE', 'BRANCH', 'ATM', etc.
        PERFORM 2320-WRITE-TRAN-RECORD
    END-PERFORM.
```

---

#### **src/programs/test/TSTVAL00.cbl**

**Before (File Section):**
```cobol
    * Transaction file not directly referenced, but validation logic must check for CHANNEL-CODE in test data.
```

**After (File Section):**
```cobol
    * Transaction file not directly referenced, but validation logic must check for CHANNEL-CODE in test data.
    * Update validation routines to check TRN-CHANNEL-CODE is present and valid in test records.
```

**Before (2000-PROCESS and related logic):**
```cobol
2000-PROCESS.
    PERFORM UNTIL END-OF-TESTS
        READ TEST-CASES
            AT END
                SET END-OF-TESTS TO TRUE
            NOT AT END
                PERFORM 2100-EXECUTE-TEST
        END-READ
    END-PERFORM
    PERFORM 2900-WRITE-SUMMARY.
```

**After (2000-PROCESS and related logic):**
```cobol
2000-PROCESS.
    PERFORM UNTIL END-OF-TESTS
        READ TEST-CASES
            AT END
                SET END-OF-TESTS TO TRUE
            NOT AT END
                PERFORM 2100-EXECUTE-TEST
        END-READ
    END-PERFORM
    PERFORM 2900-WRITE-SUMMARY.

* In 2100-EXECUTE-TEST and validation routines,
* add checks to ensure TRN-CHANNEL-CODE is present and valid in test data.
```

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure is a high-impact, high-complexity change that affects all core transaction-processing modules. The proposed changes ensure that all relevant programs can read, write, validate, and report on the new field, enabling enhanced channel-based reporting and validation. The structured diffs and insertion points provided in this document will facilitate accurate and efficient implementation, review, and testing of the required changes.

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical and low-level design overview for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio valuation. The document details the existing logic, identifies insertion points for the required changes, and provides structured diffs and guidance for seamless integration, as per the high-impact analysis report.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application is a batch-driven legacy system responsible for managing and recalculating portfolio positions and P&L based on market data. It interacts with DB2 tables, VSAM files, and CICS screens, and includes robust error and audit logging. The main impacted modules are responsible for sequence management, position updates, price data ingestion, audit logging, historical data loading, and real-time display.

### 2.2 Detailed Logic  

#### 2.2.1 `src/programs/batch/PRCSEQ00.cbl`  
**Purpose:**  
Manages the sequence of batch processes for portfolio recalculation, including initialization, fetching the next process, updating process status, and error handling.

**Key Sections:**  
- **0000-MAIN:** Entry point; dispatches to the appropriate paragraph based on the function code (`INIT`, `NEXT`, `STAT`, `TERM`).
- **1000-INITIALIZE-SEQUENCE:** Opens files, builds the process sequence, and creates control records.
- **2000-GET-NEXT-PROCESS:** Finds the next ready process, checks dependencies, and updates process status.
- **2300-UPDATE-PROCESS-STATUS:** Updates the status and start time of the batch control record for the process.

**Relevant Data Structures:**  
- **PROCESS-SEQ-FILE:** Indexed file for process sequence.
- **BATCH-CONTROL-FILE:** Indexed file for batch control.
- **WS-PROCESS-TABLE:** In-memory table for process tracking.
- **LS-SEQUENCE-REQUEST:** Linkage section for function dispatch.

**Main Flow:**  
- Receives a function code via the linkage section.
- Initializes sequence or fetches the next process as required.
- Updates process status and logs errors if necessary.

**Notable Code Snippet:**  
```cobol
0000-MAIN.
    EVALUATE TRUE
        WHEN FUNC-INIT
            PERFORM 1000-INITIALIZE-SEQUENCE
        WHEN FUNC-NEXT
            PERFORM 2000-GET-NEXT-PROCESS
        WHEN FUNC-STAT
            PERFORM 3000-CHECK-STATUS
        WHEN FUNC-TERM
            PERFORM 4000-TERMINATE-SEQUENCE
        WHEN OTHER
            MOVE 'Invalid function code' TO ERR-TEXT
            PERFORM 9000-ERROR-ROUTINE
    END-EVALUATE
    MOVE LS-RETURN-CODE TO RETURN-CODE
    GOBACK
```

#### 2.2.2 `src/programs/batch/POSUPDT.cbl`  
**Purpose:**  
Handles updates to position records with new valuations and P&L.  
**Status:**  
*File is empty or not present in the repository.*

#### 2.2.3 `src/copybook/db2/PRICEDATA.cpy`  
**Purpose:**  
Defines the DB2 table mapping for incoming real-time price ticks.  
**Status:**  
*File not found in the repository.*

#### 2.2.4 `src/copybook/common/AUDITLOG.cpy`  
**Purpose:**  
Defines the audit log structure for error and stale data event logging.  
**Status:**  
*File not found in the repository.*

#### 2.2.5 `src/programs/common/AUDPROC.cbl`  
**Purpose:**  
Processes audit logs, especially on error or stale feed events.  
**Status:**  
*File not found in the repository.*

#### 2.2.6 `src/programs/batch/HISTLD00.cbl`  
**Purpose:**  
Loads historical price data into the VSAM KSDS (PRICEHIST) for backtesting.  
**Status:**  
*File not found in the repository.*

#### 2.2.7 `src/screens/PORTDFN.csd`  
**Purpose:**  
CICS screen definition for "View Portfolio" with auto-refresh for real-time values.  
**Status:**  
*File not found in the repository.*

---

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    InitSeq["1000-INITIALIZE-SEQUENCE"]
    GetNext["2000-GET-NEXT-PROCESS"]
    UpdateStatus["2300-UPDATE-PROCESS-STATUS"]
    CheckStatus["3000-CHECK-STATUS"]
    TermSeq["4000-TERMINATE-SEQUENCE"]
    ErrorRoutine["9000-ERROR-ROUTINE"]
    End(["End"])

    Start --> InitSeq
    InitSeq --> GetNext
    GetNext --> UpdateStatus
    UpdateStatus --> CheckStatus
    CheckStatus --> TermSeq
    TermSeq --> End
    ErrorRoutine --> End
```

---

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Integrate real-time market price feed for dynamic portfolio valuation.  
- Ingest real-time price ticks.
- Update DB2 and VSAM with new prices.
- Trigger batch recalculation of positions and P&L.
- Refresh CICS “View Portfolio” screen.
- Log audit/error events for feed failures or stale data.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File/Section                                 | Purpose of Changes                                                                 | Impact on System                                                                 |
|----------------------------------------------|------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|
| src/programs/batch/PRCSEQ00.cbl              | Add logic to poll/process real-time price feed, trigger recalculation, log errors  | Enables dynamic recalculation and error/audit logging                            |
| src/programs/batch/POSUPDT.cbl               | Update position records with new prices and P&L                                    | Ensures positions reflect real-time market values                                |
| src/copybook/db2/PRICEDATA.cpy               | Map new DB2 table for real-time price ticks                                        | Centralizes price ingestion for all downstream processes                         |
| src/copybook/common/AUDITLOG.cpy             | Extend audit log structure for new error/stale feed events                         | Enables compliance and troubleshooting                                           |
| src/programs/common/AUDPROC.cbl              | Enhance audit processing for new event types                                       | Ensures all new audit events are processed and reported                          |
| src/programs/batch/HISTLD00.cbl              | Load historical prices into VSAM for backtesting                                   | Supports analytics and validation of new logic                                   |
| src/screens/PORTDFN.csd                      | Auto-refresh and display real-time portfolio values                                | Improves user experience and operational transparency                            |

### 3.3 Insertion Points  
- **PRCSEQ00.cbl**
  - After `1000-INITIALIZE-SEQUENCE`: Insert logic to poll/process new price ticks from `PRICEDATA`.
  - In `2000-GET-NEXT-PROCESS`: Add logic to check for new price data and trigger recalculation.
  - In `2300-UPDATE-PROCESS-STATUS`: Insert audit/error logging for stale/missing price data.
- **POSUPDT.cbl**
  - Main processing loop: Update logic to use latest prices from `PRICEDATA`.
- **PRICEDATA.cpy**
  - Add fields for timestamp, source, and price quality.
- **AUDITLOG.cpy**
  - Add fields for feed status, error codes, and timestamps.
- **AUDPROC.cbl**
  - In `2000-PROCESS-AUDIT`: Add handling for new audit event types.
- **HISTLD00.cbl**
  - In `2000-PROCESS-HISTORICAL`: Add logic to load new historical price formats.
- **PORTDFN.csd**
  - Add auto-refresh and new fields for real-time values.

### 3.4 Structured Diffs  

#### Example: `src/programs/batch/PRCSEQ00.cbl`

**Before:**  
```cobol
1000-INITIALIZE-SEQUENCE.
    PERFORM 1100-OPEN-FILES
    PERFORM 1200-BUILD-SEQUENCE
    PERFORM 1300-CREATE-CONTROL-RECORDS
    .
```

**After:**  
```cobol
1000-INITIALIZE-SEQUENCE.
    PERFORM 1100-OPEN-FILES
    PERFORM 1200-BUILD-SEQUENCE
    PERFORM 1300-CREATE-CONTROL-RECORDS
    PERFORM 1400-INIT-REALTIME-PRICE-FEED
    .
* New paragraph to initialize real-time price feed
1400-INIT-REALTIME-PRICE-FEED.
    CALL 'INIT-PRICEDATA-FEED' USING PRICEDATA-AREA
    IF RETURN-CODE NOT = 0
        MOVE 'Error initializing price feed' TO ERR-TEXT
        PERFORM 9000-ERROR-ROUTINE
    END-IF
    .
```

**Before:**  
```cobol
2000-GET-NEXT-PROCESS.
    PERFORM 2100-FIND-NEXT-READY
    PERFORM 2200-CHECK-DEPENDENCIES
    IF LS-RETURN-CODE = ZERO
        PERFORM 2300-UPDATE-PROCESS-STATUS
    END-IF
    .
```

**After:**  
```cobol
2000-GET-NEXT-PROCESS.
    PERFORM 2100-FIND-NEXT-READY
    PERFORM 2200-CHECK-DEPENDENCIES
    PERFORM 2400-CHECK-REALTIME-PRICE
    IF LS-RETURN-CODE = ZERO
        PERFORM 2300-UPDATE-PROCESS-STATUS
    END-IF
    .
* New paragraph to check for new price data
2400-CHECK-REALTIME-PRICE.
    CALL 'GET-LATEST-PRICEDATA' USING PRICEDATA-AREA
    IF PRICEDATA-STATUS = 'STALE'
        MOVE 'Stale price data' TO AUDIT-EVENT-TYPE
        PERFORM 2500-LOG-AUDIT-EVENT
        MOVE 8 TO LS-RETURN-CODE
    ELSE IF PRICEDATA-STATUS = 'ERROR'
        MOVE 'Feed error' TO AUDIT-EVENT-TYPE
        PERFORM 2500-LOG-AUDIT-EVENT
        MOVE 12 TO LS-RETURN-CODE
    END-IF
    .
```

**Before:**  
```cobol
2300-UPDATE-PROCESS-STATUS.
    MOVE LS-NEXT-PROCESS TO BCT-JOB-NAME
    MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE
    ...
    REWRITE BATCH-CONTROL-RECORD
        INVALID KEY
            MOVE 'Error updating control record' TO ERR-TEXT
            PERFORM 9000-ERROR-ROUTINE
    END-REWRITE
    .
```

**After:**  
```cobol
2300-UPDATE-PROCESS-STATUS.
    MOVE LS-NEXT-PROCESS TO BCT-JOB-NAME
    MOVE LS-PROCESS-DATE TO BCT-PROCESS-DATE
    ...
    REWRITE BATCH-CONTROL-RECORD
        INVALID KEY
            MOVE 'Error updating control record' TO ERR-TEXT
            PERFORM 9000-ERROR-ROUTINE
    END-REWRITE
    PERFORM 2500-LOG-AUDIT-EVENT
    .
* New paragraph for audit logging
2500-LOG-AUDIT-EVENT.
    CALL 'AUDPROC' USING AUDITLOG-AREA
    .
```

---

## 4. Conclusion  
The proposed changes enable the COBOL legacy system to ingest and process real-time market price feeds, dynamically update portfolio valuations, and provide near real-time feedback to users and auditors. The integration points and structured diffs ensure that the enhancements are seamlessly incorporated, with robust error and audit handling to maintain system reliability and compliance.

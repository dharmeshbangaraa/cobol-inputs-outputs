Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically to add the `CHANNEL-CODE` field to the transaction file. This change is critical for enabling channel identification in batch processing and reporting, and impacts core transaction data structures, file layouts, batch processing, reporting, and associated copybooks. The document details the existing logic, the rationale and scope of the change, insertion points, and structured code diffs to guide implementation and review.

---

## 2. Existing Logic and Flow  

### 2.1 Overview  
The COBOL application suite processes business-critical transaction data in a modular fashion. The core transaction record structure is defined in a central copybook (`TRNREC.cpy`), which is included by all programs that read, write, or validate transaction data. The main processing modules include batch reporting (`RPTPOS00.cbl`), validation utilities (`UTLVAL00.cbl`), and test data generators/validators (`TSTGEN00.cbl`, `TSTVAL00.cbl`). Each program follows a structured paradigm with initialization (file open), main processing (transaction handling), and termination (file close/error handling) sections.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- **Lines 1–38:**  
  Defines the canonical transaction record, including keys, transaction data (type, quantity, price, amount, currency, status), audit fields, and filler.

#### Batch Reporting Program (`src/programs/batch/RPTPOS00.cbl`)
- **File Section (Lines 27–31):**  
  Includes the transaction record copybook.
- **1100-OPEN-FILES (Lines 61–81):**  
  Opens all required files for batch processing, including the transaction file.
- **2200-PROCESS-TRANSACTIONS (Lines 117–120):**  
  Main loop for reading and processing transactions, summarizing activity for reporting.

#### Validation Utility (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES (Lines 54–77):**  
  Opens all files needed for validation, including the transaction file.
- **2200-CHECK-INTEGRITY (Lines 102–104):**  
  Performs integrity checks on transaction data, including transaction records.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["Open
Files"]
    ReadTransaction["Read
Transaction Record"]
    ValidateTransaction["Validate
Transaction Data"]
    ProcessTransaction["Process
Transaction (Batch/Utility)"]
    SummarizeOrReport["Summarize/
Report/Write Output"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ReadTransaction
    ReadTransaction --> ValidateTransaction
    ValidateTransaction --> ProcessTransaction
    ProcessTransaction --> SummarizeOrReport
    SummarizeOrReport --> End
```

---

## 3. Proposed Changes  

### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- The `CHANNEL-CODE` field will allow the system to identify the source or channel of each transaction, supporting enhanced reporting and auditability.
- All programs that read, write, or validate transaction data must be updated to include and process the new field.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

- **src/copybook/common/TRNREC.cpy**  
  - *Purpose of Changes:* Add `CHANNEL-CODE` to the transaction record structure.
  - *Impact:* All programs using this copybook will now have access to the new field.

- **src/programs/batch/RPTPOS00.cbl**  
  - *Purpose of Changes:* Update file definitions, processing, and reporting logic to include `CHANNEL-CODE`.
  - *Impact:* Reports can now include channel-based breakdowns.

- **src/programs/utility/UTLVAL00.cbl**  
  - *Purpose of Changes:* Update validation logic to check for presence and correctness of `CHANNEL-CODE`.
  - *Impact:* Ensures data integrity for the new field.

- **src/programs/test/TSTGEN00.cbl**  
  - *Purpose of Changes:* Generate test transaction records with valid `CHANNEL-CODE` values.
  - *Impact:* Test data will reflect the new structure.

- **src/programs/test/TSTVAL00.cbl**  
  - *Purpose of Changes:* Validate test transaction files, including the new field.
  - *Impact:* Test validation logic will ensure correctness of `CHANNEL-CODE`.

---

### 3.3 Insertion Points  

- **TRNREC.cpy:**  
  - Insert `CHANNEL-CODE` as a new field in the transaction record structure, ideally after `TRN-CURRENCY` for logical grouping.
- **RPTPOS00.cbl:**  
  - Update FD (File Description) section to include `CHANNEL-CODE`.
  - Update all logic that reads, writes, or reports on transaction records to handle the new field.
- **UTLVAL00.cbl:**  
  - Update FD section and validation logic (e.g., in `2220-CHECK-TRANSACTION-INTEGRITY`) to check for valid `CHANNEL-CODE`.
- **TSTGEN00.cbl:**  
  - Update record generation logic to populate `CHANNEL-CODE`.
- **TSTVAL00.cbl:**  
  - Update validation logic to check for presence and correctness of `CHANNEL-CODE`.

---

### 3.4 Structured Diffs  

#### 1. `src/copybook/common/TRNREC.cpy`

**Before:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-STATUS        PIC X(01).
```

**After:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-CHANNEL-CODE  PIC X(04).
               10  TRN-STATUS        PIC X(01).
```
*Rationale: `TRN-CHANNEL-CODE` is added after currency for logical grouping. Field length (X(04)) can be adjusted as per requirements.*

---

#### 2. `src/programs/batch/RPTPOS00.cbl`

**Before (FD Section):**
```cobol
       FD  TRANSACTION-HISTORY
           LABEL RECORDS ARE STANDARD
           BLOCK CONTAINS 0 RECORDS
           RECORD CONTAINS 200 CHARACTERS
           DATA RECORD IS TRANSACTION-RECORD.
       COPY TRNREC.
```

**After (FD Section):**
```cobol
       FD  TRANSACTION-HISTORY
           LABEL RECORDS ARE STANDARD
           BLOCK CONTAINS 0 RECORDS
           RECORD CONTAINS 204 CHARACTERS
           DATA RECORD IS TRANSACTION-RECORD.
       COPY TRNREC.
```
*Rationale: Record length increased by 4 to accommodate `CHANNEL-CODE`.*

**Before (Processing/Reporting):**
```cobol
           DISPLAY 'TRANSACTION: ' TRN-DATE ' ' TRN-TYPE ' ' TRN-AMOUNT
```

**After:**
```cobol
           DISPLAY 'TRANSACTION: ' TRN-DATE ' ' TRN-TYPE ' ' TRN-AMOUNT
                   ' CHANNEL: ' TRN-CHANNEL-CODE
```
*Rationale: Include `CHANNEL-CODE` in output/reporting.*

---

#### 3. `src/programs/utility/UTLVAL00.cbl`

**Before (Validation Logic):**
```cobol
       2220-CHECK-TRANSACTION-INTEGRITY.
           IF TRN-TYPE NOT = 'BU' AND
              TRN-TYPE NOT = 'SL' AND
              TRN-TYPE NOT = 'TR' AND
              TRN-TYPE NOT = 'FE'
               MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```

**After:**
```cobol
       2220-CHECK-TRANSACTION-INTEGRITY.
           IF TRN-TYPE NOT = 'BU' AND
              TRN-TYPE NOT = 'SL' AND
              TRN-TYPE NOT = 'TR' AND
              TRN-TYPE NOT = 'FE'
               MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           IF TRN-CHANNEL-CODE = SPACES OR
              TRN-CHANNEL-CODE NOT IN ('BRCH', 'ONLN', 'MOBL', 'IVR')
               MOVE 'INVALID OR MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```
*Rationale: Validates presence and correctness of `CHANNEL-CODE`.*

---

#### 4. `src/programs/test/TSTGEN00.cbl`

**Before (Test Record Generation):**
```cobol
           MOVE 'BU' TO TRN-TYPE
           MOVE 1000 TO TRN-AMOUNT
```

**After:**
```cobol
           MOVE 'BU' TO TRN-TYPE
           MOVE 1000 TO TRN-AMOUNT
           MOVE 'ONLN' TO TRN-CHANNEL-CODE
```
*Rationale: Populates `CHANNEL-CODE` in generated test records.*

---

#### 5. `src/programs/test/TSTVAL00.cbl`

**Before (Test Validation):**
```cobol
           IF TRN-TYPE = SPACES
               MOVE 'MISSING TRANSACTION TYPE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```

**After:**
```cobol
           IF TRN-TYPE = SPACES
               MOVE 'MISSING TRANSACTION TYPE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           IF TRN-CHANNEL-CODE = SPACES
               MOVE 'MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```
*Rationale: Ensures test validation logic checks for the new field.*

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure and all dependent programs enhances the system's ability to track and report on the origin of transactions. This change is high-impact and touches all core transaction-processing modules, requiring careful updates to copybooks, file layouts, processing logic, validation, and test utilities. The structured diffs and detailed insertion points provided in this document will ensure a smooth and accurate implementation, supporting future extensibility and audit requirements.

---

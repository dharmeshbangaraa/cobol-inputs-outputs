## Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL legacy application modules impacted by the integration of a real-time market price feed for dynamic portfolio updates. The document details the existing logic, identifies insertion points for the required changes, and provides structured before-and-after code snippets to guide seamless implementation. The goal is to enable real-time price ingestion, dynamic portfolio valuation, robust error handling, and enhanced audit logging, as outlined in the Impact Analysis Report.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application consists of several interdependent modules responsible for portfolio updates, audit logging, and reporting. The main workflow involves reading update records, applying changes to portfolio data, and logging audit events. The system is structured into initialization, processing, and termination phases, with shared copybooks defining data structures for portfolio and audit records.

### 2.2 Detailed Logic  

#### 2.2.1 Portfolio Update Program (`PORTUPDT.cbl`)
- **Initialization (1000-INITIALIZE):**  
  - Opens the portfolio and update files.
  - Initializes working storage and error counters.
- **Processing (2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE):**  
  - Reads each update record.
  - Locates the corresponding portfolio record.
  - Applies updates based on the action type (status, name, value).
  - Handles errors for missing records or failed updates.
- **Termination (3000-TERMINATE):**  
  - Closes files and displays summary statistics.

#### 2.2.2 Portfolio Data Structure (`PORTFLIO.cpy`)
- Defines the portfolio master record, including keys, client info, portfolio info, financial info, and audit info.

#### 2.2.3 Audit Report Generator (`RPTAUD00.cbl`)
- **Initialization (1000-INITIALIZE, 1100-OPEN-FILES):**  
  - Opens audit, error, and report files.
  - Handles file open errors.
- **Processing (2000-PROCESS-REPORT):**  
  - Processes audit trails and error logs.
  - Writes summary reports.
- **Error Handling (9999-ERROR-HANDLER):**  
  - Displays error messages and terminates on critical failures.

#### 2.2.4 Audit Log Structure (`AUDITLOG.cpy`)
- Defines the audit record layout, including header, type, action, status, key info, before/after images, and message fields.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE:
Open files,
Init work areas"]
    Process["2000-PROCESS:
Read update
record"]
    Update["2100-PROCESS-UPDATE:
Locate portfolio
record"]
    Apply["2200-APPLY-UPDATE:
Apply update,
Rewrite record"]
    Error["Error Handling:
Display error,
Increment count"]
    Next["Next Record"]
    Term["3000-TERMINATE:
Close files,
Display stats"]
    Audit["RPTAUD00:
Process audit
and error logs"]
    Report["Write
Summary Report"]

    Start --> Init
    Init --> Process
    Process --> Update
    Update -->|Found| Apply
    Update -->|Not Found| Error
    Apply --> Next
    Error --> Next
    Next -->|More| Process
    Next -->|EOF| Term
    Term --> Audit
    Audit --> Report
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.  
- Ingest real-time price feeds.
- Recalculate portfolio valuations dynamically.
- Enhance error handling for feed failures.
- Log all price update events and errors in the audit trail.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/portfolio/PORTUPDT.cbl**  
  - *Sections:* 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE  
- **src/copybook/common/PORTFLIO.cpy**  
  - *Sections:* Entire copybook  
- **src/programs/batch/RPTAUD00.cbl**  
  - *Sections:* 2000-PROCESS-REPORT, 1100-OPEN-FILES, 9999-ERROR-HANDLER  
- **src/copybook/common/AUDITLOG.cpy**  
  - *Sections:* Entire copybook  

**Purpose of Changes:**  
- Integrate real-time price feed ingestion into the portfolio update process.
- Extend portfolio and audit data structures to store new price and timestamp fields.
- Enhance error handling and audit logging for feed-related events.

**Impact:**  
- Enables dynamic, up-to-date portfolio valuations.
- Improves system resilience and traceability for price feed errors.
- Ensures auditability of all price update events.

### 3.3 Insertion Points  
- **PORTUPDT.cbl:**  
  - Insert logic to ingest and validate real-time price feed before applying updates in `2000-PROCESS` and `2100-PROCESS-UPDATE`.
  - Update `2200-APPLY-UPDATE` to recalculate portfolio value using the latest price and timestamp.
  - Add error handling for feed failures and log events using the audit structure.
- **PORTFLIO.cpy:**  
  - Add fields for `PORT-LAST-PRICE`, `PORT-PRICE-TIMESTAMP`.
- **RPTAUD00.cbl:**  
  - Enhance report processing to include feed errors and price update events.
  - Update error handler to distinguish feed errors.
- **AUDITLOG.cpy:**  
  - Add event types for feed errors and price updates.
  - Add fields for price and timestamp in audit records.

### 3.4 Structured Diffs  

#### src/copybook/common/PORTFLIO.cpy

**Before:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(50).
```

**After:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
               10  PORT-LAST-PRICE     PIC S9(13)V99 COMP-3.
               10  PORT-PRICE-TIMESTAMP PIC X(26).
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(24).
```

---

#### src/copybook/common/AUDITLOG.cpy

**Before:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
           05  AUD-BEFORE-IMAGE     PIC X(100).
           05  AUD-AFTER-IMAGE      PIC X(100).
           05  AUD-MESSAGE          PIC X(100).
```

**After:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
               88  AUD-FEED-ERROR      VALUE 'FEED'.
               88  AUD-PRICE-UPD       VALUE 'PRUP'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
               88  AUD-FEED-FAIL      VALUE 'FEEDFAIL'.
               88  AUD-PRICE-INGEST   VALUE 'PRCINGST'.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
           05  AUD-PRICE            PIC S9(13)V99 COMP-3.
           05  AUD-PRICE-TIMESTAMP  PIC X(26).
           05  AUD-BEFORE-IMAGE     PIC X(80).
           05  AUD-AFTER-IMAGE      PIC X(80).
           05  AUD-MESSAGE          PIC X(100).
```

---

#### src/programs/portfolio/PORTUPDT.cbl

**Before (excerpt from highlighted sections):**
```cobol
       2000-PROCESS.
           READ UPDATE-FILE
               AT END
                   SET END-OF-FILE TO TRUE
               NOT AT END
                   PERFORM 2100-PROCESS-UPDATE
           END-READ
           .
           
       2100-PROCESS-UPDATE.
           MOVE UPDT-KEY TO PORT-KEY
           
           READ PORTFOLIO-FILE
           
           IF WS-SUCCESS-STATUS
               PERFORM 2200-APPLY-UPDATE
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Record not found: ' PORT-KEY
           END-IF
           .
           
       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
           END-EVALUATE
           
           REWRITE PORT-RECORD
           
           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
           END-IF
           .
```

**After:**
```cobol
       2000-PROCESS.
           * Ingest real-time price feed for current portfolio
           PERFORM 2050-INGEST-PRICE-FEED
           READ UPDATE-FILE
               AT END
                   SET END-OF-FILE TO TRUE
               NOT AT END
                   PERFORM 2100-PROCESS-UPDATE
           END-READ
           .

       2050-INGEST-PRICE-FEED.
           * Pseudo-code for price feed integration
           CALL 'PRICEFEED' USING PORT-KEY
                                WS-FEED-PRICE
                                WS-FEED-TIMESTAMP
                                WS-FEED-STATUS
           IF WS-FEED-STATUS = 'OK'
               MOVE WS-FEED-PRICE TO PORT-LAST-PRICE
               MOVE WS-FEED-TIMESTAMP TO PORT-PRICE-TIMESTAMP
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Feed error for: ' PORT-KEY
               PERFORM 2900-LOG-FEED-ERROR
           END-IF
           .

       2100-PROCESS-UPDATE.
           MOVE UPDT-KEY TO PORT-KEY

           READ PORTFOLIO-FILE

           IF WS-SUCCESS-STATUS
               PERFORM 2200-APPLY-UPDATE
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Record not found: ' PORT-KEY
           END-IF
           .

       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   * Use latest price from feed for valuation
                   COMPUTE WS-NUMERIC-WORK = PORT-LAST-PRICE * UPDT-NEW-VALUE
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
                   MOVE WS-FEED-TIMESTAMP TO PORT-PRICE-TIMESTAMP
           END-EVALUATE

           REWRITE PORT-RECORD

           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
               PERFORM 2910-LOG-PRICE-UPDATE
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
           END-IF
           .

       2900-LOG-FEED-ERROR.
           * Populate and write audit record for feed error
           MOVE 'FEED' TO AUD-TYPE
           MOVE 'FEEDFAIL' TO AUD-ACTION
           MOVE 'FAIL' TO AUD-STATUS
           MOVE PORT-KEY TO AUD-KEY-INFO
           MOVE WS-FEED-PRICE TO AUD-PRICE
           MOVE WS-FEED-TIMESTAMP TO AUD-PRICE-TIMESTAMP
           MOVE 'Feed error during update' TO AUD-MESSAGE
           WRITE AUDIT-RECORD
           .

       2910-LOG-PRICE-UPDATE.
           * Populate and write audit record for price update
           MOVE 'PRUP' TO AUD-TYPE
           MOVE 'PRCINGST' TO AUD-ACTION
           MOVE 'SUCC' TO AUD-STATUS
           MOVE PORT-KEY TO AUD-KEY-INFO
           MOVE PORT-LAST-PRICE TO AUD-PRICE
           MOVE PORT-PRICE-TIMESTAMP TO AUD-PRICE-TIMESTAMP
           MOVE 'Price updated successfully' TO AUD-MESSAGE
           WRITE AUDIT-RECORD
           .
```

---

#### src/programs/batch/RPTAUD00.cbl

**Before (excerpt from highlighted sections):**
```cobol
       1100-OPEN-FILES.
           OPEN INPUT AUDIT-FILE
           IF WS-AUDIT-STATUS NOT = '00'
               MOVE 'ERROR OPENING AUDIT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN INPUT ERROR-FILE
           IF WS-ERROR-STATUS NOT = '00'
               MOVE 'ERROR OPENING ERROR FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN OUTPUT REPORT-FILE
           IF WS-REPORT-STATUS NOT = '00'
               MOVE 'ERROR OPENING REPORT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2300-WRITE-SUMMARY.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           MOVE 12 TO RETURN-CODE
           GOBACK.
```

**After:**
```cobol
       1100-OPEN-FILES.
           OPEN INPUT AUDIT-FILE
           IF WS-AUDIT-STATUS NOT = '00'
               MOVE 'ERROR OPENING AUDIT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN INPUT ERROR-FILE
           IF WS-ERROR-STATUS NOT = '00'
               MOVE 'ERROR OPENING ERROR FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN OUTPUT REPORT-FILE
           IF WS-REPORT-STATUS NOT = '00'
               MOVE 'ERROR OPENING REPORT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

           * Open and validate real-time feed error log if present
           OPEN INPUT FEED-ERROR-FILE
           IF WS-FEED-ERROR-STATUS NOT = '00'
               MOVE 'ERROR OPENING FEED ERROR FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2250-PROCESS-FEED-ERRORS
           PERFORM 2300-WRITE-SUMMARY.

       2250-PROCESS-FEED-ERRORS.
           * Scan audit log for FEED and PRUP events
           PERFORM UNTIL END-OF-AUDIT
               READ AUDIT-FILE
                   AT END
                       SET END-OF-AUDIT TO TRUE
                   NOT AT END
                       IF AUD-TYPE = 'FEED' OR AUD-TYPE = 'PRUP'
                           WRITE REPORT-RECORD FROM AUDIT-RECORD
                       END-IF
               END-READ
           END-PERFORM
           .

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           IF WS-ERROR-MESSAGE = 'Feed error during update'
               * Special handling for feed errors
               WRITE REPORT-RECORD FROM WS-ERROR-MESSAGE
           END-IF
           MOVE 12 TO RETURN-CODE
           GOBACK.
```

---

## 4. Conclusion  
The proposed changes enable seamless integration of real-time market price feeds into the portfolio update process, ensuring that portfolio valuations are always current and accurate. The enhancements to data structures and audit logging provide robust error handling and traceability for all price-related events. These modifications position the legacy COBOL system for improved reliability, auditability, and future extensibility in a dynamic market environment.

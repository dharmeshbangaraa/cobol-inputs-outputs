
# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite to support a new `CHANNEL-CODE` field in the transaction file. The change is driven by the need to identify the channel of origin for each transaction, improving batch processing and reporting capabilities. The document details the current logic, the rationale for the change, the impacted modules, and the precise code modifications required.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes financial transactions through a modular architecture. The core transaction record structure is defined in a central copybook and is referenced by multiple batch, utility, and test programs. The main stages across these programs are:

- **Initialization:** Opening files and preparing the environment.
- **Processing:** Reading, validating, generating, or summarizing transaction data.
- **Termination:** Writing outputs and closing files.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the layout for all transaction records.
- Fields include date, time, portfolio ID, sequence number, investment ID, type, quantity, price, amount, currency, status, audit info, and filler.

#### Batch Reporting (`src/programs/batch/RPTPOS00.cbl`)
- **1100-OPEN-FILES:** Opens position master, transaction history, and report files. Handles errors if files cannot be opened.
- **2200-PROCESS-TRANSACTIONS:** Reads transactions and summarizes activity.

#### Validation Utility (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES:** Opens validation control, position master, transaction history, and error report files.
- **2400-CHECK-FORMAT:** Checks the format of position and transaction records.

#### Test Data Generation (`src/programs/test/TSTGEN00.cbl`)
- **2300-GEN-TRANSACTION:** Generates a specified number of transaction records.
- **2320-WRITE-TRAN-RECORD:** Writes each generated transaction record.

#### Test Validation (`src/programs/test/TSTVAL00.cbl`)
- **1100-OPEN-FILES:** Opens test cases, expected results, actual results, and test report files.
- **2100-EXECUTE-TEST:** Executes different types of tests and validates results.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["Open
Files"]
    MainProcess["Main
Processing"]
    WriteOutput["Write
Output/Report"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> MainProcess
    MainProcess --> WriteOutput
    WriteOutput --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

**Summary:**  
A new field, `CHANNEL-CODE`, must be added to the transaction record structure and propagated to all programs that read, write, validate, or report on transaction data. This enables identification of the transaction's channel of origin for improved reporting and auditability.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy**  
  - *Purpose of Changes:* Add `CHANNEL-CODE` field to the transaction record structure.
  - *Impact:* All programs using this copybook will now have access to the new field.

- **src/programs/batch/RPTPOS00.cbl**  
  - *Purpose of Changes:* Read and report the new `CHANNEL-CODE` field.
  - *Impact:* Reports will include channel information for each transaction.

- **src/programs/utility/UTLVAL00.cbl**  
  - *Purpose of Changes:* Validate the presence and correctness of the `CHANNEL-CODE` field.
  - *Impact:* Ensures data integrity for the new field.

- **src/programs/test/TSTGEN00.cbl**  
  - *Purpose of Changes:* Generate test transactions with valid `CHANNEL-CODE` values.
  - *Impact:* Test data will reflect the new structure.

- **src/programs/test/TSTVAL00.cbl**  
  - *Purpose of Changes:* Validate test transactions, including the new field.
  - *Impact:* Test validation will cover the new field.

### 3.3 Insertion Points  
- **TRNREC.cpy:** Insert `CHANNEL-CODE` field in the transaction record definition, after `TRN-CURRENCY` and before `TRN-STATUS`.
- **RPTPOS00.cbl:** Update file handling and reporting logic to read and display `CHANNEL-CODE`.
- **UTLVAL00.cbl:** Update format checks and validation routines to include `CHANNEL-CODE`.
- **TSTGEN00.cbl:** Update transaction generation logic to populate `CHANNEL-CODE`.
- **TSTVAL00.cbl:** Update validation logic to check `CHANNEL-CODE` in test records.

### 3.4 Structured Diffs  

#### 1. src/copybook/common/TRNREC.cpy

**Before:**
```cobol
22          10  TRN-CURRENCY      PIC X(03).
23          10  TRN-STATUS        PIC X(01).
```

**After:**
```cobol
22          10  TRN-CURRENCY      PIC X(03).
22A         10  CHANNEL-CODE      PIC X(04).
23          10  TRN-STATUS        PIC X(01).
```
*Insert `CHANNEL-CODE` after `TRN-CURRENCY`.*

---

#### 2. src/programs/batch/RPTPOS00.cbl

**Before (in 2200-PROCESS-TRANSACTIONS and report output section):**
```cobol
* ... existing code to read transaction record ...
MOVE TRN-TYPE TO WS-REPORT-TYPE
MOVE TRN-AMOUNT TO WS-REPORT-AMOUNT
WRITE REPORT-DETAIL-RECORD
```

**After:**
```cobol
* ... existing code to read transaction record ...
MOVE TRN-TYPE TO WS-REPORT-TYPE
MOVE TRN-AMOUNT TO WS-REPORT-AMOUNT
MOVE CHANNEL-CODE TO WS-REPORT-CHANNEL-CODE
WRITE REPORT-DETAIL-RECORD
```
*Update report logic to include `CHANNEL-CODE`.*

---

#### 3. src/programs/utility/UTLVAL00.cbl

**Before (in 2400-CHECK-FORMAT):**
```cobol
PERFORM 2410-CHECK-POSITION-FORMAT
PERFORM 2420-CHECK-TRANSACTION-FORMAT.
```

**After:**
```cobol
PERFORM 2410-CHECK-POSITION-FORMAT
PERFORM 2420-CHECK-TRANSACTION-FORMAT
PERFORM 2430-CHECK-CHANNEL-CODE-FORMAT.
```
*Add a new paragraph to validate `CHANNEL-CODE`.*

**New Paragraph:**
```cobol
2430-CHECK-CHANNEL-CODE-FORMAT.
    IF CHANNEL-CODE = SPACES OR CHANNEL-CODE NOT IN ('BRCH', 'ONLN', 'MOBL', 'IVR')
        MOVE 'INVALID CHANNEL CODE' TO WS-ERROR-MESSAGE
        PERFORM 9999-ERROR-HANDLER
    END-IF.
```

---

#### 4. src/programs/test/TSTGEN00.cbl

**Before (in 2310-GEN-TRAN-DATA):**
```cobol
MOVE 'USD' TO TRN-CURRENCY
```

**After:**
```cobol
MOVE 'USD' TO TRN-CURRENCY
MOVE 'ONLN' TO CHANNEL-CODE
```
*Populate `CHANNEL-CODE` in generated test data.*

---

#### 5. src/programs/test/TSTVAL00.cbl

**Before (in 2100-EXECUTE-TEST, validation section):**
```cobol
IF TRN-TYPE NOT IN ('BU', 'SL', 'TR', 'FE')
    MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF.
```

**After:**
```cobol
IF TRN-TYPE NOT IN ('BU', 'SL', 'TR', 'FE')
    MOVE 'INVALID TRANSACTION TYPE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF.

IF CHANNEL-CODE NOT IN ('BRCH', 'ONLN', 'MOBL', 'IVR')
    MOVE 'INVALID CHANNEL CODE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER
END-IF.
```
*Validate `CHANNEL-CODE` in test validation logic.*

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field is a cross-cutting change that enhances the traceability and reporting of transaction data across the COBOL legacy suite. By updating the central copybook and all dependent modules, the system will now support channel identification for each transaction, improving both operational insight and auditability. All changes follow COBOL best practices and are designed for seamless integration and minimal disruption to existing functionality.

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules impacted by the integration of a Real-Time Market Price Feed for Dynamic Portfolio Updates. The document details the existing logic, identifies insertion points for the required changes, and presents structured diffs to guide the implementation. This LLD is intended for developers, testers, and architects involved in the modernization and maintenance of the legacy system.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes portfolio updates and generates audit reports. The main modules are:
- **PORTUPDT.cbl**: Handles portfolio record updates based on input transactions.
- **PORTFLIO.cpy**: Defines the portfolio master record structure.
- **RPTAUD00.cbl**: Generates audit reports, logging all significant events and errors.
- **AUDITLOG.cpy**: Defines the audit trail record structure.

The flow involves reading update transactions, applying changes to portfolio records, and logging audit events and errors for compliance and traceability.

### 2.2 Detailed Logic  

#### **PORTUPDT.cbl**
- **Initialization (1000-INITIALIZE, Lines ~60-80):**
  - Initializes working storage.
  - Opens the portfolio and update files.
  - Handles file open errors.

- **Main Processing (2000-PROCESS, Lines ~82-90):**
  - Reads each update record.
  - For each record, invokes the update logic (2100-PROCESS-UPDATE).

- **Update Processing (2100-PROCESS-UPDATE, Lines ~92-104):**
  - Locates the portfolio record matching the update key.
  - If found, applies the update (2200-APPLY-UPDATE); otherwise, logs an error.

- **Apply Update (2200-APPLY-UPDATE, Lines ~106-123):**
  - Applies the update based on the action type (status, name, or value).
  - Rewrites the portfolio record.
  - Updates success/error counters.

- **Termination (3000-TERMINATE, Lines ~125-134):**
  - Closes files and displays summary counts.

#### **PORTFLIO.cpy**
- Defines the structure of a portfolio record, including keys, client info, portfolio info, financial info, audit info, and filler.

#### **RPTAUD00.cbl**
- **Initialization (1000-INITIALIZE, 1100-OPEN-FILES, Lines ~40-70):**
  - Opens audit, error, and report files.
  - Writes report headers.
  - Handles file open errors.

- **Processing (2000-PROCESS-REPORT, Lines ~72-80):**
  - Processes audit trail and error logs.
  - Writes summary sections.

- **Error Handling (9999-ERROR-HANDLER, Lines ~120-125):**
  - Displays error messages and sets return code.

#### **AUDITLOG.cpy**
- Defines the structure of an audit record, including timestamp, system/user/program IDs, event type, action, status, key info, before/after images, and message.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    Init["1000-INITIALIZE:
Initialize
WS, Open Files"]
    Process["2000-PROCESS:
Read Update
Record"]
    Update["2100-PROCESS-UPDATE:
Locate Portfolio
Record"]
    Apply["2200-APPLY-UPDATE:
Apply Update
to Record"]
    Rewrite["Rewrite
Portfolio
Record"]
    LogError["Log Error
(if not found)"]
    NextRec["Next
Update Record"]
    Terminate["3000-TERMINATE:
Close Files,
Display Counts"]
    End(["End"])

    Start --> Init
    Init --> Process
    Process -->|Record Found| Update
    Process -->|EOF| Terminate
    Update -->|Found| Apply
    Update -->|Not Found| LogError
    Apply --> Rewrite
    Rewrite --> NextRec
    LogError --> NextRec
    NextRec --> Process
    Terminate --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Enable Real-Time Market Price Feed Integration for Dynamic Portfolio Updates.

**Summary:**  
The system must ingest real-time market price feeds, update portfolio valuations dynamically, log all price feed events and errors, and ensure audit compliance. This affects portfolio update logic, data structures, audit logging, and error handling.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/portfolio/PORTUPDT.cbl**
  - Sections: 1000-INITIALIZE, 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE
- **src/copybook/common/PORTFLIO.cpy**
- **src/programs/batch/RPTAUD00.cbl**
  - Sections: 1000-INITIALIZE, 1100-OPEN-FILES, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER
- **src/copybook/common/AUDITLOG.cpy**

**Purpose of Changes:**  
- Integrate real-time price feed ingestion and processing.
- Extend portfolio and audit data structures for new fields (price, timestamp, event types).
- Log all price feed events and errors for compliance.

**Impact:**  
- Enables dynamic, real-time portfolio valuation.
- Enhances audit traceability and error monitoring.
- Increases system complexity and introduces new data dependencies.

### 3.3 Insertion Points  
- **PORTUPDT.cbl**
  - **1000-INITIALIZE**: Initialize new price feed interface and related fields.
  - **2000-PROCESS**: Read/process real-time price feed before applying updates.
  - **2100-PROCESS-UPDATE**: Incorporate real-time price data into update logic.
  - **2200-APPLY-UPDATE**: Update portfolio value using real-time price; log price feed events.

- **PORTFLIO.cpy**
  - Add fields for last real-time price and price timestamp.

- **RPTAUD00.cbl**
  - **1000-INITIALIZE, 1100-OPEN-FILES**: Prepare for new audit event types.
  - **2000-PROCESS-REPORT**: Process and report on price feed events.
  - **9999-ERROR-HANDLER**: Handle and log price feed errors.

- **AUDITLOG.cpy**
  - Add event type for price feed, and timestamp fields.

### 3.4 Structured Diffs  

#### **src/copybook/common/PORTFLIO.cpy**

**Before:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(50).
```

**After:**
```cobol
       01  PORT-RECORD.
           05  PORT-KEY.
               10  PORT-ID             PIC X(8).
               10  PORT-ACCOUNT-NO     PIC X(10).
           05  PORT-CLIENT-INFO.
               10  PORT-CLIENT-NAME    PIC X(30).
               10  PORT-CLIENT-TYPE    PIC X(1).
                   88  PORT-INDIVIDUAL    VALUE 'I'.
                   88  PORT-CORPORATE     VALUE 'C'.
                   88  PORT-TRUST         VALUE 'T'.
           05  PORT-PORTFOLIO-INFO.
               10  PORT-CREATE-DATE    PIC 9(8).
               10  PORT-LAST-MAINT     PIC 9(8).
               10  PORT-STATUS         PIC X(1).
                   88  PORT-ACTIVE       VALUE 'A'.
                   88  PORT-CLOSED       VALUE 'C'.
                   88  PORT-SUSPENDED    VALUE 'S'.
           05  PORT-FINANCIAL-INFO.
               10  PORT-TOTAL-VALUE    PIC S9(13)V99 COMP-3.
               10  PORT-CASH-BALANCE   PIC S9(13)V99 COMP-3.
               10  PORT-LAST-PRICE     PIC S9(13)V99 COMP-3.
               10  PORT-PRICE-TIMESTAMP PIC 9(14).  *> YYYYMMDDHHMMSS
           05  PORT-AUDIT-INFO.
               10  PORT-LAST-USER      PIC X(8).
               10  PORT-LAST-TRANS     PIC 9(8).
           05  PORT-FILLER            PIC X(30).
```

---

#### **src/copybook/common/AUDITLOG.cpy**

**Before:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
           05  AUD-BEFORE-IMAGE     PIC X(100).
           05  AUD-AFTER-IMAGE      PIC X(100).
           05  AUD-MESSAGE          PIC X(100).
```

**After:**
```cobol
       01  AUDIT-RECORD.
           05  AUD-HEADER.
               10  AUD-TIMESTAMP     PIC X(26).
               10  AUD-SYSTEM-ID     PIC X(8).
               10  AUD-USER-ID       PIC X(8).
               10  AUD-PROGRAM       PIC X(8).
               10  AUD-TERMINAL      PIC X(8).
               10  AUD-PRICE-TIMESTAMP PIC 9(14).  *> YYYYMMDDHHMMSS
           05  AUD-TYPE             PIC X(4).
               88  AUD-TRANSACTION     VALUE 'TRAN'.
               88  AUD-USER-ACTION     VALUE 'USER'.
               88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
               88  AUD-PRICE-FEED      VALUE 'PRCF'.
           05  AUD-ACTION           PIC X(8).
               88  AUD-CREATE         VALUE 'CREATE  '.
               88  AUD-UPDATE         VALUE 'UPDATE  '.
               88  AUD-DELETE         VALUE 'DELETE  '.
               88  AUD-INQUIRE        VALUE 'INQUIRE '.
               88  AUD-LOGIN          VALUE 'LOGIN   '.
               88  AUD-LOGOUT         VALUE 'LOGOUT  '.
               88  AUD-STARTUP        VALUE 'STARTUP '.
               88  AUD-SHUTDOWN       VALUE 'SHUTDOWN'.
               88  AUD-PRICE-INGEST   VALUE 'PRCINGST'.
           05  AUD-STATUS           PIC X(4).
               88  AUD-SUCCESS        VALUE 'SUCC'.
               88  AUD-FAILURE        VALUE 'FAIL'.
               88  AUD-WARNING        VALUE 'WARN'.
           05  AUD-KEY-INFO.
               10  AUD-PORTFOLIO-ID  PIC X(8).
               10  AUD-ACCOUNT-NO    PIC X(10).
           05  AUD-BEFORE-IMAGE     PIC X(100).
           05  AUD-AFTER-IMAGE      PIC X(100).
           05  AUD-MESSAGE          PIC X(100).
```

---

#### **src/programs/portfolio/PORTUPDT.cbl**

**Before (Excerpt from 1000-INITIALIZE, 2000-PROCESS, 2100-PROCESS-UPDATE, 2200-APPLY-UPDATE):**
```cobol
       1000-INITIALIZE.
           INITIALIZE WS-WORK-AREAS
           
           OPEN I-O   PORTFOLIO-FILE
           OPEN INPUT UPDATE-FILE
           
           IF NOT WS-SUCCESS-STATUS OR 
              NOT WS-UPDT-SUCCESS
              DISPLAY 'Error opening files: ' 
                      'PORT=' WS-FILE-STATUS
                      'UPDT=' WS-UPDT-STATUS
              MOVE WS-ERROR TO WS-RETURN-CODE
              PERFORM 3000-TERMINATE
           END-IF
           .

       2000-PROCESS.
           READ UPDATE-FILE
               AT END
                   SET END-OF-FILE TO TRUE
               NOT AT END
                   PERFORM 2100-PROCESS-UPDATE
           END-READ
           .

       2100-PROCESS-UPDATE.
           MOVE UPDT-KEY TO PORT-KEY
           
           READ PORTFOLIO-FILE
           
           IF WS-SUCCESS-STATUS
               PERFORM 2200-APPLY-UPDATE
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Record not found: ' PORT-KEY
           END-IF
           .

       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
           END-EVALUATE
           
           REWRITE PORT-RECORD
           
           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
           END-IF
           .
```

**After (Key Additions Highlighted):**
```cobol
       1000-INITIALIZE.
           INITIALIZE WS-WORK-AREAS
           INITIALIZE WS-PRICE-FEED-AREA
           PERFORM INIT-PRICE-FEED-INTERFACE
           
           OPEN I-O   PORTFOLIO-FILE
           OPEN INPUT UPDATE-FILE
           
           IF NOT WS-SUCCESS-STATUS OR 
              NOT WS-UPDT-SUCCESS
              DISPLAY 'Error opening files: ' 
                      'PORT=' WS-FILE-STATUS
                      'UPDT=' WS-UPDT-STATUS
              MOVE WS-ERROR TO WS-RETURN-CODE
              PERFORM 3000-TERMINATE
           END-IF
           .

       2000-PROCESS.
           PERFORM READ-REALTIME-PRICE-FEED
           READ UPDATE-FILE
               AT END
                   SET END-OF-FILE TO TRUE
               NOT AT END
                   PERFORM 2100-PROCESS-UPDATE
           END-READ
           .

       2100-PROCESS-UPDATE.
           MOVE UPDT-KEY TO PORT-KEY
           
           READ PORTFOLIO-FILE
           
           IF WS-SUCCESS-STATUS
               PERFORM 2200-APPLY-UPDATE
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Record not found: ' PORT-KEY
               PERFORM LOG-PRICE-FEED-EVENT
           END-IF
           .

       2200-APPLY-UPDATE.
           EVALUATE TRUE
               WHEN UPDT-STATUS
                   MOVE UPDT-NEW-VALUE TO PORT-STATUS
               WHEN UPDT-NAME
                   MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
               WHEN UPDT-VALUE
                   MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
                   MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
           END-EVALUATE

           *> Integrate real-time price feed
           IF WS-PRICE-FEED-AVAILABLE
               MOVE WS-REALTIME-PRICE TO PORT-LAST-PRICE
               MOVE WS-PRICE-TIMESTAMP TO PORT-PRICE-TIMESTAMP
               COMPUTE PORT-TOTAL-VALUE = PORT-TOTAL-VALUE * WS-REALTIME-PRICE
               PERFORM LOG-PRICE-FEED-EVENT
           END-IF
           
           REWRITE PORT-RECORD
           
           IF WS-SUCCESS-STATUS
               ADD 1 TO WS-UPDATE-COUNT
           ELSE
               ADD 1 TO WS-ERROR-COUNT
               DISPLAY 'Update failed for: ' PORT-KEY
               PERFORM LOG-PRICE-FEED-EVENT
           END-IF
           .
```

---

#### **src/programs/batch/RPTAUD00.cbl**

**Before (Excerpt from 1000-INITIALIZE, 1100-OPEN-FILES, 2000-PROCESS-REPORT, 9999-ERROR-HANDLER):**
```cobol
       1000-INITIALIZE.
           PERFORM 1100-OPEN-FILES
           PERFORM 1200-WRITE-HEADERS.

       1100-OPEN-FILES.
           OPEN INPUT AUDIT-FILE
           IF WS-AUDIT-STATUS NOT = '00'
               MOVE 'ERROR OPENING AUDIT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN INPUT ERROR-FILE
           IF WS-ERROR-STATUS NOT = '00'
               MOVE 'ERROR OPENING ERROR FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN OUTPUT REPORT-FILE
           IF WS-REPORT-STATUS NOT = '00'
               MOVE 'ERROR OPENING REPORT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2300-WRITE-SUMMARY.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           MOVE 12 TO RETURN-CODE
           GOBACK.
```

**After (Key Additions Highlighted):**
```cobol
       1000-INITIALIZE.
           PERFORM 1100-OPEN-FILES
           PERFORM 1200-WRITE-HEADERS
           PERFORM INIT-PRICE-FEED-AUDIT.

       1100-OPEN-FILES.
           OPEN INPUT AUDIT-FILE
           IF WS-AUDIT-STATUS NOT = '00'
               MOVE 'ERROR OPENING AUDIT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN INPUT ERROR-FILE
           IF WS-ERROR-STATUS NOT = '00'
               MOVE 'ERROR OPENING ERROR FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN OUTPUT REPORT-FILE
           IF WS-REPORT-STATUS NOT = '00'
               MOVE 'ERROR OPENING REPORT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-PROCESS-REPORT.
           PERFORM 2100-PROCESS-AUDIT-TRAIL
           PERFORM 2150-PROCESS-PRICE-FEED-EVENTS
           PERFORM 2200-PROCESS-ERROR-LOG
           PERFORM 2300-WRITE-SUMMARY.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           PERFORM LOG-PRICE-FEED-ERROR
           MOVE 12 TO RETURN-CODE
           GOBACK.
```

---

## 4. Conclusion  
The proposed changes enable the COBOL application to ingest and process real-time market price feeds, dynamically update portfolio valuations, and comprehensively log all price feed events and errors for audit and compliance. Data structures are extended to support new fields, and all impacted modules are updated to ensure seamless integration. These enhancements modernize the legacy system, improve auditability, and support dynamic business requirements.


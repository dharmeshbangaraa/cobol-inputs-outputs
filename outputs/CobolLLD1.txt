# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the COBOL application modules within the `dharmeshbangaraa/COBOL-Legacy-Benchmark-Suite` repository. It details the existing logic and flow, identifies impacted modules based on the Impact Analysis Report, and outlines the required changes with structured diffs. The goal is to facilitate accurate and efficient future maintenance and modernization efforts.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application is a legacy system that processes business-critical data for portfolio management, batch control, transaction processing, online inquiries, error handling, and auditing. The system is modular, with distinct layers for batch processing, online transactions, portfolio management, utilities, and testing. Each module follows a structured programming paradigm, typically divided into initialization, main processing, and termination phases.

### 2.2 Detailed Logic  
#### Example: Batch Control Processor (`src/programs/batch/BCHCTL00.cbl`)
- **Initialization (Lines 10-50):**  
  - Reads job control parameters from input files and initializes control variables.
  - Loads batch control copybooks (`BCHCTL.cpy`, `BCHCON.cpy`).
- **Main Processing (Lines 51-200):**  
  - Sequences batch jobs based on dependencies.
  - Updates job status and handles process transitions.
  - Invokes error handling routines on failure.
- **Termination (Lines 201-250):**  
  - Writes job completion status to output files.
  - Logs audit trail using `AUDPROC.cbl`.
  - Performs DB2 commit/rollback as needed.

#### Example: Portfolio Addition Program (`src/programs/portfolio/PORTADD.cbl`)
- **Initialization (Lines 10-40):**  
  - Reads portfolio addition request.
  - Loads portfolio copybooks (`PORTFLIO.cpy`, `PORTVAL.cpy`).
- **Main Processing (Lines 41-120):**  
  - Validates input data using `PORTVALD.cbl`.
  - Adds new portfolio record to VSAM and DB2.
  - Updates audit log.
- **Termination (Lines 121-150):**  
  - Returns status code.
  - Logs operation outcome.

#### Example: Online Inquiry Handler (`src/programs/online/INQONLN.cbl`)
- **Initialization (Lines 10-30):**  
  - Sets up CICS transaction context.
  - Loads inquiry copybooks (`INQCOM.cpy`, `DB2REQ.cpy`).
- **Main Processing (Lines 31-100):**  
  - Processes user inquiry requests.
  - Fetches data from DB2 tables.
  - Handles screen interactions via BMS maps.
- **Termination (Lines 101-130):**  
  - Returns results to user.
  - Logs errors and audit events.

#### Flowchart:
```
flowchart TD
    Start(["Start"])
    InitBatch["Batch
Initialization"]
    SeqBatch["Batch
Sequencing"]
    ProcBatch["Batch
Processing"]
    TermBatch["Batch
Termination"]

    InitPortfolio["Portfolio
Initialization"]
    ProcPortfolio["Portfolio
Processing"]
    TermPortfolio["Portfolio
Termination"]

    InitOnline["Online
Initialization"]
    ProcOnline["Online
Processing"]
    TermOnline["Online
Termination"]

    Start --> InitBatch
    InitBatch --> SeqBatch
    SeqBatch --> ProcBatch
    ProcBatch --> TermBatch

    Start --> InitPortfolio
    InitPortfolio --> ProcPortfolio
    ProcPortfolio --> TermPortfolio

    Start --> InitOnline
    InitOnline --> ProcOnline
    ProcOnline --> TermOnline
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
Based on the Impact Analysis Report, the following areas require changes:
- **Batch Control and Sequencing:** Update job control logic and status code handling.
- **Portfolio Management:** Enhance validation rules and update portfolio structure.
- **Transaction and Position Processing:** Modify transaction logic and position calculations.
- **Online Inquiry and CICS:** Revise inquiry flows and screen layouts.
- **Error Handling and Auditing:** Standardize error codes and audit logging.

### 3.2 Proposed Code Changes Summary:
#### 3.2.1 Impacted Sections and Files:
- **Batch Control:**  
  - Files: `BCHCTL00.cbl`, `PRCSEQ00.cbl`, `BCHCTL.cpy`, `BCHCON.cpy`
  - Purpose of Changes: Improve job control logic, enhance status code management, and ensure robust error handling.
  - Impact: More reliable batch job sequencing and error recovery.

- **Portfolio Management:**  
  - Files: `PORTADD.cbl`, `PORTVALD.cbl`, `PORTFLIO.cpy`, `PORTVAL.cpy`
  - Purpose of Changes: Strengthen portfolio validation and update data structures.
  - Impact: Improved data integrity and validation accuracy.

- **Transaction/Position Processing:**  
  - Files: `PORTTRAN.cbl`, `RPTPOS00.cbl`, `TRNREC.cpy`, `POSREC.cpy`
  - Purpose of Changes: Refine transaction logic and position calculations.
  - Impact: Accurate transaction processing and reporting.

- **Online Inquiry/CICS:**  
  - Files: `INQONLN.cbl`, `INQPORT.cbl`, `INQCOM.cpy`, `INQSET.bms`
  - Purpose of Changes: Update inquiry logic and screen layouts.
  - Impact: Enhanced user experience and data retrieval.

- **Error Handling/Auditing:**  
  - Files: `ERRPROC.cbl`, `AUDPROC.cbl`, `ERRHAND.cpy`, `AUDITLOG.cpy`
  - Purpose of Changes: Standardize error codes and audit logging.
  - Impact: Consistent error handling and audit trails.

### 3.3 Insertion Points  
- **Batch Control:**  
  - Insert enhanced status code logic in `BCHCTL00.cbl` after job sequencing (Line 120).
  - Update error handling in `PRCSEQ00.cbl` (Line 85).
- **Portfolio Management:**  
  - Add new validation rules in `PORTVALD.cbl` (Line 60).
  - Update portfolio structure in `PORTFLIO.cpy` (Line 15).
- **Transaction/Position Processing:**  
  - Refine transaction logic in `PORTTRAN.cbl` (Line 75).
  - Update position calculation in `RPTPOS00.cbl` (Line 110).
- **Online Inquiry/CICS:**  
  - Revise inquiry flow in `INQONLN.cbl` (Line 45).
  - Update BMS map in `INQSET.bms` (Line 20).
- **Error Handling/Auditing:**  
  - Standardize error codes in `ERRPROC.cbl` (Line 30).
  - Enhance audit logging in `AUDPROC.cbl` (Line 50).

### 3.4 Structured Diffs  
#### Batch Control (`BCHCTL00.cbl`)
**Before:**
```cobol
PERFORM SEQUENCE-JOBS
IF JOB-STATUS = 'FAILED'
    PERFORM ERROR-HANDLING
END-IF
```
**After:**
```cobol
PERFORM SEQUENCE-JOBS
IF JOB-STATUS = 'FAILED'
    MOVE 'ERR-BATCH-01' TO ERROR-CODE
    PERFORM ERROR-HANDLING
    PERFORM LOG-AUDIT-TRAIL
END-IF
```

#### Portfolio Validation (`PORTVALD.cbl`)
**Before:**
```cobol
IF PORTFOLIO-AMOUNT < 0
    MOVE 'INVALID' TO VALIDATION-STATUS
END-IF
```
**After:**
```cobol
IF PORTFOLIO-AMOUNT < 0 OR PORTFOLIO-NAME = SPACES
    MOVE 'INVALID' TO VALIDATION-STATUS
    MOVE 'ERR-PORT-VAL' TO ERROR-CODE
END-IF
```

#### Portfolio Structure (`PORTFLIO.cpy`)
**Before:**
```cobol
01 PORTFOLIO-RECORD.
   05 PORTFOLIO-ID        PIC X(10).
   05 PORTFOLIO-NAME      PIC X(30).
   05 PORTFOLIO-AMOUNT    PIC S9(9)V99 COMP-3.
```
**After:**
```cobol
01 PORTFOLIO-RECORD.
   05 PORTFOLIO-ID        PIC X(10).
   05 PORTFOLIO-NAME      PIC X(30).
   05 PORTFOLIO-AMOUNT    PIC S9(9)V99 COMP-3.
   05 PORTFOLIO-STATUS    PIC X(1).
```

#### Transaction Logic (`PORTTRAN.cbl`)
**Before:**
```cobol
COMPUTE NEW-AMOUNT = OLD-AMOUNT + TRANSACTION-AMOUNT
```
**After:**
```cobol
COMPUTE NEW-AMOUNT = OLD-AMOUNT + TRANSACTION-AMOUNT
IF TRANSACTION-AMOUNT > 100000
    MOVE 'ERR-TRAN-LIMIT' TO ERROR-CODE
    PERFORM ERROR-HANDLING
END-IF
```

#### Position Calculation (`RPTPOS00.cbl`)
**Before:**
```cobol
COMPUTE POSITION-TOTAL = SUM OF ALL POSITIONS
```
**After:**
```cobol
COMPUTE POSITION-TOTAL = SUM OF ALL POSITIONS
IF POSITION-TOTAL < 0
    MOVE 'ERR-POS-NEG' TO ERROR-CODE
    PERFORM ERROR-HANDLING
END-IF
```

#### Online Inquiry Flow (`INQONLN.cbl`)
**Before:**
```cobol
EXEC SQL
    SELECT * FROM PORTFOLIO_MASTER
    WHERE PORTFOLIO-ID = :IN-ID
END-EXEC
```
**After:**
```cobol
EXEC SQL
    SELECT * FROM PORTFOLIO_MASTER
    WHERE PORTFOLIO-ID = :IN-ID
END-EXEC
IF SQLCODE <> 0
    MOVE 'ERR-DB2-READ' TO ERROR-CODE
    PERFORM ERROR-HANDLING
END-IF
```

#### BMS Map (`INQSET.bms`)
**Before:**
```
DFHMDF POSN(2,2) LENGTH(30) ATTRB(UNPROT)
```
**After:**
```
DFHMDF POSN(2,2) LENGTH(30) ATTRB(UNPROT)
DFHMDF POSN(3,2) LENGTH(1) ATTRB(PROT)  /* Portfolio Status */
```

#### Error Handling (`ERRPROC.cbl`)
**Before:**
```cobol
IF ERROR-CODE = 'ERR01'
    DISPLAY 'ERROR OCCURRED'
END-IF
```
**After:**
```cobol
IF ERROR-CODE = 'ERR01' OR ERROR-CODE = 'ERR-BATCH-01' OR ERROR-CODE = 'ERR-PORT-VAL'
    DISPLAY 'ERROR OCCURRED: ' ERROR-CODE
    PERFORM LOG-AUDIT-TRAIL
END-IF
```

#### Audit Logging (`AUDPROC.cbl`)
**Before:**
```cobol
WRITE AUDIT-LOG-RECORD
```
**After:**
```cobol
WRITE AUDIT-LOG-RECORD
IF ERROR-CODE NOT = SPACES
    WRITE ERROR-LOG-RECORD
END-IF
```

## 4. Conclusion  
The proposed changes enhance the reliability, data integrity, and maintainability of the COBOL legacy application. By updating job control logic, strengthening validation, refining transaction and position processing, improving online inquiry flows, and standardizing error handling and audit logging, the system is better equipped for future modernization and maintenance. All changes adhere to COBOL best practices and are documented for technical review and collaboration.

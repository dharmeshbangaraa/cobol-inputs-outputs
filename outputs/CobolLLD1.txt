
# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically the addition of the `CHANNEL-CODE` field to the transaction record structure. The change is intended to support channel identification in batch processing and reporting, and impacts all programs that read, write, or validate transaction data.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes business-critical transaction data through a set of batch, utility, and test programs. The core transaction record structure is defined in a common copybook (`TRNREC.cpy`), which is included in all relevant programs. The main processing flow involves:

- **Initialization:** Opening required files and preparing for processing.
- **Processing:** Reading transaction records, performing business logic, generating reports, and validating data.
- **Termination:** Writing output, closing files, and handling errors.

### 2.2 Detailed Logic  

#### Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- Defines the canonical layout for transaction data.
- Key fields: transaction date, time, portfolio ID, sequence number, investment ID, type, quantity, price, amount, currency, status, audit info, and filler.
- Used by all transaction-processing programs for consistent data handling.

#### Batch Processing (`src/programs/batch/RPTPOS00.cbl`)
- **1100-OPEN-FILES:** Opens position, transaction, and report files. Handles file open errors.
- **2200-PROCESS-TRANSACTIONS:** Reads transaction records and summarizes activity for reporting.

#### Utility Validation (`src/programs/utility/UTLVAL00.cbl`)
- **1100-OPEN-FILES:** Opens validation control, position, transaction, and error report files.
- **2400-CHECK-FORMAT:** Validates the format of transaction records, ensuring data integrity.

#### Test Generation and Validation (`src/programs/test/TSTGEN00.cbl`, `src/programs/test/TSTVAL00.cbl`)
- **TSTGEN00.cbl:** Generates test transaction records and writes them using the transaction record layout.
- **TSTVAL00.cbl:** Reads and validates test transaction files, ensuring they conform to the expected structure.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"])
    OpenFiles["1100-OPEN-FILES:
Open all required files"]
    ProcessTransactions["2200-PROCESS-TRANSACTIONS:
Read and process
transaction records"]
    ValidateFormat["2400-CHECK-FORMAT:
Validate transaction
record format"]
    GenerateTest["2300-GEN-TRANSACTION:
Generate test
transaction records"]
    WriteTest["2320-WRITE-TRAN-RECORD:
Write test transaction"]
    ExecuteTest["2100-EXECUTE-TEST:
Read and validate
test transactions"]
    WriteReport["Write output
and reports"]
    End(["End"])

    Start --> OpenFiles
    OpenFiles --> ProcessTransactions
    ProcessTransactions --> ValidateFormat
    ValidateFormat --> WriteReport
    WriteReport --> End
    OpenFiles --> GenerateTest
    GenerateTest --> WriteTest
    WriteTest --> ExecuteTest
    ExecuteTest --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- The `CHANNEL-CODE` field will be added to the transaction record structure to identify the channel (e.g., online, branch, mobile) through which each transaction was processed.
- All programs that read, write, or validate transaction data must be updated to handle the new field.

### 3.2 Proposed Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy**  
  - Purpose of Changes: Add `CHANNEL-CODE` field to the transaction record structure.
  - Impact: All programs using this copybook will now expect and process the new field.

- **src/programs/batch/RPTPOS00.cbl**  
  - Purpose of Changes: Update file layout, FD, and reporting logic to include `CHANNEL-CODE`.
  - Impact: Reports can now include channel-based breakdowns; file I/O must handle the new field.

- **src/programs/utility/UTLVAL00.cbl**  
  - Purpose of Changes: Validate presence and format of `CHANNEL-CODE` in transaction records.
  - Impact: Ensures data integrity for the new field.

- **src/programs/test/TSTGEN00.cbl**  
  - Purpose of Changes: Populate `CHANNEL-CODE` in generated test transaction records.
  - Impact: Test data now reflects real-world channel scenarios.

- **src/programs/test/TSTVAL00.cbl**  
  - Purpose of Changes: Read and validate `CHANNEL-CODE` in test transaction files.
  - Impact: Test validation logic is updated for the new field.

### 3.3 Insertion Points  
- **TRNREC.cpy:**  
  - Insert `CHANNEL-CODE` as a new field in the transaction record structure, ideally after `TRN-CURRENCY` for logical grouping.
- **RPTPOS00.cbl:**  
  - Update FD for TRANSACTION-HISTORY to include `CHANNEL-CODE`.
  - Update all references to transaction record fields in processing and reporting logic.
- **UTLVAL00.cbl:**  
  - Update FD for TRANSACTION-HISTORY.
  - Add validation logic for `CHANNEL-CODE` in `2400-CHECK-FORMAT`.
- **TSTGEN00.cbl:**  
  - Update record generation logic in `2300-GEN-TRANSACTION` and writing logic in `2320-WRITE-TRAN-RECORD` to set `CHANNEL-CODE`.
- **TSTVAL00.cbl:**  
  - Update FD and validation logic in `2100-EXECUTE-TEST` to check `CHANNEL-CODE`.

### 3.4 Structured Diffs  

#### **src/copybook/common/TRNREC.cpy**

**Before:**
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-KEY.
               10  TRN-DATE           PIC X(08).
               10  TRN-TIME           PIC X(06).
               10  TRN-PORTFOLIO-ID   PIC X(08).
               10  TRN-SEQUENCE-NO    PIC X(06).
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-STATUS        PIC X(01).
           05  TRN-AUDIT.
               10  TRN-PROCESS-DATE  PIC X(26).
               10  TRN-PROCESS-USER  PIC X(08).
           05  TRN-FILLER           PIC X(50).
```

**After:**
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-KEY.
               10  TRN-DATE           PIC X(08).
               10  TRN-TIME           PIC X(06).
               10  TRN-PORTFOLIO-ID   PIC X(08).
               10  TRN-SEQUENCE-NO    PIC X(06).
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  CHANNEL-CODE      PIC X(04).
               10  TRN-STATUS        PIC X(01).
           05  TRN-AUDIT.
               10  TRN-PROCESS-DATE  PIC X(26).
               10  TRN-PROCESS-USER  PIC X(08).
           05  TRN-FILLER           PIC X(46).
```
*Note: TRN-FILLER reduced by 4 bytes to accommodate CHANNEL-CODE.*

---

#### **src/programs/batch/RPTPOS00.cbl**

**Before (FD and usage):**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
```
*Processing logic references fields in TRANSACTION-RECORD, but no CHANNEL-CODE.*

**After:**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
```
*Processing logic updated to reference `CHANNEL-CODE` as needed, e.g., for channel-based reporting:*
```cobol
       IF CHANNEL-CODE = 'ONLN'
           ADD 1 TO ONLINE-TRAN-COUNT
       ELSE IF CHANNEL-CODE = 'BRCH'
           ADD 1 TO BRANCH-TRAN-COUNT
       END-IF
```
*Report output lines updated to include CHANNEL-CODE where appropriate.*

---

#### **src/programs/utility/UTLVAL00.cbl**

**Before (FD and validation):**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
...
       2400-CHECK-FORMAT.
           PERFORM 2410-CHECK-POSITION-FORMAT
           PERFORM 2420-CHECK-TRANSACTION-FORMAT.
```
*No validation for CHANNEL-CODE.*

**After:**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
...
       2400-CHECK-FORMAT.
           PERFORM 2410-CHECK-POSITION-FORMAT
           PERFORM 2420-CHECK-TRANSACTION-FORMAT
           PERFORM 2430-CHECK-CHANNEL-CODE.
...
       2430-CHECK-CHANNEL-CODE.
           IF CHANNEL-CODE NOT IN ('ONLN', 'BRCH', 'MOBL', 'IVR')
               MOVE 'INVALID CHANNEL-CODE' TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.
```

---

#### **src/programs/test/TSTGEN00.cbl**

**Before:**
```cobol
       2300-GEN-TRANSACTION.
           MOVE ... TO TRANSACTION-RECORD
       2320-WRITE-TRAN-RECORD.
           WRITE TRANSACTION-RECORD
```
*No CHANNEL-CODE set.*

**After:**
```cobol
       2300-GEN-TRANSACTION.
           MOVE ... TO TRANSACTION-RECORD
           MOVE 'ONLN' TO CHANNEL-CODE
       2320-WRITE-TRAN-RECORD.
           WRITE TRANSACTION-RECORD
```
*Test data now includes CHANNEL-CODE.*

---

#### **src/programs/test/TSTVAL00.cbl**

**Before:**
```cobol
       2100-EXECUTE-TEST.
           READ TRANSACTION-RECORD
           ... (validation logic)
```
*No validation for CHANNEL-CODE.*

**After:**
```cobol
       2100-EXECUTE-TEST.
           READ TRANSACTION-RECORD
           IF CHANNEL-CODE NOT IN ('ONLN', 'BRCH', 'MOBL', 'IVR')
               DISPLAY 'TEST FAILED: INVALID CHANNEL-CODE'
           END-IF
           ... (other validation logic)
```

---

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record structure and all related programs enables robust channel identification for batch processing and reporting. All impacted programs have been updated to handle the new field, ensuring data integrity and supporting new business requirements for channel-based analytics. The changes are backward-compatible at the code level but require all transaction files to be regenerated or migrated to the new layout. This LLD provides clear guidance for implementation, review, and testing.

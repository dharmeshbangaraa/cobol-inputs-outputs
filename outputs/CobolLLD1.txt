# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document provides a comprehensive technical overview and Low-Level Design (LLD) for the enhancement of the COBOL legacy application suite, specifically to add a `CHANNEL-CODE` field to the transaction record. This change supports channel identification in batch processing and reporting, and impacts core transaction data structures, file layouts, batch processing, reporting, and test utilities. The document details the existing logic, the rationale and scope of the change, and provides clear guidance and structured diffs for implementation.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes business-critical transaction data through a set of modular programs. The core transaction record structure is defined in a copybook and is referenced by all programs that read, write, validate, or report on transaction data. The main impacted modules are:

- **TRNREC.cpy**: Defines the canonical transaction record structure.
- **RPTPOS00.cbl**: Batch program generating daily position and transaction activity reports.
- **UTLVAL00.cbl**: Utility for validating transaction and position data.
- **TSTGEN00.cbl**: Test data generator for synthetic transaction files.
- **TSTVAL00.cbl**: Test data validator for transaction files.

Each program follows a structured paradigm with initialization, main processing, and termination sections.

### 2.2 Detailed Logic  

#### 2.2.1 Transaction Record Structure (`src/copybook/common/TRNREC.cpy`)
- **Defines the transaction record (`TRANSACTION-RECORD`)** with key fields for date, time, portfolio, investment, type, quantity, price, amount, currency, status, audit, and filler.
- **No channel identification field exists pre-change.**
- **Referenced in all transaction-processing programs via `COPY TRNREC`.**

#### 2.2.2 Batch Reporting (`src/programs/batch/RPTPOS00.cbl`)
- **Initialization**: Opens position, transaction, and report files (`1100-OPEN-FILES`).
- **Processing**: Reads positions and transactions, formats and writes report records (`2000-PROCESS-REPORT`, `2200-PROCESS-TRANSACTIONS`).
- **Termination**: Closes all files (`3000-CLEANUP`).
- **Transaction records** are read from `TRANSACTION-HISTORY` using the structure from `TRNREC.cpy`.

#### 2.2.3 Data Validation Utility (`src/programs/utility/UTLVAL00.cbl`)
- **Initialization**: Opens validation control, position, transaction, and error report files (`1100-OPEN-FILES`).
- **Processing**: Reads validation control records and performs integrity, cross-reference, format, and balance checks (`2000-PROCESS`, `2400-CHECK-FORMAT`).
- **Termination**: Closes all files (`3000-CLEANUP`).
- **Transaction records** are validated for format and integrity using the structure from `TRNREC.cpy`.

#### 2.2.4 Test Data Generator (`src/programs/test/TSTGEN00.cbl`)
- **Initialization**: Opens transaction and position files.
- **Processing**: Generates synthetic transaction records and writes them to the transaction file (`2300-GEN-TRANSACTION`, `2320-WRITE-TRAN-RECORD`).
- **Termination**: Closes files.
- **Transaction records** are written using the structure from `TRNREC.cpy`.

#### 2.2.5 Test Data Validator (`src/programs/test/TSTVAL00.cbl`)
- **Initialization**: Opens transaction files.
- **Processing**: Reads and validates test transaction records (`2100-EXECUTE-TEST`).
- **Termination**: Closes files.
- **Transaction records** are read and validated using the structure from `TRNREC.cpy`.

#### Flowchart:  
```
flowchart TD
    Start(["Start"])
    Init["Initialization:
Open Files"]
    Process["Main Processing:
Read/Write/Validate
Transaction Records"]
    Term["Termination:
Close Files"]
    End(["End"])

    Start --> Init
    Init --> Process
    Process --> Term
    Term --> End
```

## 3. Proposed Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting.

- The `CHANNEL-CODE` field will be added to the transaction record structure.
- All programs that read/write transaction data or generate reports must be updated to handle the new field.
- The field will be used for channel-based reporting, validation, and test data generation.

### 3.2 Proposed Code Changes Summary

#### 3.2.1 Impacted Sections and Files

| File Path                                   | Impacted Sections/Paragraphs                |
|----------------------------------------------|---------------------------------------------|
| `src/copybook/common/TRNREC.cpy`            | CHANNEL-CODE definition                     |
| `src/programs/batch/RPTPOS00.cbl`           | 1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS |
| `src/programs/utility/UTLVAL00.cbl`         | 1100-OPEN-FILES, 2400-CHECK-FORMAT         |
| `src/programs/test/TSTGEN00.cbl`            | 2300-GEN-TRANSACTION, 2320-WRITE-TRAN-RECORD|
| `src/programs/test/TSTVAL00.cbl`            | 1100-OPEN-FILES, 2100-EXECUTE-TEST         |

- **Purpose of Changes:**  
  To enable channel-based identification and reporting for all transaction processing, validation, and test scenarios by introducing a new `CHANNEL-CODE` field in the transaction record and updating all dependent logic.

- **Impact:**  
  - All transaction file layouts, FD sections, and record processing logic must be updated to include and handle the new field.
  - Reporting and validation logic must be enhanced to process and display the channel code.
  - Test data generation and validation must support the new field for completeness.

### 3.3 Insertion Points  

- **TRNREC.cpy**:  
  - Insert `CHANNEL-CODE` field in the transaction record structure, ideally after `TRN-CURRENCY` for logical grouping.
- **RPTPOS00.cbl**:  
  - Update FD and record layouts to include `CHANNEL-CODE`.
  - Update report output logic to display or process the channel code.
- **UTLVAL00.cbl**:  
  - Update FD and validation logic to check for presence and format of `CHANNEL-CODE`.
- **TSTGEN00.cbl**:  
  - Update record generation logic to populate `CHANNEL-CODE` in synthetic records.
- **TSTVAL00.cbl**:  
  - Update validation logic to check for correct `CHANNEL-CODE` in test records.

### 3.4 Structured Diffs  

#### 3.4.1 `src/copybook/common/TRNREC.cpy`

**Before:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-STATUS        PIC X(01).
```

**After:**
```cobol
           05  TRN-DATA.
               10  TRN-INVESTMENT-ID  PIC X(10).
               10  TRN-TYPE           PIC X(02).
                   88  TRN-TYPE-BUY     VALUE 'BU'.
                   88  TRN-TYPE-SELL    VALUE 'SL'.
                   88  TRN-TYPE-TRANS   VALUE 'TR'.
                   88  TRN-TYPE-FEE     VALUE 'FE'.
               10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
               10  TRN-PRICE         PIC S9(11)V9(4) COMP-3.
               10  TRN-AMOUNT        PIC S9(13)V9(2) COMP-3.
               10  TRN-CURRENCY      PIC X(03).
               10  TRN-CHANNEL-CODE  PIC X(04).
               10  TRN-STATUS        PIC X(01).
```

#### 3.4.2 `src/programs/batch/RPTPOS00.cbl`

**Before:**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
```
**After:**
```cobol
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
       * Ensure FD and all references to TRANSACTION-RECORD include TRN-CHANNEL-CODE
```
**Insertion in report output logic (e.g., in 2200-PROCESS-TRANSACTIONS):**
```cobol
* Before:
WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.

* After (example):
MOVE TRN-CHANNEL-CODE TO WS-REPORT-CHANNEL-CODE
WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```
*(Add WS-REPORT-CHANNEL-CODE to the report record layout as needed.)*

#### 3.4.3 `src/programs/utility/UTLVAL00.cbl`

**Before:**
```cobol
           COPY TRNREC.
```
**After:**
```cobol
           COPY TRNREC.
       * Ensure all validation logic in 2400-CHECK-FORMAT and related sections
       * includes checks for TRN-CHANNEL-CODE presence and format.
```
**Insertion in validation logic:**
```cobol
* Before:
IF TRN-CURRENCY = SPACES
    MOVE 'MISSING CURRENCY' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.

* After:
IF TRN-CURRENCY = SPACES
    MOVE 'MISSING CURRENCY' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.
IF TRN-CHANNEL-CODE = SPACES
    MOVE 'MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.
```

#### 3.4.4 `src/programs/test/TSTGEN00.cbl`

**Before:**
```cobol
           COPY TRNREC.
```
**After:**
```cobol
           COPY TRNREC.
       * In 2300-GEN-TRANSACTION, set TRN-CHANNEL-CODE to a test value.
```
**Insertion in record generation:**
```cobol
* Before:
MOVE 'USD' TO TRN-CURRENCY.

* After:
MOVE 'USD' TO TRN-CURRENCY.
MOVE 'WEB1' TO TRN-CHANNEL-CODE.
```

#### 3.4.5 `src/programs/test/TSTVAL00.cbl`

**Before:**
```cobol
           COPY TRNREC.
```
**After:**
```cobol
           COPY TRNREC.
       * In 2100-EXECUTE-TEST, validate TRN-CHANNEL-CODE is present and correct.
```
**Insertion in test validation:**
```cobol
* Before:
IF TRN-CURRENCY NOT = 'USD'
    MOVE 'INVALID CURRENCY' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.

* After:
IF TRN-CURRENCY NOT = 'USD'
    MOVE 'INVALID CURRENCY' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.
IF TRN-CHANNEL-CODE = SPACES
    MOVE 'MISSING CHANNEL CODE' TO WS-ERROR-MESSAGE
    PERFORM 9999-ERROR-HANDLER.
```

## 4. Conclusion  
The addition of the `CHANNEL-CODE` field to the transaction record and all dependent modules enables robust channel-based identification, reporting, and validation throughout the COBOL legacy application suite. All impacted programs and copybooks must be updated to ensure data integrity and support for the new field, with clear insertion points and structured diffs provided for seamless integration. This change enhances the system's flexibility for future channel-based analytics and reporting.


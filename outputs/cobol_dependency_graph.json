{
  "metadata": {
    "repository": "https://github.com/dharmeshbangaraa/COBOL-Legacy-Benchmark-Suite",
    "branch": "main",
    "analysis_timestamp": "2025-07-16T01:08:18.226516",
    "project_type": "COBOL",
    "statistics": {
      "total_files": 62,
      "total_programs": 42,
      "total_copybooks": 20,
      "total_lines": 8034,
      "entry_points": 42,
      "program_types": {
        "CICS_PROGRAM": 8,
        "MAIN_PROGRAM": 16,
        "CALLED_PROGRAM": 9,
        "DB2_PROGRAM": 10,
        "COPYBOOK": 19
      },
      "total_exec_statements": 110,
      "total_sql_statements": 110,
      "total_paragraphs": 203,
      "total_sentences": 326,
      "files_with_dependencies": 34,
      "max_dependencies": 7,
      "most_used_copybooks": [
        [
          "ERRHAND",
          19
        ],
        [
          "RTNCODE",
          9
        ],
        [
          "ERRHND",
          5
        ],
        [
          "PORTFLIO",
          5
        ],
        [
          "SQLCA",
          5
        ],
        [
          "DBPROC",
          5
        ],
        [
          "BCHCTL",
          5
        ],
        [
          "BCHCON",
          4
        ],
        [
          "INQCOM",
          3
        ],
        [
          "POSREC",
          3
        ]
      ],
      "most_called_programs": [
        [
          "the",
          1
        ]
      ],
      "jcl_files": 15
    },
    "jcl_dependencies": {
      "RTNANA00": [
        "RTNANA00"
      ],
      "UTLMNT00": [
        "UTLMNT00"
      ],
      "UTLVAL00": [
        "UTLVAL00"
      ],
      "UTLMON00": [
        "UTLMON00"
      ],
      "PORTUPDT": [
        "PORTUPDT"
      ],
      "PORTREAD": [
        "PORTREAD"
      ],
      "PORTADD": [
        "PORTADD"
      ],
      "PORTDEF": [
        "IDCAMS"
      ],
      "PORTDEL": [
        "PORTDEL"
      ],
      "PORTTEST": [
        "PORTTEST"
      ],
      "TSTGEN00": [
        "TSTGEN00"
      ],
      "TSTVAL00": [
        "TSTVAL00"
      ],
      "RPTSTA00": [
        "RPTSTA00"
      ],
      "RPTAUD00": [
        "RPTAUD00"
      ],
      "RPTPOS00": [
        "RPTPOS00"
      ]
    }
  },
  "dependency_graph": {
    "src/programs/online/DB2RECV.cbl": {
      "file_path": "src/programs/online/DB2RECV.cbl",
      "file_type": "cobol",
      "program_id": "DB2RECV",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/ERRHND.cpy",
        "src/copybook/online/DB2REQ.cpy"
      ],
      "copybook_dependencies": [
        "ERRHND",
        "DB2REQ"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "CICS",
        "CICS",
        "CICS",
        "           EXEC SQL ROLLBACK END-EXEC.",
        "CICS"
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "P100-RECOVER-CONNECTION": [],
            "P100-EXIT": [],
            "P110-ATTEMPT-RECONNECT": [],
            "P110-EXIT": [],
            "P120-WAIT-INTERVAL": [],
            "P120-EXIT": [],
            "P200-RECOVER-TRANSACTION": [],
            "P200-EXIT": [],
            "P300-RECOVER-CURSOR": [],
            "P300-EXIT": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-RECOVER-CONNECTION",
        "P100-EXIT",
        "P110-ATTEMPT-RECONNECT",
        "P110-EXIT",
        "P120-WAIT-INTERVAL"
      ],
      "perform_targets": [
        "P100-RECOVER-CONNECTION",
        "P200-RECOVER-TRANSACTION",
        "P300-RECOVER-CURSOR",
        "UNTIL",
        "P110-ATTEMPT-RECONNECT",
        "P120-WAIT-INTERVAL"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 145
    },
    "src/programs/online/DB2ONLN.cbl": {
      "file_path": "src/programs/online/DB2ONLN.cbl",
      "file_type": "cobol",
      "program_id": "DB2ONLN",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/ERRHND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "CICS",
        "           EXEC SQL CONNECT TO POSMVP END-EXEC.",
        "           EXEC SQL DISCONNECT END-EXEC.",
        "           EXEC SQL SELECT CURRENT SERVER                     INTO :DB2-ERROR-MSG            END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "P100-PROCESS-CONNECT": [],
            "P100-EXIT": [],
            "P110-ESTABLISH-CONNECTION": [],
            "P110-EXIT": [],
            "P120-GENERATE-TOKEN": [],
            "P120-EXIT": [],
            "P200-PROCESS-DISCONNECT": [],
            "P200-EXIT": [],
            "P300-CHECK-STATUS": [],
            "P300-EXIT": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-PROCESS-CONNECT",
        "P100-EXIT",
        "P110-ESTABLISH-CONNECTION",
        "P110-EXIT",
        "P120-GENERATE-TOKEN"
      ],
      "perform_targets": [
        "P100-PROCESS-CONNECT",
        "P200-PROCESS-DISCONNECT",
        "P300-CHECK-STATUS",
        "P110-ESTABLISH-CONNECTION",
        "P120-GENERATE-TOKEN"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 120
    },
    "src/programs/online/ERRHNDL.cbl": {
      "file_path": "src/programs/online/ERRHNDL.cbl",
      "file_type": "cobol",
      "program_id": "ERRHNDL",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/ERRHND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHND"
      ],
      "program_calls": [],
      "exec_statements": [
        "   EXEC SQL INCLUDE SQLCA END-EXEC.",
        "   EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "   EXEC SQL END DECLARE SECTION END-EXEC.",
        "CICS",
        "   EXEC SQL         INSERT INTO ERRLOG         VALUES (:LOG-TIMESTAMP,                :LOG-PROGRAM,                :LOG-PARAGRAPH,                :LOG-SQLCODE,                :LOG-CICS-RESP,                :LOG-SEVERITY,                :LOG-MESSAGE,                :LOG-TRACE-ID)    END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "_NOPARA": [
              "PERFORM P100-INIT-ERROR-HANDLER THRU P100-EXIT",
              "PERFORM P200-LOG-ERROR THRU P200-EXIT",
              "PERFORM P300-FORMAT-MESSAGE THRU P300-EXIT",
              "PERFORM P400-DETERMINE-ACTION THRU P400-EXIT",
              "EXEC CICS RETURN END-EXEC"
            ],
            "P100-INIT-ERROR-HANDLER": [
              "MOVE DFHCOMMAREA TO WS-ERROR-AREA",
              "MOVE FUNCTION CURRENT-DATE TO ERR-TIMESTAMP"
            ],
            "END-IF": [],
            "P100-EXIT": [],
            "EXIT": [],
            "P200-LOG-ERROR": [
              "IF ERR-TRACE-ID = SPACES MOVE FUNCTION RANDOM TO ERR-TRACE-ID MOVE ERR-TIMESTAMP    TO LOG-TIMESTAMP",
              "MOVE ERR-PROGRAM      TO LOG-PROGRAM",
              "MOVE ERR-PARAGRAPH    TO LOG-PARAGRAPH",
              "MOVE ERR-SQLCODE      TO LOG-SQLCODE",
              "MOVE ERR-CICS-RESP    TO LOG-CICS-RESP",
              "MOVE ERR-SEVERITY     TO LOG-SEVERITY",
              "MOVE ERR-MESSAGE      TO LOG-MESSAGE",
              "MOVE ERR-TRACE-ID     TO LOG-TRACE-ID"
            ],
            "END-EXEC": [],
            "P200-EXIT": [],
            "P300-FORMAT-MESSAGE": [
              "INSERT INTO ERRLOG VALUES (:LOG-TIMESTAMP, :LOG-PROGRAM, :LOG-PARAGRAPH, :LOG-SQLCODE, :LOG-CICS-RESP, :LOG-SEVERITY, :LOG-MESSAGE, :LOG-TRACE-ID) IF SQLCODE NOT = 0 MOVE 'Error logging failed' TO ERR-MESSAGE SET ERR-FATAL TO TRUE STRING 'Error in ' DELIMITED BY SIZE ERR-PROGRAM DELIMITED BY SPACE ' - ' DELIMITED BY SIZE ERR-MESSAGE DELIMITED BY SIZE ' (' DELIMITED BY SIZE ERR-TRACE-ID DELIMITED BY SIZE ')' DELIMITED BY SIZE INTO ERR-MESSAGE"
            ],
            "P300-EXIT": [],
            "P400-DETERMINE-ACTION": [],
            "END-EVALUATE": [
              "EVALUATE TRUE WHEN ERR-FATAL SET ERR-ABEND TO TRUE WHEN ERR-WARNING SET ERR-CONTINUE TO TRUE WHEN ERR-INFO SET ERR-CONTINUE TO TRUE WHEN OTHER SET ERR-RETURN TO TRUE MOVE WS-ERROR-AREA TO DFHCOMMAREA"
            ],
            "P400-EXIT": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-INIT-ERROR-HANDLER",
        "END-IF",
        "P100-EXIT",
        "EXIT",
        "P200-LOG-ERROR"
      ],
      "perform_targets": [
        "P100-INIT-ERROR-HANDLER",
        "P200-LOG-ERROR",
        "P300-FORMAT-MESSAGE",
        "P400-DETERMINE-ACTION"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 118
    },
    "src/programs/online/INQHIST.cbl": {
      "file_path": "src/programs/online/INQHIST.cbl",
      "file_type": "cobol",
      "program_id": "INQHIST",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/INQCOM.cpy"
      ],
      "copybook_dependencies": [
        "INQCOM"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS"
      ],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "_NOPARA": [
              "PERFORM P100-INIT-PROGRAM THRU P100-EXIT",
              "PERFORM P200-GET-HISTORY THRU P200-EXIT",
              "PERFORM P300-FORMAT-DISPLAY THRU P300-EXIT",
              "EXEC CICS RETURN END-EXEC"
            ],
            "P100-INIT-PROGRAM": [
              "MOVE DFHCOMMAREA TO WS-COMMAREA",
              "MOVE ZEROS TO WS-ROW-COUNT",
              "SET NO-MORE-ROWS TO TRUE",
              "EXEC CICS HANDLE CONDITION ERROR(P999-ERROR-ROUTINE) END-EXEC",
              "PERFORM P150-DB2-CONNECT THRU P150-EXIT"
            ],
            "P100-EXIT": [
              "EXIT"
            ],
            "P150-DB2-CONNECT": [
              "MOVE 'C' TO DB2-REQUEST-TYPE",
              "EXEC CICS LINK PROGRAM('DB2ONLN') COMMAREA(WS-DB2-REQUEST) LENGTH(LENGTH OF WS-DB2-REQUEST) END-EXEC",
              "IF DB2-RESPONSE-CODE NOT = 0 MOVE 'C' TO RECV-REQUEST-TYPE MOVE 'INQHIST' TO RECV-PROGRAM MOVE DB2-SQLCODE TO RECV-SQLCODE EXEC CICS LINK PROGRAM('DB2RECV') COMMAREA(WS-RECOVERY-REQUEST) LENGTH(LENGTH OF WS-RECOVERY-REQUEST) END-EXEC IF RECV-SUCCESS PERFORM P150-DB2-CONNECT THRU P150-EXIT ELSE MOVE RECV-MESSAGE TO INQCOM-ERROR-MSG OF WS-COMMAREA PERFORM P999-ERROR-ROUTINE THRU P999-EXIT END-IF END-IF",
              "MOVE DB2-CONNECTION-TOKEN TO WS-DB2-TOKEN"
            ],
            "P150-EXIT": [
              "EXIT"
            ],
            "P200-GET-HISTORY": [
              "MOVE 'SELECT TRANS_DATE, TRANS_TYPE, TRANS_UNITS, ' & 'TRANS_PRICE, TRANS_AMOUNT ' & 'FROM POSHIST ' & 'WHERE ACCOUNT_NO = ? ' & 'ORDER BY TRANS_DATE DESC' TO CURS-STMT",
              "MOVE 'D' TO CURS-REQUEST-TYPE",
              "EXEC CICS LINK PROGRAM('CURSMGR') COMMAREA(WS-CURSOR-REQUEST) LENGTH(LENGTH OF WS-CURSOR-REQUEST) END-EXEC",
              "IF CURS-RESPONSE-CODE = 0 MOVE 'O' TO CURS-REQUEST-TYPE EXEC CICS LINK PROGRAM('CURSMGR') COMMAREA(WS-CURSOR-REQUEST) LENGTH(LENGTH OF WS-CURSOR-REQUEST) END-EXEC IF CURS-RESPONSE-CODE = 0 PERFORM P250-FETCH-HISTORY THRU P250-EXIT END-IF END-IF",
              "MOVE 'C' TO CURS-REQUEST-TYPE",
              "EXEC CICS LINK PROGRAM('CURSMGR') COMMAREA(WS-CURSOR-REQUEST) LENGTH(LENGTH OF WS-CURSOR-REQUEST) END-EXEC"
            ],
            "P200-EXIT": [
              "EXIT"
            ],
            "P250-FETCH-HISTORY": [
              "MOVE 'F' TO CURS-REQUEST-TYPE",
              "EXEC CICS LINK PROGRAM('CURSMGR') COMMAREA(WS-CURSOR-REQUEST) LENGTH(LENGTH OF WS-CURSOR-REQUEST) END-EXEC",
              "IF CURS-RESPONSE-CODE >= 0 MOVE CURS-DATA-AREA TO WS-HISTORY-TABLE END-IF"
            ],
            "P250-EXIT": [
              "EXIT"
            ],
            "P300-FORMAT-DISPLAY": [
              "EXEC CICS SEND MAP('HISMAP') MAPSET('INQSET') FROM(WS-HISTORY-TABLE) LENGTH(LENGTH OF WS-HISTORY-TABLE) ERASE RESP(WS-RESPONSE-CODE) END-EXEC"
            ],
            "P300-EXIT": [
              "EXIT"
            ],
            "P999-ERROR-ROUTINE": [
              "MOVE SQLCODE TO INQCOM-RESPONSE-CODE OF WS-COMMAREA",
              "MOVE WS-COMMAREA TO DFHCOMMAREA"
            ],
            "P999-EXIT": [
              "EXIT"
            ]
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-INIT-PROGRAM",
        "P100-EXIT",
        "P150-DB2-CONNECT",
        "P150-EXIT",
        "P200-GET-HISTORY"
      ],
      "perform_targets": [
        "P100-INIT-PROGRAM",
        "P200-GET-HISTORY",
        "P300-FORMAT-DISPLAY",
        "P150-DB2-CONNECT",
        "P150-DB2-CONNECT",
        "P999-ERROR-ROUTINE",
        "P250-FETCH-HISTORY"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 193
    },
    "src/programs/online/INQONLN.cbl": {
      "file_path": "src/programs/online/INQONLN.cbl",
      "file_type": "cobol",
      "program_id": "INQONLN",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/INQCOM.cpy",
        "src/copybook/online/ERRHND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHND",
        "INQCOM"
      ],
      "program_calls": [],
      "exec_statements": [
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS",
        "CICS"
      ],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "_NOPARA": [
              "EXEC CICS HANDLE CONDITION ERROR(P900-ERROR-ROUTINE) PGMIDERR(P900-ERROR-ROUTINE) NOTFND(P900-ERROR-ROUTINE) END-EXEC",
              "PERFORM P100-PROCESS-REQUEST THRU P100-EXIT UNTIL SESSION-TERMINATED",
              "EXEC CICS RETURN END-EXEC"
            ],
            "P100-PROCESS-REQUEST": [
              "MOVE LOW-VALUES TO WS-COMMAREA",
              "EXEC CICS RECEIVE MAP('INQMAP') MAPSET('INQSET') INTO(WS-COMMAREA) RESP(WS-RESPONSE-CODE) END-EXEC",
              "EVALUATE WS-COMMAREA-FUNCTION WHEN 'MENU' PERFORM P200-DISPLAY-MENU THRU P200-EXIT WHEN 'INQP' PERFORM P300-PORTFOLIO-INQUIRY THRU P300-EXIT WHEN 'INQH' PERFORM P400-HISTORY-INQUIRY THRU P400-EXIT WHEN 'EXIT' SET SESSION-TERMINATED TO TRUE WHEN OTHER PERFORM P900-ERROR-ROUTINE THRU P900-EXIT END-EVALUATE",
              "PERFORM P050-SECURITY-CHECK THRU P050-EXIT",
              "IF SEC-RESPONSE-CODE NOT = 0 MOVE SEC-ERROR-INFO TO WS-ERROR-MESSAGE PERFORM P900-ERROR-ROUTINE THRU P900-EXIT EXEC CICS RETURN END-EXEC END-IF"
            ],
            "P100-EXIT": [
              "EXIT"
            ],
            "P200-DISPLAY-MENU": [
              "EXEC CICS SEND MAP('INQMNU') MAPSET('INQSET') ERASE RESP(WS-RESPONSE-CODE) END-EXEC"
            ],
            "P200-EXIT": [
              "EXIT"
            ],
            "P300-PORTFOLIO-INQUIRY": [
              "EXEC CICS LINK PROGRAM('INQPORT') COMMAREA(WS-COMMAREA) LENGTH(LENGTH OF WS-COMMAREA) RESP(WS-RESPONSE-CODE) END-EXEC"
            ],
            "P300-EXIT": [
              "EXIT"
            ],
            "P400-HISTORY-INQUIRY": [
              "EXEC CICS LINK PROGRAM('INQHIST') COMMAREA(WS-COMMAREA) LENGTH(LENGTH OF WS-COMMAREA) RESP(WS-RESPONSE-CODE) END-EXEC"
            ],
            "P400-EXIT": [
              "EXIT"
            ],
            "P900-ERROR-ROUTINE": [
              "MOVE 'INQONLN' TO ERR-PROGRAM",
              "MOVE 'P900-ERROR-ROUTINE' TO ERR-PARAGRAPH",
              "MOVE EIBRESP TO ERR-CICS-RESP",
              "MOVE EIBRESP2 TO ERR-CICS-RESP2",
              "SET ERR-WARNING TO TRUE",
              "EXEC CICS LINK PROGRAM('ERRHNDL') COMMAREA(WS-ERROR-AREA) LENGTH(LENGTH OF WS-ERROR-AREA) END-EXEC",
              "IF ERR-ABEND EXEC CICS ABEND ABCODE('IERR') END-EXEC END-IF",
              "MOVE ERR-MESSAGE TO WS-ERROR-MESSAGE"
            ],
            "P900-EXIT": [
              "EXIT"
            ],
            "P050-SECURITY-CHECK": [
              "MOVE 'V' TO SEC-REQUEST-TYPE",
              "EXEC CICS ASSIGN USERID(SEC-USER-ID) END-EXEC",
              "EXEC CICS LINK PROGRAM('SECMGR') COMMAREA(WS-SECURITY-REQUEST) LENGTH(LENGTH OF WS-SECURITY-REQUEST) END-EXEC",
              "IF SEC-RESPONSE-CODE = 0 MOVE 'A' TO SEC-REQUEST-TYPE MOVE 'INQONLN' TO SEC-RESOURCE-NAME MOVE 'READ' TO SEC-ACCESS-TYPE EXEC CICS LINK PROGRAM('SECMGR') COMMAREA(WS-SECURITY-REQUEST) LENGTH(LENGTH OF WS-SECURITY-REQUEST) END-EXEC IF SEC-RESPONSE-CODE = 0 MOVE 'L' TO SEC-REQUEST-TYPE EXEC CICS LINK PROGRAM('SECMGR') COMMAREA(WS-SECURITY-REQUEST) LENGTH(LENGTH OF WS-SECURITY-REQUEST) END-EXEC END-IF END-IF"
            ],
            "P050-EXIT": [
              "EXIT"
            ]
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-PROCESS-REQUEST",
        "P100-EXIT",
        "P200-DISPLAY-MENU",
        "P200-EXIT",
        "P300-PORTFOLIO-INQUIRY"
      ],
      "perform_targets": [
        "P100-PROCESS-REQUEST",
        "P200-DISPLAY-MENU",
        "P300-PORTFOLIO-INQUIRY",
        "P400-HISTORY-INQUIRY",
        "P900-ERROR-ROUTINE",
        "P050-SECURITY-CHECK",
        "P900-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 171
    },
    "src/programs/online/SECMGR.cbl": {
      "file_path": "src/programs/online/SECMGR.cbl",
      "file_type": "cobol",
      "program_id": "SECMGR",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/ERRHND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "CICS",
        "CICS",
        "           EXEC SQL                 SELECT COUNT(*)                 INTO :WS-DB2-AREA                 FROM AUTHFILE                 WHERE USER_ID = :SEC-USER-ID                   AND RESOURCE = :SEC-RESOURCE-NAME                   AND ACCESS_TYPE = :SEC-ACCESS-TYPE            END-EXEC.",
        "CICS",
        "           EXEC SQL                 INSERT INTO AUDITLOG                 (TIMESTAMP, USER_ID, TERMINAL_ID,                  TRANS_ID, PROGRAM, ACCESS_TYPE)                 VALUES                 (:WS-TIMESTAMP, :WS-USER-ID, :WS-TERMINAL-ID,                  :WS-TRANSACTION-ID, :WS-PROGRAM-NAME,                  :WS-ACCESS-TYPE)            END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "P100-VALIDATE-USER": [],
            "P100-EXIT": [],
            "P200-CHECK-AUTH": [],
            "P200-EXIT": [],
            "P300-LOG-ACCESS": [],
            "P300-EXIT": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-VALIDATE-USER",
        "P100-EXIT",
        "P200-CHECK-AUTH",
        "P200-EXIT",
        "P300-LOG-ACCESS"
      ],
      "perform_targets": [
        "P100-VALIDATE-USER",
        "P200-CHECK-AUTH",
        "P300-LOG-ACCESS"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 135
    },
    "src/programs/online/INQPORT.cbl": {
      "file_path": "src/programs/online/INQPORT.cbl",
      "file_type": "cobol",
      "program_id": "INQPORT",
      "program_type": "CICS_PROGRAM",
      "dependencies": [
        "src/copybook/online/INQCOM.cpy",
        "src/copybook/common/POSREC.cpy"
      ],
      "copybook_dependencies": [
        "INQCOM",
        "POSREC"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLPOS END-EXEC.",
        "CICS",
        "CICS",
        "CICS",
        "CICS"
      ],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "_NOPARA": [
              "PERFORM P100-INIT-PROGRAM THRU P100-EXIT",
              "PERFORM P200-GET-POSITION THRU P200-EXIT",
              "IF POSITION-EXISTS PERFORM P300-FORMAT-DISPLAY THRU P300-EXIT ELSE PERFORM P900-NOT-FOUND THRU P900-EXIT END-IF",
              "EXEC CICS RETURN END-EXEC"
            ],
            "P100-INIT-PROGRAM": [
              "MOVE LOW-VALUES TO WS-POSITION-RECORD MOVE DFHCOMMAREA TO WS-COMMAREA",
              "EXEC CICS HANDLE CONDITION ERROR(P999-ERROR-ROUTINE) NOTFND(P900-NOT-FOUND) END-EXEC"
            ],
            "P100-EXIT": [
              "EXIT"
            ],
            "P200-GET-POSITION": [
              "MOVE WS-COMMAREA-ACCOUNT-NO TO POSITION-ACCOUNT OF WS-POSITION-RECORD",
              "EXEC CICS READ FILE('POSFILE') INTO(WS-POSITION-RECORD) RIDFLD(POSITION-ACCOUNT OF WS-POSITION-RECORD) RESP(WS-RESPONSE-CODE) END-EXEC",
              "IF WS-RESPONSE-CODE = DFHRESP(NORMAL) SET POSITION-EXISTS TO TRUE ELSE SET NO-POSITION TO TRUE END-IF"
            ],
            "P200-EXIT": [
              "EXIT"
            ],
            "P300-FORMAT-DISPLAY": [
              "EXEC CICS SEND MAP('POSMAP') MAPSET('INQSET') FROM(WS-POSITION-RECORD) ERASE RESP(WS-RESPONSE-CODE) END-EXEC"
            ],
            "P300-EXIT": [
              "EXIT"
            ],
            "P900-NOT-FOUND": [
              "MOVE 'Position not found for account' TO INQCOM-ERROR-MSG OF WS-COMMAREA",
              "MOVE WS-COMMAREA TO DFHCOMMAREA"
            ],
            "P900-EXIT": [
              "EXIT"
            ],
            "P999-ERROR-ROUTINE": [
              "MOVE 'Error accessing position data' TO INQCOM-ERROR-MSG OF WS-COMMAREA",
              "MOVE WS-RESPONSE-CODE TO INQCOM-RESPONSE-CODE OF WS-COMMAREA",
              "MOVE WS-COMMAREA TO DFHCOMMAREA"
            ],
            "P999-EXIT": [
              "EXIT"
            ]
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-INIT-PROGRAM",
        "P100-EXIT",
        "P200-GET-POSITION",
        "P200-EXIT",
        "P300-FORMAT-DISPLAY"
      ],
      "perform_targets": [
        "P100-INIT-PROGRAM",
        "P200-GET-POSITION",
        "P300-FORMAT-DISPLAY",
        "P900-NOT-FOUND"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 110
    },
    "src/programs/online/CURSMGR.cbl": {
      "file_path": "src/programs/online/CURSMGR.cbl",
      "file_type": "cobol",
      "program_id": "CURSMGR",
      "program_type": "CICS_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "CICS",
        "           EXEC SQL DECLARE :CURS-NAME CURSOR FOR                 :CURS-STMT            END-EXEC.",
        "           EXEC SQL OPEN :CURS-NAME END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "P100-DECLARE-CURSOR": [],
            "P100-EXIT": [],
            "P200-OPEN-CURSOR": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-DECLARE-CURSOR",
        "P100-EXIT",
        "P200-OPEN-CURSOR"
      ],
      "perform_targets": [
        "P100-DECLARE-CURSOR",
        "P200-OPEN-CURSOR",
        "P300-FETCH-DATA",
        "P400-CLOSE-CURSOR"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 91
    },
    "src/programs/utility/UTLVAL00.cbl": {
      "file_path": "src/programs/utility/UTLVAL00.cbl",
      "file_type": "cobol",
      "program_id": "UTLVAL00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/POSREC.cpy",
        "src/copybook/common/TRNREC.cpy",
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "TRNREC",
        "ERRHAND",
        "POSREC",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "VALIDATION-CONTROL",
        "ERROR-REPORT"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "CONFIGURATION": {
            "SPECIAL-NAMES": []
          },
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-INIT-PROCESSING"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT VALIDATION-CONTROL IF WS-VAL-STATUS NOT = '00' MOVE 'ERROR OPENING VALIDATION CONTROL' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT POSITION-MASTER IF WS-POS-STATUS NOT = '00' MOVE 'ERROR OPENING POSITION MASTER' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT TRANSACTION-HISTORY IF WS-TRAN-STATUS NOT = '00' MOVE 'ERROR OPENING TRANSACTION HISTORY' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT ERROR-REPORT IF WS-RPT-STATUS NOT = '00' MOVE 'ERROR OPENING ERROR REPORT' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-INIT-PROCESSING": [
              "INITIALIZE WS-VALIDATION-TOTALS"
            ],
            "2000-PROCESS": [
              "PERFORM UNTIL END-OF-VALIDATION READ VALIDATION-CONTROL AT END SET END-OF-VALIDATION TO TRUE NOT AT END PERFORM 2100-PROCESS-VALIDATION END-READ END-PERFORM"
            ],
            "2100-PROCESS-VALIDATION": [
              "EVALUATE VAL-TYPE WHEN WS-INTEGRITY PERFORM 2200-CHECK-INTEGRITY WHEN WS-XREF PERFORM 2300-CHECK-XREF WHEN WS-FORMAT PERFORM 2400-CHECK-FORMAT WHEN WS-BALANCE PERFORM 2500-CHECK-BALANCE WHEN OTHER MOVE 'INVALID VALIDATION TYPE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-EVALUATE"
            ],
            "2200-CHECK-INTEGRITY": [
              "PERFORM 2210-CHECK-POSITION-INTEGRITY PERFORM 2220-CHECK-TRANSACTION-INTEGRITY"
            ],
            "2300-CHECK-XREF": [
              "PERFORM 2310-CHECK-POSITION-XREF PERFORM 2320-CHECK-TRANSACTION-XREF"
            ],
            "2400-CHECK-FORMAT": [
              "PERFORM 2410-CHECK-POSITION-FORMAT PERFORM 2420-CHECK-TRANSACTION-FORMAT"
            ],
            "2500-CHECK-BALANCE": [
              "PERFORM 2510-ACCUMULATE-POSITIONS PERFORM 2520-VERIFY-BALANCES"
            ],
            "3000-CLEANUP": [
              "CLOSE VALIDATION-CONTROL POSITION-MASTER TRANSACTION-HISTORY ERROR-REPORT"
            ],
            "9999-ERROR-HANDLER": [
              "ADD 1 TO WS-RECORDS-ERROR SET ERROR-FOUND TO TRUE MOVE WS-ERROR-MESSAGE TO WS-ERR-DESC WRITE ERROR-RECORD FROM WS-ERROR-LINE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "SPECIAL-NAMES",
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-INIT-PROCESSING",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "UNTIL",
        "2100-PROCESS-VALIDATION",
        "2200-CHECK-INTEGRITY",
        "2300-CHECK-XREF",
        "2400-CHECK-FORMAT",
        "2500-CHECK-BALANCE",
        "9999-ERROR-HANDLER",
        "2210-CHECK-POSITION-INTEGRITY",
        "2220-CHECK-TRANSACTION-INTEGRITY",
        "2310-CHECK-POSITION-XREF",
        "2320-CHECK-TRANSACTION-XREF",
        "2410-CHECK-POSITION-FORMAT",
        "2420-CHECK-TRANSACTION-FORMAT",
        "2510-ACCUMULATE-POSITIONS",
        "2520-VERIFY-BALANCES"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 190
    },
    "src/programs/utility/UTLMON00.cbl": {
      "file_path": "src/programs/utility/UTLMON00.cbl",
      "file_type": "cobol",
      "program_id": "UTLMON00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "RTNCODE",
        "DB2STAT"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "MONITOR-CONFIG",
        "MONITOR-LOG",
        "ALERT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "CONFIGURATION": {
            "SPECIAL-NAMES": []
          },
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL WS-HOUR = 23 PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-INIT-PROCESSING PERFORM 1300-READ-CONFIG"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT MONITOR-CONFIG IF WS-CFG-STATUS NOT = '00' MOVE 'ERROR OPENING CONFIG FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT MONITOR-LOG IF WS-LOG-STATUS NOT = '00' MOVE 'ERROR OPENING MONITOR LOG' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT ALERT-FILE IF WS-ALERT-STATUS NOT = '00' MOVE 'ERROR OPENING ALERT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT DB2-STATS IF WS-DB2-STATUS NOT = '00' MOVE 'ERROR OPENING DB2 STATS' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-INIT-PROCESSING": [
              "ACCEPT WS-TIMESTAMP FROM TIME"
            ],
            "1300-READ-CONFIG": [
              "PERFORM UNTIL END-OF-CONFIG READ MONITOR-CONFIG AT END SET END-OF-CONFIG TO TRUE NOT AT END PERFORM 1310-STORE-CONFIG END-READ END-PERFORM"
            ],
            "2000-PROCESS": [
              "PERFORM 2100-COLLECT-METRICS PERFORM 2200-CHECK-THRESHOLDS PERFORM 2300-LOG-STATUS PERFORM 2400-GENERATE-ALERTS CALL 'ILBOABN0' USING WS-MINUTE PERFORM 1200-INIT-PROCESSING"
            ],
            "2100-COLLECT-METRICS": [
              "PERFORM 2110-GET-CPU-METRICS PERFORM 2120-GET-MEMORY-METRICS PERFORM 2130-GET-DASD-METRICS PERFORM 2140-GET-DB2-METRICS"
            ],
            "2200-CHECK-THRESHOLDS": [
              "PERFORM 2210-CHECK-UTILIZATION PERFORM 2220-CHECK-RESPONSE PERFORM 2230-CHECK-QUEUES PERFORM 2240-CHECK-ERRORS"
            ],
            "2300-LOG-STATUS": [
              "MOVE WS-TIMESTAMP TO LOG-TIMESTAMP PERFORM 2310-LOG-RESOURCES PERFORM 2320-LOG-PERFORMANCE"
            ],
            "2400-GENERATE-ALERTS": [
              "IF THRESHOLD-MET PERFORM 2410-FORMAT-ALERT PERFORM 2420-WRITE-ALERT END-IF"
            ],
            "3000-CLEANUP": [
              "CLOSE MONITOR-CONFIG MONITOR-LOG ALERT-FILE DB2-STATS"
            ],
            "9999-ERROR-HANDLER": [
              "DISPLAY WS-ERROR-MESSAGE UPON CONS MOVE 12 TO RETURN-CODE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "SPECIAL-NAMES",
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-INIT-PROCESSING",
        "1300-READ-CONFIG",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "UNTIL",
        "1310-STORE-CONFIG",
        "2100-COLLECT-METRICS",
        "2200-CHECK-THRESHOLDS",
        "2300-LOG-STATUS",
        "2400-GENERATE-ALERTS",
        "1200-INIT-PROCESSING",
        "2110-GET-CPU-METRICS",
        "2120-GET-MEMORY-METRICS",
        "2130-GET-DASD-METRICS",
        "2140-GET-DB2-METRICS",
        "2210-CHECK-UTILIZATION",
        "2220-CHECK-RESPONSE",
        "2230-CHECK-QUEUES",
        "2240-CHECK-ERRORS",
        "2310-LOG-RESOURCES",
        "2320-LOG-PERFORMANCE",
        "2410-FORMAT-ALERT",
        "2420-WRITE-ALERT"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 221
    },
    "src/programs/utility/UTLMNT00.cbl": {
      "file_path": "src/programs/utility/UTLMNT00.cbl",
      "file_type": "cobol",
      "program_id": "UTLMNT00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "CONTROL-FILE",
        "ARCHIVE-FILE",
        "REPORT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "CONFIGURATION": {
            "SPECIAL-NAMES": []
          },
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-INIT-PROCESSING"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT CONTROL-FILE IF WS-CTL-STATUS NOT = '00' MOVE 'ERROR OPENING CONTROL FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT ARCHIVE-FILE IF WS-ARCH-STATUS NOT = '00' MOVE 'ERROR OPENING ARCHIVE FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT REPORT-FILE IF WS-REPORT-STATUS NOT = '00' MOVE 'ERROR OPENING REPORT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-INIT-PROCESSING": [
              "INITIALIZE WS-COUNTERS"
            ],
            "2000-PROCESS": [
              "PERFORM UNTIL END-OF-CONTROL READ CONTROL-FILE AT END SET END-OF-CONTROL TO TRUE NOT AT END PERFORM 2100-PROCESS-FUNCTION END-READ END-PERFORM"
            ],
            "2100-PROCESS-FUNCTION": [
              "EVALUATE CTL-FUNCTION WHEN WS-ARCHIVE PERFORM 2200-ARCHIVE-PROCESS WHEN WS-CLEANUP PERFORM 2300-CLEANUP-PROCESS WHEN WS-REORG PERFORM 2400-REORG-PROCESS WHEN WS-ANALYZE PERFORM 2500-ANALYZE-PROCESS WHEN OTHER MOVE 'INVALID FUNCTION SPECIFIED' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-EVALUATE"
            ],
            "2200-ARCHIVE-PROCESS": [
              "MOVE CTL-FILE-NAME TO WS-VSAM-NAME PERFORM 2210-OPEN-VSAM PERFORM 2220-ARCHIVE-RECORDS PERFORM 2230-CLOSE-VSAM"
            ],
            "2300-CLEANUP-PROCESS": [
              "MOVE CTL-FILE-NAME TO WS-VSAM-NAME PERFORM 2310-ANALYZE-SPACE PERFORM 2320-DELETE-OLD PERFORM 2330-UPDATE-CATALOG"
            ],
            "2400-REORG-PROCESS": [
              "MOVE CTL-FILE-NAME TO WS-VSAM-NAME PERFORM 2410-EXPORT-DATA PERFORM 2420-DELETE-DEFINE PERFORM 2430-IMPORT-DATA"
            ],
            "2500-ANALYZE-PROCESS": [
              "MOVE CTL-FILE-NAME TO WS-VSAM-NAME PERFORM 2510-COLLECT-STATS PERFORM 2520-GENERATE-REPORT"
            ],
            "3000-CLEANUP": [
              "CLOSE CONTROL-FILE ARCHIVE-FILE REPORT-FILE"
            ],
            "9999-ERROR-HANDLER": [
              "ADD 1 TO WS-ERROR-COUNT DISPLAY WS-ERROR-MESSAGE UPON CONS IF WS-ERROR-COUNT > 100 MOVE 12 TO RETURN-CODE GOBACK END-IF"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "SPECIAL-NAMES",
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-INIT-PROCESSING",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "UNTIL",
        "2100-PROCESS-FUNCTION",
        "2200-ARCHIVE-PROCESS",
        "2300-CLEANUP-PROCESS",
        "2400-REORG-PROCESS",
        "2500-ANALYZE-PROCESS",
        "9999-ERROR-HANDLER",
        "2210-OPEN-VSAM",
        "2220-ARCHIVE-RECORDS",
        "2230-CLOSE-VSAM",
        "2310-ANALYZE-SPACE",
        "2320-DELETE-OLD",
        "2330-UPDATE-CATALOG",
        "2410-EXPORT-DATA",
        "2420-DELETE-DEFINE",
        "2430-IMPORT-DATA",
        "2510-COLLECT-STATS",
        "2520-GENERATE-REPORT"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 182
    },
    "src/programs/portfolio/PORTDEL.cbl": {
      "file_path": "src/programs/portfolio/PORTDEL.cbl",
      "file_type": "cobol",
      "program_id": "PORTDEL",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTFLIO.cpy"
      ],
      "copybook_dependencies": [
        "PORTFLIO"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PORTFOLIO-FILE",
        "DELETE-FILE",
        "AUDIT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-WORK-AREAS OPEN I-O   PORTFOLIO-FILE OPEN INPUT DELETE-FILE OPEN OUTPUT AUDIT-FILE IF NOT WS-SUCCESS-STATUS OR NOT WS-DEL-SUCCESS OR NOT WS-AUD-SUCCESS DISPLAY 'Error opening files: ' 'PORT=' WS-FILE-STATUS 'DEL='  WS-DEL-STATUS 'AUD='  WS-AUD-STATUS MOVE WS-ERROR TO WS-RETURN-CODE PERFORM 3000-TERMINATE END-IF"
            ],
            "2000-PROCESS": [
              "READ DELETE-FILE AT END SET END-OF-FILE TO TRUE NOT AT END PERFORM 2100-PROCESS-DELETE END-READ"
            ],
            "2100-PROCESS-DELETE": [
              "MOVE DEL-KEY TO PORT-KEY READ PORTFOLIO-FILE EVALUATE TRUE WHEN WS-SUCCESS-STATUS PERFORM 2200-DELETE-RECORD WHEN WS-REC-NOT-FND ADD 1 TO WS-NOT-FND-COUNT DISPLAY 'Record not found: ' PORT-KEY WHEN OTHER ADD 1 TO WS-ERROR-COUNT DISPLAY 'Read error for: ' PORT-KEY END-EVALUATE"
            ],
            "2200-DELETE-RECORD": [
              "DELETE PORTFOLIO-FILE IF WS-SUCCESS-STATUS ADD 1 TO WS-DELETE-COUNT PERFORM 2300-WRITE-AUDIT ELSE ADD 1 TO WS-ERROR-COUNT DISPLAY 'Delete failed for: ' PORT-KEY END-IF"
            ],
            "2300-WRITE-AUDIT": [
              "ACCEPT WS-TIMESTAMP FROM TIME STAMP MOVE WS-TIMESTAMP TO AUD-TIMESTAMP MOVE 'DELETE' TO AUD-ACTION MOVE PORT-KEY TO AUD-KEY MOVE DEL-REASON-CODE TO AUD-REASON MOVE PORT-STATUS TO AUD-STATUS WRITE AUDIT-RECORD IF NOT WS-AUD-SUCCESS DISPLAY 'Audit write failed for: ' PORT-KEY END-IF"
            ],
            "3000-TERMINATE": [
              "CLOSE PORTFOLIO-FILE DELETE-FILE AUDIT-FILE DISPLAY 'Records deleted:  ' WS-DELETE-COUNT DISPLAY 'Records not found:' WS-NOT-FND-COUNT DISPLAY 'Errors occurred:  ' WS-ERROR-COUNT MOVE WS-RETURN-CODE TO RETURN-CODE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-PROCESS-DELETE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "3000-TERMINATE",
        "2100-PROCESS-DELETE",
        "2200-DELETE-RECORD",
        "2300-WRITE-AUDIT"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 194
    },
    "src/programs/portfolio/PORTMSTR.cbl": {
      "file_path": "src/programs/portfolio/PORTMSTR.cbl",
      "file_type": "cobol",
      "program_id": "PORTMSTR",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PORTFOLIO-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE": [],
            "2000-CREATE-PORTFOLIO": [],
            "2100-VALIDATE-PORTFOLIO": [],
            "3000-READ-PORTFOLIO": [],
            "4000-UPDATE-PORTFOLIO": [],
            "5000-DELETE-PORTFOLIO": [],
            "6000-TERMINATE": [],
            "9000-ERROR": [],
            "2100-HANDLE-VSAM-ERROR": [],
            "2100-LOG-PORTFOLIO-UPDATE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-CREATE-PORTFOLIO",
        "2100-VALIDATE-PORTFOLIO"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-CREATE-PORTFOLIO",
        "3000-READ-PORTFOLIO",
        "4000-UPDATE-PORTFOLIO",
        "5000-DELETE-PORTFOLIO",
        "9000-ERROR",
        "6000-TERMINATE",
        "9000-ERROR",
        "2100-VALIDATE-PORTFOLIO",
        "9000-ERROR",
        "9000-ERROR",
        "9000-ERROR",
        "9000-ERROR",
        "9000-ERROR",
        "2100-VALIDATE-PORTFOLIO",
        "9000-ERROR",
        "9000-ERROR",
        "9000-ERROR",
        "2100-LOG-PORTFOLIO-UPDATE",
        "9000-ERROR",
        "9000-ERROR",
        "6000-TERMINATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 288
    },
    "src/programs/portfolio/PORTTEST.cbl": {
      "file_path": "src/programs/portfolio/PORTTEST.cbl",
      "file_type": "cobol",
      "program_id": "PORTTEST",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTFLIO.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "PORTFLIO",
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "TEST-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-GENERATE-RECORDS UNTIL WS-RECORD-COUNT >= WS-MAX-RECORDS PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "ACCEPT WS-CURRENT-DATE FROM DATE YYYYMMDD OPEN OUTPUT TEST-FILE IF WS-FILE-STATUS NOT = '00' DISPLAY 'Error opening test file: ' WS-FILE-STATUS PERFORM 3000-TERMINATE GOBACK END-IF"
            ],
            "2000-GENERATE-RECORDS": [
              "INITIALIZE PORT-RECORD PERFORM 2100-GENERATE-KEY PERFORM 2200-GENERATE-CLIENT-INFO PERFORM 2300-GENERATE-PORTFOLIO-INFO PERFORM 2400-GENERATE-FINANCIAL-INFO WRITE PORT-RECORD IF WS-FILE-STATUS = '00' ADD 1 TO WS-RECORD-COUNT ELSE DISPLAY 'Error writing record: ' WS-FILE-STATUS END-IF"
            ],
            "2100-GENERATE-KEY": [
              "STRING 'PORT' WS-RECORD-COUNT DELIMITED BY SIZE INTO PORT-ID MOVE FUNCTION RANDOM(WS-RECORD-COUNT) TO WS-TYPE-SUB COMPUTE PORT-ACCOUNT-NO = WS-RECORD-COUNT + 1000000000"
            ],
            "2200-GENERATE-CLIENT-INFO": [
              "STRING WS-NAME-PREFIX WS-RECORD-COUNT DELIMITED BY SIZE INTO PORT-CLIENT-NAME MOVE WS-CLIENT-TYPES(WS-TYPE-SUB:1) TO PORT-CLIENT-TYPE"
            ],
            "2300-GENERATE-PORTFOLIO-INFO": [
              "MOVE WS-CURRENT-DATE TO PORT-CREATE-DATE MOVE WS-CURRENT-DATE TO PORT-LAST-MAINT COMPUTE WS-STATUS-SUB = FUNCTION RANDOM * 3 + 1 MOVE WS-STATUS-TYPES(WS-STATUS-SUB:1) TO PORT-STATUS"
            ],
            "2400-GENERATE-FINANCIAL-INFO": [
              "COMPUTE PORT-TOTAL-VALUE = FUNCTION RANDOM * 1000000 COMPUTE PORT-CASH-BALANCE = PORT-TOTAL-VALUE * .10"
            ],
            "3000-TERMINATE": [
              "CLOSE TEST-FILE DISPLAY 'Records generated: ' WS-RECORD-COUNT"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-GENERATE-RECORDS",
        "2100-GENERATE-KEY"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-GENERATE-RECORDS",
        "3000-TERMINATE",
        "3000-TERMINATE",
        "2100-GENERATE-KEY",
        "2200-GENERATE-CLIENT-INFO",
        "2300-GENERATE-PORTFOLIO-INFO",
        "2400-GENERATE-FINANCIAL-INFO"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 119
    },
    "src/programs/portfolio/PORTADD.cbl": {
      "file_path": "src/programs/portfolio/PORTADD.cbl",
      "file_type": "cobol",
      "program_id": "PORTADD",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTFLIO.cpy"
      ],
      "copybook_dependencies": [
        "PORTFLIO"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PORTFOLIO-FILE",
        "INPUT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-WORK-AREAS ACCEPT WS-CURRENT-DATE FROM DATE YYYYMMDD OPEN I-O   PORTFOLIO-FILE OPEN INPUT INPUT-FILE IF NOT WS-SUCCESS-STATUS OR NOT WS-INPUT-SUCCESS DISPLAY 'Error opening files: ' 'PORT=' WS-FILE-STATUS 'INPT=' WS-INPUT-STATUS MOVE WS-ERROR TO WS-RETURN-CODE PERFORM 3000-TERMINATE END-IF"
            ],
            "2000-PROCESS": [
              "READ INPUT-FILE INTO PORT-RECORD AT END SET END-OF-FILE TO TRUE NOT AT END PERFORM 2100-VALIDATE-AND-ADD END-READ"
            ],
            "2100-VALIDATE-AND-ADD": [
              "IF PORT-ID EQUAL SPACES OR PORT-CLIENT-NAME EQUAL SPACES OR PORT-STATUS NOT EQUAL 'A' ADD 1 TO WS-ERROR-COUNT DISPLAY 'Invalid record data: ' PORT-ID EXIT PARAGRAPH END-IF MOVE WS-CURRENT-DATE TO PORT-CREATE-DATE MOVE WS-CURRENT-DATE TO PORT-LAST-MAINT WRITE PORT-RECORD EVALUATE TRUE WHEN WS-SUCCESS-STATUS ADD 1 TO WS-ADD-COUNT WHEN WS-DUP-STATUS ADD 1 TO WS-DUP-COUNT DISPLAY 'Duplicate record: ' PORT-ID WHEN OTHER ADD 1 TO WS-ERROR-COUNT DISPLAY 'Write error for: ' PORT-ID END-EVALUATE"
            ],
            "3000-TERMINATE": [
              "CLOSE PORTFOLIO-FILE INPUT-FILE DISPLAY 'Records added:    ' WS-ADD-COUNT DISPLAY 'Duplicate records:' WS-DUP-COUNT DISPLAY 'Errors occurred:  ' WS-ERROR-COUNT MOVE WS-RETURN-CODE TO RETURN-CODE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-VALIDATE-AND-ADD"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "3000-TERMINATE",
        "2100-VALIDATE-AND-ADD"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 148
    },
    "src/programs/portfolio/PORTUPDT.cbl": {
      "file_path": "src/programs/portfolio/PORTUPDT.cbl",
      "file_type": "cobol",
      "program_id": "PORTUPDT",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTFLIO.cpy"
      ],
      "copybook_dependencies": [
        "PORTFLIO"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PORTFOLIO-FILE",
        "UPDATE-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-WORK-AREAS OPEN I-O   PORTFOLIO-FILE OPEN INPUT UPDATE-FILE IF NOT WS-SUCCESS-STATUS OR NOT WS-UPDT-SUCCESS DISPLAY 'Error opening files: ' 'PORT=' WS-FILE-STATUS 'UPDT=' WS-UPDT-STATUS MOVE WS-ERROR TO WS-RETURN-CODE PERFORM 3000-TERMINATE END-IF"
            ],
            "2000-PROCESS": [
              "READ UPDATE-FILE AT END SET END-OF-FILE TO TRUE NOT AT END PERFORM 2100-PROCESS-UPDATE END-READ"
            ],
            "2100-PROCESS-UPDATE": [
              "MOVE UPDT-KEY TO PORT-KEY READ PORTFOLIO-FILE IF WS-SUCCESS-STATUS PERFORM 2200-APPLY-UPDATE ELSE ADD 1 TO WS-ERROR-COUNT DISPLAY 'Record not found: ' PORT-KEY END-IF"
            ],
            "2200-APPLY-UPDATE": [
              "EVALUATE TRUE WHEN UPDT-STATUS MOVE UPDT-NEW-VALUE TO PORT-STATUS WHEN UPDT-NAME MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME WHEN UPDT-VALUE MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE END-EVALUATE REWRITE PORT-RECORD IF WS-SUCCESS-STATUS ADD 1 TO WS-UPDATE-COUNT ELSE ADD 1 TO WS-ERROR-COUNT DISPLAY 'Update failed for: ' PORT-KEY END-IF"
            ],
            "3000-TERMINATE": [
              "CLOSE PORTFOLIO-FILE UPDATE-FILE DISPLAY 'Updates processed: ' WS-UPDATE-COUNT DISPLAY 'Errors occurred:  ' WS-ERROR-COUNT MOVE WS-RETURN-CODE TO RETURN-CODE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-PROCESS-UPDATE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "3000-TERMINATE",
        "2100-PROCESS-UPDATE",
        "2200-APPLY-UPDATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 160
    },
    "src/programs/portfolio/PORTREAD.cbl": {
      "file_path": "src/programs/portfolio/PORTREAD.cbl",
      "file_type": "cobol",
      "program_id": "PORTREAD",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTFLIO.cpy"
      ],
      "copybook_dependencies": [
        "PORTFLIO"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PORTFOLIO-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "*----------------------------------------------------------------* * Main process *----------------------------------------------------------------* PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-WORK-AREAS OPEN INPUT PORTFOLIO-FILE IF NOT WS-SUCCESS-STATUS DISPLAY 'Error opening file: ' WS-FILE-STATUS MOVE WS-ERROR TO WS-RETURN-CODE PERFORM 3000-TERMINATE END-IF"
            ],
            "2000-PROCESS": [
              "READ PORTFOLIO-FILE NEXT RECORD AT END SET END-OF-FILE TO TRUE NOT AT END ADD 1 TO WS-RECORD-COUNT PERFORM 2100-DISPLAY-RECORD END-READ"
            ],
            "2100-DISPLAY-RECORD": [
              "DISPLAY 'Portfolio Record: ' WS-RECORD-COUNT DISPLAY '  ID: ' PORT-ID DISPLAY '  Account: ' PORT-ACCOUNT-NO DISPLAY '  Client: ' PORT-CLIENT-NAME DISPLAY '  Status: ' PORT-STATUS DISPLAY '  Total Value: ' PORT-TOTAL-VALUE DISPLAY ' '"
            ],
            "3000-TERMINATE": [
              "CLOSE PORTFOLIO-FILE DISPLAY 'Total Records Read: ' WS-RECORD-COUNT MOVE WS-RETURN-CODE TO RETURN-CODE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-DISPLAY-RECORD"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "3000-TERMINATE",
        "2100-DISPLAY-RECORD"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 111
    },
    "src/programs/portfolio/PORTVALD.cbl": {
      "file_path": "src/programs/portfolio/PORTVALD.cbl",
      "file_type": "cobol",
      "program_id": "PORTVALD",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/common/PORTVAL.cpy"
      ],
      "copybook_dependencies": [
        "PORTVAL"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-VALIDATE-ID": [],
            "2000-VALIDATE-ACCOUNT": [],
            "3000-VALIDATE-TYPE": [],
            "4000-VALIDATE-AMOUNT": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-VALIDATE-ID",
        "2000-VALIDATE-ACCOUNT",
        "3000-VALIDATE-TYPE",
        "4000-VALIDATE-AMOUNT"
      ],
      "perform_targets": [
        "1000-VALIDATE-ID",
        "2000-VALIDATE-ACCOUNT",
        "3000-VALIDATE-TYPE",
        "4000-VALIDATE-AMOUNT"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 120
    },
    "src/programs/portfolio/PORTTRAN.cbl": {
      "file_path": "src/programs/portfolio/PORTTRAN.cbl",
      "file_type": "cobol",
      "program_id": "PORTTRAN",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/TRNREC.cpy",
        "src/copybook/common/AUDITLOG.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "AUDITLOG",
        "TRNREC",
        "ERRHAND",
        "PORTREC"
      ],
      "program_calls": [
        "the"
      ],
      "exec_statements": [],
      "file_definitions": [
        "TRANSACTION-FILE",
        "PORTFOLIO-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE IF WS-TRAN-STATUS = '00' PERFORM 2000-PROCESS-TRANSACTIONS UNTIL END-OF-FILE OR WS-ERROR-COUNT > 100 END-IF PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-FILE-STATUS WS-COUNTERS SET MORE-RECORDS TO TRUE OPEN INPUT TRANSACTION-FILE IF WS-TRAN-STATUS NOT = '00' MOVE 'Error opening transaction file' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-IF OPEN I-O PORTFOLIO-FILE IF WS-PORT-STATUS NOT = '00' MOVE 'Error opening portfolio file' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-IF"
            ],
            "2000-PROCESS-TRANSACTIONS": [
              "READ TRANSACTION-FILE AT END SET END-OF-FILE TO TRUE NOT AT END ADD 1 TO WS-READ-COUNT PERFORM 2100-VALIDATE-TRANSACTION END-READ"
            ],
            "2100-VALIDATE-TRANSACTION": [
              "MOVE SPACES TO ERR-TEXT PERFORM 2110-CHECK-PORTFOLIO IF ERR-TEXT = SPACES PERFORM 2120-CHECK-TRANSACTION-TYPE END-IF IF ERR-TEXT = SPACES PERFORM 2130-CHECK-AMOUNTS END-IF IF ERR-TEXT = SPACES ADD 1 TO WS-PROCESS-COUNT ELSE PERFORM 9000-ERROR-ROUTINE END-IF"
            ],
            "2110-CHECK-PORTFOLIO": [
              "IF TRN-PORTFOLIO-ID = SPACES MOVE 'Portfolio ID is required' TO ERR-TEXT EXIT PARAGRAPH END-IF MOVE TRN-PORTFOLIO-ID TO PORT-ID READ PORTFOLIO-FILE INVALID KEY STRING 'Invalid Portfolio ID: ' TRN-PORTFOLIO-ID DELIMITED BY SIZE INTO ERR-TEXT END-READ"
            ],
            "2120-CHECK-TRANSACTION-TYPE": [
              "EVALUATE TRN-TYPE WHEN 'BU' WHEN 'SL' WHEN 'TR' WHEN 'FE' CONTINUE WHEN OTHER STRING 'Invalid Transaction Type: ' TRN-TYPE DELIMITED BY SIZE INTO ERR-TEXT END-EVALUATE"
            ],
            "2130-CHECK-AMOUNTS": [
              "IF TRN-QUANTITY <= ZERO MOVE 'Quantity must be greater than zero' TO ERR-TEXT EXIT PARAGRAPH END-IF IF TRN-PRICE <= ZERO AND TRN-TYPE NOT = 'TR' MOVE 'Price must be greater than zero' TO ERR-TEXT EXIT PARAGRAPH END-IF IF TRN-AMOUNT <= ZERO AND TRN-TYPE NOT = 'TR' MOVE 'Amount must be greater than zero' TO ERR-TEXT END-IF"
            ],
            "2200-UPDATE-POSITIONS": [
              "EVALUATE TRN-TYPE WHEN 'BU' PERFORM 2210-PROCESS-BUY WHEN 'SL' PERFORM 2220-PROCESS-SELL WHEN 'TR' PERFORM 2230-PROCESS-TRANSFER WHEN 'FE' PERFORM 2240-PROCESS-FEE END-EVALUATE PERFORM 2300-UPDATE-AUDIT-TRAIL"
            ],
            "2210-PROCESS-BUY": [
              "MOVE TRN-PORTFOLIO-ID TO PORT-ID READ PORTFOLIO-FILE INVALID KEY MOVE 'Portfolio not found for update' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE EXIT PARAGRAPH END-READ ADD TRN-QUANTITY TO PORT-TOTAL-UNITS ADD TRN-AMOUNT   TO PORT-TOTAL-COST REWRITE PORTFOLIO-RECORD INVALID KEY MOVE 'Error updating portfolio' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-REWRITE"
            ],
            "2220-PROCESS-SELL": [
              "MOVE TRN-PORTFOLIO-ID TO PORT-ID READ PORTFOLIO-FILE INVALID KEY MOVE 'Portfolio not found for update' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE EXIT PARAGRAPH END-READ IF PORT-TOTAL-UNITS < TRN-QUANTITY MOVE 'Insufficient units for sale' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE EXIT PARAGRAPH END-IF SUBTRACT TRN-QUANTITY FROM PORT-TOTAL-UNITS SUBTRACT TRN-AMOUNT   FROM PORT-TOTAL-COST REWRITE PORTFOLIO-RECORD INVALID KEY MOVE 'Error updating portfolio' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-REWRITE"
            ],
            "2230-PROCESS-TRANSFER": [
              "MOVE 'Transfer processing not implemented' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE"
            ],
            "2240-PROCESS-FEE": [
              "MOVE TRN-PORTFOLIO-ID TO PORT-ID READ PORTFOLIO-FILE INVALID KEY MOVE 'Portfolio not found for fee' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE EXIT PARAGRAPH END-READ SUBTRACT TRN-AMOUNT FROM PORT-TOTAL-COST REWRITE PORTFOLIO-RECORD INVALID KEY MOVE 'Error updating portfolio' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-REWRITE"
            ],
            "2300-UPDATE-AUDIT-TRAIL": [
              "INITIALIZE AUDIT-RECORD MOVE FUNCTION CURRENT-DATE TO AUD-TIMESTAMP MOVE 'PORTTRAN'     TO AUD-PROGRAM MOVE FUNCTION USER-ID TO AUD-USER-ID MOVE 'TRAN'         TO AUD-TYPE EVALUATE TRN-TYPE WHEN 'BU' MOVE 'CREATE  ' TO AUD-ACTION WHEN 'SL' MOVE 'DELETE  ' TO AUD-ACTION WHEN 'TR' MOVE 'UPDATE  ' TO AUD-ACTION WHEN 'FE' MOVE 'UPDATE  ' TO AUD-ACTION END-EVALUATE IF WS-PORT-STATUS = '00' MOVE 'SUCC'     TO AUD-STATUS ELSE MOVE 'FAIL'     TO AUD-STATUS END-IF MOVE TRN-PORTFOLIO-ID TO AUD-PORTFOLIO-ID MOVE PORT-ACCOUNT-NO  TO AUD-ACCOUNT-NO *    Store original portfolio state MOVE PORT-RECORD      TO AUD-BEFORE-IMAGE *    Build audit message STRING 'Transaction: ' DELIMITED BY SIZE TRN-TYPE       DELIMITED BY SIZE ' Amount: '    DELIMITED BY SIZE TRN-AMOUNT     DELIMITED BY SIZE ' Units: '     DELIMITED BY SIZE TRN-QUANTITY   DELIMITED BY SIZE INTO AUD-MESSAGE PERFORM 2310-WRITE-AUDIT-RECORD"
            ],
            "2310-WRITE-AUDIT-RECORD": [
              "*    Call the audit processor CALL 'AUDPROC' USING AUDIT-RECORD IF RETURN-CODE NOT = ZERO MOVE 'Error writing audit record' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-IF"
            ],
            "3000-TERMINATE": [
              "CLOSE TRANSACTION-FILE PORTFOLIO-FILE DISPLAY 'Transactions Read:    ' WS-READ-COUNT DISPLAY 'Transactions Process: ' WS-PROCESS-COUNT DISPLAY 'Errors Encountered:   ' WS-ERROR-COUNT"
            ],
            "9000-ERROR-ROUTINE": [
              "ADD 1 TO WS-ERROR-COUNT MOVE ERR-CAT-PROC TO ERR-CATEGORY MOVE 'PORTTRAN' TO ERR-PROGRAM CALL 'ERRPROC' USING ERR-MESSAGE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS-TRANSACTIONS",
        "2100-VALIDATE-TRANSACTION"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-TRANSACTIONS",
        "3000-TERMINATE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "2100-VALIDATE-TRANSACTION",
        "2110-CHECK-PORTFOLIO",
        "2120-CHECK-TRANSACTION-TYPE",
        "2130-CHECK-AMOUNTS",
        "9000-ERROR-ROUTINE",
        "2210-PROCESS-BUY",
        "2220-PROCESS-SELL",
        "2230-PROCESS-TRANSFER",
        "2240-PROCESS-FEE",
        "2300-UPDATE-AUDIT-TRAIL",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "2310-WRITE-AUDIT-RECORD",
        "9000-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 317
    },
    "src/programs/test/TSTGEN00.cbl": {
      "file_path": "src/programs/test/TSTGEN00.cbl",
      "file_type": "cobol",
      "program_id": "TSTGEN00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "TEST-CONFIG",
        "PORTFOLIO-OUT",
        "TRANSACTION-OUT",
        "RANDOM-SEED"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "CONFIGURATION": {
            "SPECIAL-NAMES": []
          },
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-INIT-RANDOM PERFORM 1300-INIT-COUNTERS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT TEST-CONFIG IF WS-CFG-STATUS NOT = '00' MOVE 'ERROR OPENING CONFIG FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT PORTFOLIO-OUT IF WS-PORT-STATUS NOT = '00' MOVE 'ERROR OPENING PORTFOLIO OUTPUT' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT TRANSACTION-OUT IF WS-TRAN-STATUS NOT = '00' MOVE 'ERROR OPENING TRANSACTION OUTPUT' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT RANDOM-SEED IF WS-RAND-STATUS NOT = '00' MOVE 'ERROR OPENING RANDOM SEED' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-INIT-RANDOM": [
              "READ RANDOM-SEED MOVE SEED-RECORD TO WS-RANDOM-SEED"
            ],
            "1300-INIT-COUNTERS": [
              "INITIALIZE WS-COUNTERS"
            ],
            "2000-PROCESS": [
              "PERFORM UNTIL END-OF-CONFIG READ TEST-CONFIG AT END SET END-OF-CONFIG TO TRUE NOT AT END PERFORM 2100-GENERATE-TEST-DATA END-READ END-PERFORM"
            ],
            "2100-GENERATE-TEST-DATA": [
              "EVALUATE CFG-TEST-TYPE WHEN WS-PORTFOLIO PERFORM 2200-GEN-PORTFOLIO WHEN WS-TRANSACTION PERFORM 2300-GEN-TRANSACTION WHEN WS-ERROR-TEST PERFORM 2400-GEN-ERROR-DATA WHEN WS-VOLUME-TEST PERFORM 2500-GEN-VOLUME-DATA WHEN OTHER MOVE 'INVALID TEST TYPE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-EVALUATE"
            ],
            "2200-GEN-PORTFOLIO": [
              "PERFORM VARYING WS-RECORDS-WRITTEN FROM 1 BY 1 UNTIL WS-RECORDS-WRITTEN > CFG-VOLUME PERFORM 2210-GEN-PORT-DATA PERFORM 2220-WRITE-PORT-RECORD END-PERFORM"
            ],
            "2300-GEN-TRANSACTION": [
              "PERFORM VARYING WS-RECORDS-WRITTEN FROM 1 BY 1 UNTIL WS-RECORDS-WRITTEN > CFG-VOLUME PERFORM 2310-GEN-TRAN-DATA PERFORM 2320-WRITE-TRAN-RECORD END-PERFORM"
            ],
            "2400-GEN-ERROR-DATA": [
              "PERFORM 2410-GEN-DATA-ERRORS PERFORM 2420-GEN-PROCESS-ERRORS"
            ],
            "2500-GEN-VOLUME-DATA": [
              "PERFORM 2510-GEN-LARGE-PORTFOLIO PERFORM 2520-GEN-LARGE-TRANSACTION"
            ],
            "3000-CLEANUP": [
              "CLOSE TEST-CONFIG PORTFOLIO-OUT TRANSACTION-OUT RANDOM-SEED"
            ],
            "9999-ERROR-HANDLER": [
              "ADD 1 TO WS-ERROR-COUNT DISPLAY WS-ERROR-MESSAGE UPON CONS IF WS-ERROR-COUNT > 100 MOVE 12 TO RETURN-CODE GOBACK END-IF"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "SPECIAL-NAMES",
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-INIT-RANDOM",
        "1300-INIT-COUNTERS",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "UNTIL",
        "2100-GENERATE-TEST-DATA",
        "2200-GEN-PORTFOLIO",
        "2300-GEN-TRANSACTION",
        "2400-GEN-ERROR-DATA",
        "2500-GEN-VOLUME-DATA",
        "9999-ERROR-HANDLER",
        "VARYING",
        "2210-GEN-PORT-DATA",
        "2220-WRITE-PORT-RECORD",
        "VARYING",
        "2310-GEN-TRAN-DATA",
        "2320-WRITE-TRAN-RECORD",
        "2410-GEN-DATA-ERRORS",
        "2420-GEN-PROCESS-ERRORS",
        "2510-GEN-LARGE-PORTFOLIO",
        "2520-GEN-LARGE-TRANSACTION"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 216
    },
    "src/programs/test/TSTVAL00.cbl": {
      "file_path": "src/programs/test/TSTVAL00.cbl",
      "file_type": "cobol",
      "program_id": "TSTVAL00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "TEST-CASES",
        "EXPECTED-RESULTS",
        "ACTUAL-RESULTS",
        "TEST-REPORT"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "CONFIGURATION": {
            "SPECIAL-NAMES": []
          },
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-WRITE-HEADERS PERFORM 1300-INIT-METRICS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT TEST-CASES IF WS-TEST-STATUS NOT = '00' MOVE 'ERROR OPENING TEST CASES' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT EXPECTED-RESULTS IF WS-EXP-STATUS NOT = '00' MOVE 'ERROR OPENING EXPECTED RESULTS' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT ACTUAL-RESULTS IF WS-ACT-STATUS NOT = '00' MOVE 'ERROR OPENING ACTUAL RESULTS' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT TEST-REPORT IF WS-RPT-STATUS NOT = '00' MOVE 'ERROR OPENING TEST REPORT' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-WRITE-HEADERS": [
              "WRITE REPORT-RECORD FROM WS-HEADER1 WRITE REPORT-RECORD FROM WS-HEADER2"
            ],
            "1300-INIT-METRICS": [
              "INITIALIZE WS-TEST-METRICS ACCEPT WS-START-TIME FROM TIME"
            ],
            "2000-PROCESS": [
              "PERFORM UNTIL END-OF-TESTS READ TEST-CASES AT END SET END-OF-TESTS TO TRUE NOT AT END PERFORM 2100-EXECUTE-TEST END-READ END-PERFORM PERFORM 2900-WRITE-SUMMARY"
            ],
            "2100-EXECUTE-TEST": [
              "EVALUATE TEST-TYPE WHEN WS-FUNCTIONAL PERFORM 2200-RUN-FUNCTIONAL-TEST WHEN WS-INTEGRATION PERFORM 2300-RUN-INTEGRATION-TEST WHEN WS-PERFORMANCE PERFORM 2400-RUN-PERFORMANCE-TEST WHEN WS-ERROR PERFORM 2500-RUN-ERROR-TEST WHEN OTHER MOVE 'INVALID TEST TYPE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-EVALUATE PERFORM 2600-VALIDATE-RESULTS PERFORM 2700-UPDATE-METRICS PERFORM 2800-WRITE-TEST-DETAIL"
            ],
            "2900-WRITE-SUMMARY": [
              "ACCEPT WS-END-TIME FROM TIME COMPUTE WS-ELAPSED-TIME = WS-END-TIME - WS-START-TIME MOVE WS-TOTAL-TESTS TO WS-TOTAL-OUT MOVE WS-TESTS-PASSED TO WS-PASSED-OUT MOVE WS-TESTS-FAILED TO WS-FAILED-OUT COMPUTE WS-SUCCESS-RATE = (WS-TESTS-PASSED / WS-TOTAL-TESTS) * 100 WRITE REPORT-RECORD FROM WS-SUMMARY-LINE"
            ],
            "3000-CLEANUP": [
              "CLOSE TEST-CASES EXPECTED-RESULTS ACTUAL-RESULTS TEST-REPORT"
            ],
            "9999-ERROR-HANDLER": [
              "DISPLAY WS-ERROR-MESSAGE UPON CONS MOVE 12 TO RETURN-CODE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "SPECIAL-NAMES",
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS",
        "1300-INIT-METRICS",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "UNTIL",
        "2100-EXECUTE-TEST",
        "2900-WRITE-SUMMARY",
        "2200-RUN-FUNCTIONAL-TEST",
        "2300-RUN-INTEGRATION-TEST",
        "2400-RUN-PERFORMANCE-TEST",
        "2500-RUN-ERROR-TEST",
        "9999-ERROR-HANDLER",
        "2600-VALIDATE-RESULTS",
        "2700-UPDATE-METRICS",
        "2800-WRITE-TEST-DETAIL"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 225
    },
    "src/programs/common/AUDPROC.cbl": {
      "file_path": "src/programs/common/AUDPROC.cbl",
      "file_type": "cobol",
      "program_id": "AUDPROC",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/common/AUDITLOG.cpy"
      ],
      "copybook_dependencies": [
        "AUDITLOG"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "AUDIT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE": [],
            "2000-PROCESS-AUDIT": [],
            "3000-TERMINATE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS-AUDIT",
        "3000-TERMINATE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-AUDIT",
        "3000-TERMINATE",
        "3000-TERMINATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 96
    },
    "src/programs/common/ERRPROC.cbl": {
      "file_path": "src/programs/common/ERRPROC.cbl",
      "file_type": "cobol",
      "program_id": "ERRPROC",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "ERROR-LOG"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE": [],
            "2000-PROCESS-ERROR": [],
            "2100-WRITE-LOG": [],
            "2200-DISPLAY-ERROR": [],
            "3000-TERMINATE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS-ERROR",
        "2100-WRITE-LOG"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-ERROR",
        "3000-TERMINATE",
        "2100-WRITE-LOG",
        "2200-DISPLAY-ERROR"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 107
    },
    "src/programs/common/DB2CMT.cbl": {
      "file_path": "src/programs/common/DB2CMT.cbl",
      "file_type": "cobol",
      "program_id": "DB2CMT",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/db2/DBPROC.cpy",
        "src/copybook/db2/SQLCA.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "SQLCA",
        "DBPROC",
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "           EXEC SQL END DECLARE SECTION END-EXEC.",
        "           EXEC SQL                COMMIT WORK            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-COMMIT-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Commit failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         3000-ROLLBACK.            EXEC SQL                ROLLBACK WORK            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Rollback failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         4000-SAVEPOINT.            MOVE LS-SAVEPOINT-NAME TO WS-SAVEPOINT-ID             EXEC SQL                SAVEPOINT :WS-SAVEPOINT-ID ON ROLLBACK RETAIN CURSORS            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-SAVEPOINT-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint creation failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         5000-RESTORE.            MOVE LS-SAVEPOINT-NAME TO WS-SAVEPOINT-ID             EXEC SQL                ROLLBACK TO SAVEPOINT :WS-SAVEPOINT-ID            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint restore failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         6000-STATISTICS.            DISPLAY 'DB2 Commit Controller Statistics:'            DISPLAY '  Commits:    ' WS-COMMIT-COUNT            DISPLAY '  Rollbacks:  ' WS-ROLLBACK-COUNT            DISPLAY '  Savepoints: ' WS-SAVEPOINT-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'DB2CMT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .         9100-LOG-ERROR.            CALL 'DB2ERR' USING LS-ERROR-INFO            .",
        "           EXEC SQL                ROLLBACK WORK            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Rollback failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         4000-SAVEPOINT.            MOVE LS-SAVEPOINT-NAME TO WS-SAVEPOINT-ID             EXEC SQL                SAVEPOINT :WS-SAVEPOINT-ID ON ROLLBACK RETAIN CURSORS            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-SAVEPOINT-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint creation failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         5000-RESTORE.            MOVE LS-SAVEPOINT-NAME TO WS-SAVEPOINT-ID             EXEC SQL                ROLLBACK TO SAVEPOINT :WS-SAVEPOINT-ID            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint restore failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         6000-STATISTICS.            DISPLAY 'DB2 Commit Controller Statistics:'            DISPLAY '  Commits:    ' WS-COMMIT-COUNT            DISPLAY '  Rollbacks:  ' WS-ROLLBACK-COUNT            DISPLAY '  Savepoints: ' WS-SAVEPOINT-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'DB2CMT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .         9100-LOG-ERROR.            CALL 'DB2ERR' USING LS-ERROR-INFO            .",
        "           EXEC SQL                SAVEPOINT :WS-SAVEPOINT-ID ON ROLLBACK RETAIN CURSORS            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-SAVEPOINT-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint creation failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         5000-RESTORE.            MOVE LS-SAVEPOINT-NAME TO WS-SAVEPOINT-ID             EXEC SQL                ROLLBACK TO SAVEPOINT :WS-SAVEPOINT-ID            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint restore failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         6000-STATISTICS.            DISPLAY 'DB2 Commit Controller Statistics:'            DISPLAY '  Commits:    ' WS-COMMIT-COUNT            DISPLAY '  Rollbacks:  ' WS-ROLLBACK-COUNT            DISPLAY '  Savepoints: ' WS-SAVEPOINT-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'DB2CMT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .         9100-LOG-ERROR.            CALL 'DB2ERR' USING LS-ERROR-INFO            .",
        "           EXEC SQL                ROLLBACK TO SAVEPOINT :WS-SAVEPOINT-ID            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-ROLLBACK-COUNT                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'Savepoint restore failed' TO LS-ERROR-MSG                MOVE 8 TO LS-RETURN-CODE                PERFORM 9100-LOG-ERROR            END-IF            .         6000-STATISTICS.            DISPLAY 'DB2 Commit Controller Statistics:'            DISPLAY '  Commits:    ' WS-COMMIT-COUNT            DISPLAY '  Rollbacks:  ' WS-ROLLBACK-COUNT            DISPLAY '  Savepoints: ' WS-SAVEPOINT-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'DB2CMT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .         9100-LOG-ERROR.            CALL 'DB2ERR' USING LS-ERROR-INFO            ."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE": [],
            "2000-COMMIT": [],
            "2100-ISSUE-COMMIT": [],
            "3000-ROLLBACK": [],
            "4000-SAVEPOINT": [],
            "5000-RESTORE": [],
            "6000-STATISTICS": [],
            "9000-ERROR-ROUTINE": [],
            "9100-LOG-ERROR": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-COMMIT",
        "2100-ISSUE-COMMIT",
        "3000-ROLLBACK"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-COMMIT",
        "3000-ROLLBACK",
        "4000-SAVEPOINT",
        "5000-RESTORE",
        "6000-STATISTICS",
        "9000-ERROR-ROUTINE",
        "2100-ISSUE-COMMIT",
        "9100-LOG-ERROR",
        "9100-LOG-ERROR",
        "9100-LOG-ERROR",
        "9100-LOG-ERROR"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 170
    },
    "src/programs/common/DB2ERR.cbl": {
      "file_path": "src/programs/common/DB2ERR.cbl",
      "file_type": "cobol",
      "program_id": "DB2ERR",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/db2/DBPROC.cpy",
        "src/copybook/db2/SQLCA.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "SQLCA",
        "DBPROC",
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "           EXEC SQL END DECLARE SECTION END-EXEC.",
        "           EXEC SQL                INSERT INTO ERRLOG                VALUES (:WS-ERRLOG-REC)            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error logging to ERRLOG' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         2000-DIAGNOSE-ERROR.            EVALUATE LS-SQLCODE                WHEN WS-DEADLOCK                    MOVE 'Deadlock detected - retry transaction'                      TO LS-ERROR-TEXT                    MOVE 4 TO LS-RETURN-CODE                WHEN WS-TIMEOUT                    MOVE 'Timeout occurred - retry transaction'                      TO LS-ERROR-TEXT                    MOVE 4 TO LS-RETURN-CODE                WHEN WS-CONNECTION-ERROR                    MOVE 'DB2 connection error - check availability'                      TO LS-ERROR-TEXT                    MOVE 12 TO LS-RETURN-CODE                WHEN WS-DUP-KEY                    MOVE 'Duplicate key violation'                      TO LS-ERROR-TEXT                    MOVE 8 TO LS-RETURN-CODE                WHEN OTHER                    IF LS-SQLCODE < 0                        MOVE 'Unhandled DB2 error'                          TO LS-ERROR-TEXT                        MOVE 12 TO LS-RETURN-CODE                    ELSE                        MOVE 'DB2 warning condition'                          TO LS-ERROR-TEXT                        MOVE 4 TO LS-RETURN-CODE                    END-IF            END-EVALUATE            .         3000-RETRIEVE-ERROR.            EXEC SQL                SELECT ERROR_MESSAGE,                       ERROR_SEVERITY,                       ADDITIONAL_INFO                INTO :EL-ERROR-MESSAGE,                     :EL-ERROR-SEVERITY,                     :EL-ADDITIONAL-INFO                FROM ERRLOG                WHERE PROGRAM_ID = :LS-PROGRAM-ID                AND ERROR_TIMESTAMP =                    (SELECT MAX(ERROR_TIMESTAMP)                     FROM ERRLOG                     WHERE PROGRAM_ID = :LS-PROGRAM-ID)            END-EXEC             IF SQLCODE = 0                MOVE EL-ERROR-MESSAGE TO LS-ERROR-TEXT                MOVE EL-ERROR-SEVERITY TO LS-RETURN-CODE            ELSE                MOVE 'No error history found' TO LS-ERROR-TEXT                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2ERR' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                SELECT ERROR_MESSAGE,                       ERROR_SEVERITY,                       ADDITIONAL_INFO                INTO :EL-ERROR-MESSAGE,                     :EL-ERROR-SEVERITY,                     :EL-ADDITIONAL-INFO                FROM ERRLOG                WHERE PROGRAM_ID = :LS-PROGRAM-ID                AND ERROR_TIMESTAMP =                    (SELECT MAX(ERROR_TIMESTAMP)                     FROM ERRLOG                     WHERE PROGRAM_ID = :LS-PROGRAM-ID)            END-EXEC             IF SQLCODE = 0                MOVE EL-ERROR-MESSAGE TO LS-ERROR-TEXT                MOVE EL-ERROR-SEVERITY TO LS-RETURN-CODE            ELSE                MOVE 'No error history found' TO LS-ERROR-TEXT                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2ERR' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            ."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-LOG-ERROR": [],
            "1100-SET-SEVERITY": [],
            "1200-INSERT-ERROR": [],
            "2000-DIAGNOSE-ERROR": [],
            "3000-RETRIEVE-ERROR": [],
            "9000-ERROR-ROUTINE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-LOG-ERROR",
        "1100-SET-SEVERITY",
        "1200-INSERT-ERROR",
        "2000-DIAGNOSE-ERROR"
      ],
      "perform_targets": [
        "1000-LOG-ERROR",
        "2000-DIAGNOSE-ERROR",
        "3000-RETRIEVE-ERROR",
        "9000-ERROR-ROUTINE",
        "1100-SET-SEVERITY",
        "1200-INSERT-ERROR",
        "9000-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 200
    },
    "src/programs/common/DB2STAT.cbl": {
      "file_path": "src/programs/common/DB2STAT.cbl",
      "file_type": "cobol",
      "program_id": "DB2STAT",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/db2/DBPROC.cpy",
        "src/copybook/db2/SQLCA.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "SQLCA",
        "DBPROC",
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "           EXEC SQL END DECLARE SECTION END-EXEC.",
        "           EXEC SQL                DECLARE GLOBAL TEMPORARY TABLE SESSION.DBSTATS                (PROGRAM_ID      CHAR(8)      NOT NULL,                 START_TIME     TIMESTAMP    NOT NULL,                 END_TIME      TIMESTAMP,                 ROWS_READ     INTEGER      NOT NULL,                 ROWS_INSERTED INTEGER      NOT NULL,                 ROWS_UPDATED  INTEGER      NOT NULL,                 ROWS_DELETED  INTEGER      NOT NULL,                 COMMITS       INTEGER      NOT NULL,                 ROLLBACKS     INTEGER      NOT NULL,                 CPU_TIME      DECIMAL(11,2),                 ELAPSED_TIME  DECIMAL(11,2))                ON COMMIT PRESERVE ROWS            END-EXEC             IF SQLCODE NOT = 0 AND SQLCODE NOT = -601                MOVE 'Error creating stats table' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         1200-INSERT-INITIAL.            EXEC SQL                INSERT INTO SESSION.DBSTATS                (PROGRAM_ID, START_TIME, ROWS_READ,                 ROWS_INSERTED, ROWS_UPDATED, ROWS_DELETED,                 COMMITS, ROLLBACKS)                VALUES                (:WS-PROGRAM-ID, CURRENT TIMESTAMP,                 0, 0, 0, 0, 0, 0)            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error initializing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         2000-UPDATE-STATS.            MOVE LS-ROWS-READ  TO WS-ROWS-READ            MOVE LS-ROWS-INSRT TO WS-ROWS-INSERTED            MOVE LS-ROWS-UPDT  TO WS-ROWS-UPDATED            MOVE LS-ROWS-DELT  TO WS-ROWS-DELETED            MOVE LS-COMMITS    TO WS-COMMITS            MOVE LS-ROLLBACKS  TO WS-ROLLBACKS             EXEC SQL                UPDATE SESSION.DBSTATS                SET ROWS_READ = :WS-ROWS-READ,                    ROWS_INSERTED = :WS-ROWS-INSERTED,                    ROWS_UPDATED = :WS-ROWS-UPDATED,                    ROWS_DELETED = :WS-ROWS-DELETED,                    COMMITS = :WS-COMMITS,                    ROLLBACKS = :WS-ROLLBACKS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error updating stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3000-TERMINATE.            ACCEPT WS-CURRENT-TIMESTAMP FROM TIME STAMP            MOVE WS-CURRENT-TIMESTAMP TO WS-END-TIME             PERFORM 3100-CALC-TIMES             EXEC SQL                UPDATE SESSION.DBSTATS                SET END_TIME = :WS-END-TIME,                    CPU_TIME = :WS-CPU-TIME,                    ELAPSED_TIME = :WS-ELAPSED-TIME                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE                PERFORM 4000-DISPLAY-STATS            ELSE                MOVE 'Error finalizing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3100-CALC-TIMES.            COMPUTE WS-ELAPSED-TIME = FUNCTION                NUMVAL(WS-END-TIME(1:15)) -                NUMVAL(WS-START-TIMESTAMP(1:15))             MOVE WS-ELAPSED-TIME TO WS-CPU-TIME            MULTIPLY 0.65 BY WS-CPU-TIME            .         4000-DISPLAY-STATS.            EXEC SQL                SELECT ROWS_READ, ROWS_INSERTED,                       ROWS_UPDATED, ROWS_DELETED,                       COMMITS, ROLLBACKS,                       CPU_TIME, ELAPSED_TIME                INTO :WS-STATS-RECORD                FROM SESSION.DBSTATS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                DISPLAY 'DB2 Statistics for ' WS-PROGRAM-ID                DISPLAY '  Records Read:    ' WS-ROWS-READ                DISPLAY '  Records Inserted: ' WS-ROWS-INSERTED                DISPLAY '  Records Updated:  ' WS-ROWS-UPDATED                DISPLAY '  Records Deleted:  ' WS-ROWS-DELETED                DISPLAY '  Commits:          ' WS-COMMITS                DISPLAY '  Rollbacks:        ' WS-ROLLBACKS                 MOVE WS-CPU-TIME TO WS-FORMATTED-TIME                DISPLAY '  CPU Time:         '                        WS-FORMATTED-TIME ' seconds'                 MOVE WS-ELAPSED-TIME TO WS-FORMATTED-TIME                DISPLAY '  Elapsed Time:     '                        WS-FORMATTED-TIME ' seconds'                 MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error retrieving stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2STAT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                INSERT INTO SESSION.DBSTATS                (PROGRAM_ID, START_TIME, ROWS_READ,                 ROWS_INSERTED, ROWS_UPDATED, ROWS_DELETED,                 COMMITS, ROLLBACKS)                VALUES                (:WS-PROGRAM-ID, CURRENT TIMESTAMP,                 0, 0, 0, 0, 0, 0)            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error initializing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         2000-UPDATE-STATS.            MOVE LS-ROWS-READ  TO WS-ROWS-READ            MOVE LS-ROWS-INSRT TO WS-ROWS-INSERTED            MOVE LS-ROWS-UPDT  TO WS-ROWS-UPDATED            MOVE LS-ROWS-DELT  TO WS-ROWS-DELETED            MOVE LS-COMMITS    TO WS-COMMITS            MOVE LS-ROLLBACKS  TO WS-ROLLBACKS             EXEC SQL                UPDATE SESSION.DBSTATS                SET ROWS_READ = :WS-ROWS-READ,                    ROWS_INSERTED = :WS-ROWS-INSERTED,                    ROWS_UPDATED = :WS-ROWS-UPDATED,                    ROWS_DELETED = :WS-ROWS-DELETED,                    COMMITS = :WS-COMMITS,                    ROLLBACKS = :WS-ROLLBACKS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error updating stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3000-TERMINATE.            ACCEPT WS-CURRENT-TIMESTAMP FROM TIME STAMP            MOVE WS-CURRENT-TIMESTAMP TO WS-END-TIME             PERFORM 3100-CALC-TIMES             EXEC SQL                UPDATE SESSION.DBSTATS                SET END_TIME = :WS-END-TIME,                    CPU_TIME = :WS-CPU-TIME,                    ELAPSED_TIME = :WS-ELAPSED-TIME                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE                PERFORM 4000-DISPLAY-STATS            ELSE                MOVE 'Error finalizing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3100-CALC-TIMES.            COMPUTE WS-ELAPSED-TIME = FUNCTION                NUMVAL(WS-END-TIME(1:15)) -                NUMVAL(WS-START-TIMESTAMP(1:15))             MOVE WS-ELAPSED-TIME TO WS-CPU-TIME            MULTIPLY 0.65 BY WS-CPU-TIME            .         4000-DISPLAY-STATS.            EXEC SQL                SELECT ROWS_READ, ROWS_INSERTED,                       ROWS_UPDATED, ROWS_DELETED,                       COMMITS, ROLLBACKS,                       CPU_TIME, ELAPSED_TIME                INTO :WS-STATS-RECORD                FROM SESSION.DBSTATS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                DISPLAY 'DB2 Statistics for ' WS-PROGRAM-ID                DISPLAY '  Records Read:    ' WS-ROWS-READ                DISPLAY '  Records Inserted: ' WS-ROWS-INSERTED                DISPLAY '  Records Updated:  ' WS-ROWS-UPDATED                DISPLAY '  Records Deleted:  ' WS-ROWS-DELETED                DISPLAY '  Commits:          ' WS-COMMITS                DISPLAY '  Rollbacks:        ' WS-ROLLBACKS                 MOVE WS-CPU-TIME TO WS-FORMATTED-TIME                DISPLAY '  CPU Time:         '                        WS-FORMATTED-TIME ' seconds'                 MOVE WS-ELAPSED-TIME TO WS-FORMATTED-TIME                DISPLAY '  Elapsed Time:     '                        WS-FORMATTED-TIME ' seconds'                 MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error retrieving stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2STAT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                UPDATE SESSION.DBSTATS                SET ROWS_READ = :WS-ROWS-READ,                    ROWS_INSERTED = :WS-ROWS-INSERTED,                    ROWS_UPDATED = :WS-ROWS-UPDATED,                    ROWS_DELETED = :WS-ROWS-DELETED,                    COMMITS = :WS-COMMITS,                    ROLLBACKS = :WS-ROLLBACKS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error updating stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3000-TERMINATE.            ACCEPT WS-CURRENT-TIMESTAMP FROM TIME STAMP            MOVE WS-CURRENT-TIMESTAMP TO WS-END-TIME             PERFORM 3100-CALC-TIMES             EXEC SQL                UPDATE SESSION.DBSTATS                SET END_TIME = :WS-END-TIME,                    CPU_TIME = :WS-CPU-TIME,                    ELAPSED_TIME = :WS-ELAPSED-TIME                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE                PERFORM 4000-DISPLAY-STATS            ELSE                MOVE 'Error finalizing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3100-CALC-TIMES.            COMPUTE WS-ELAPSED-TIME = FUNCTION                NUMVAL(WS-END-TIME(1:15)) -                NUMVAL(WS-START-TIMESTAMP(1:15))             MOVE WS-ELAPSED-TIME TO WS-CPU-TIME            MULTIPLY 0.65 BY WS-CPU-TIME            .         4000-DISPLAY-STATS.            EXEC SQL                SELECT ROWS_READ, ROWS_INSERTED,                       ROWS_UPDATED, ROWS_DELETED,                       COMMITS, ROLLBACKS,                       CPU_TIME, ELAPSED_TIME                INTO :WS-STATS-RECORD                FROM SESSION.DBSTATS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                DISPLAY 'DB2 Statistics for ' WS-PROGRAM-ID                DISPLAY '  Records Read:    ' WS-ROWS-READ                DISPLAY '  Records Inserted: ' WS-ROWS-INSERTED                DISPLAY '  Records Updated:  ' WS-ROWS-UPDATED                DISPLAY '  Records Deleted:  ' WS-ROWS-DELETED                DISPLAY '  Commits:          ' WS-COMMITS                DISPLAY '  Rollbacks:        ' WS-ROLLBACKS                 MOVE WS-CPU-TIME TO WS-FORMATTED-TIME                DISPLAY '  CPU Time:         '                        WS-FORMATTED-TIME ' seconds'                 MOVE WS-ELAPSED-TIME TO WS-FORMATTED-TIME                DISPLAY '  Elapsed Time:     '                        WS-FORMATTED-TIME ' seconds'                 MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error retrieving stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2STAT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                UPDATE SESSION.DBSTATS                SET END_TIME = :WS-END-TIME,                    CPU_TIME = :WS-CPU-TIME,                    ELAPSED_TIME = :WS-ELAPSED-TIME                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                MOVE 0 TO LS-RETURN-CODE                PERFORM 4000-DISPLAY-STATS            ELSE                MOVE 'Error finalizing stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         3100-CALC-TIMES.            COMPUTE WS-ELAPSED-TIME = FUNCTION                NUMVAL(WS-END-TIME(1:15)) -                NUMVAL(WS-START-TIMESTAMP(1:15))             MOVE WS-ELAPSED-TIME TO WS-CPU-TIME            MULTIPLY 0.65 BY WS-CPU-TIME            .         4000-DISPLAY-STATS.            EXEC SQL                SELECT ROWS_READ, ROWS_INSERTED,                       ROWS_UPDATED, ROWS_DELETED,                       COMMITS, ROLLBACKS,                       CPU_TIME, ELAPSED_TIME                INTO :WS-STATS-RECORD                FROM SESSION.DBSTATS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                DISPLAY 'DB2 Statistics for ' WS-PROGRAM-ID                DISPLAY '  Records Read:    ' WS-ROWS-READ                DISPLAY '  Records Inserted: ' WS-ROWS-INSERTED                DISPLAY '  Records Updated:  ' WS-ROWS-UPDATED                DISPLAY '  Records Deleted:  ' WS-ROWS-DELETED                DISPLAY '  Commits:          ' WS-COMMITS                DISPLAY '  Rollbacks:        ' WS-ROLLBACKS                 MOVE WS-CPU-TIME TO WS-FORMATTED-TIME                DISPLAY '  CPU Time:         '                        WS-FORMATTED-TIME ' seconds'                 MOVE WS-ELAPSED-TIME TO WS-FORMATTED-TIME                DISPLAY '  Elapsed Time:     '                        WS-FORMATTED-TIME ' seconds'                 MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error retrieving stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2STAT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                SELECT ROWS_READ, ROWS_INSERTED,                       ROWS_UPDATED, ROWS_DELETED,                       COMMITS, ROLLBACKS,                       CPU_TIME, ELAPSED_TIME                INTO :WS-STATS-RECORD                FROM SESSION.DBSTATS                WHERE PROGRAM_ID = :WS-PROGRAM-ID            END-EXEC             IF SQLCODE = 0                DISPLAY 'DB2 Statistics for ' WS-PROGRAM-ID                DISPLAY '  Records Read:    ' WS-ROWS-READ                DISPLAY '  Records Inserted: ' WS-ROWS-INSERTED                DISPLAY '  Records Updated:  ' WS-ROWS-UPDATED                DISPLAY '  Records Deleted:  ' WS-ROWS-DELETED                DISPLAY '  Commits:          ' WS-COMMITS                DISPLAY '  Rollbacks:        ' WS-ROLLBACKS                 MOVE WS-CPU-TIME TO WS-FORMATTED-TIME                DISPLAY '  CPU Time:         '                        WS-FORMATTED-TIME ' seconds'                 MOVE WS-ELAPSED-TIME TO WS-FORMATTED-TIME                DISPLAY '  Elapsed Time:     '                        WS-FORMATTED-TIME ' seconds'                 MOVE 0 TO LS-RETURN-CODE            ELSE                MOVE 'Error retrieving stats' TO ERR-TEXT                PERFORM 9000-ERROR-ROUTINE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2STAT' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            ."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE": [],
            "1100-CREATE-STATS-TABLE": [],
            "1200-INSERT-INITIAL": [],
            "2000-UPDATE-STATS": [],
            "3000-TERMINATE": [],
            "3100-CALC-TIMES": [],
            "4000-DISPLAY-STATS": [],
            "9000-ERROR-ROUTINE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-CREATE-STATS-TABLE",
        "1200-INSERT-INITIAL",
        "2000-UPDATE-STATS"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-UPDATE-STATS",
        "3000-TERMINATE",
        "4000-DISPLAY-STATS",
        "9000-ERROR-ROUTINE",
        "1100-CREATE-STATS-TABLE",
        "1200-INSERT-INITIAL",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "3100-CALC-TIMES",
        "4000-DISPLAY-STATS",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 228
    },
    "src/programs/common/DB2CONN.cbl": {
      "file_path": "src/programs/common/DB2CONN.cbl",
      "file_type": "cobol",
      "program_id": "DB2CONN",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/db2/DBPROC.cpy",
        "src/copybook/db2/SQLCA.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "SQLCA",
        "DBPROC",
        "ERRHAND"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "           EXEC SQL END DECLARE SECTION END-EXEC.",
        "               EXEC SQL                    CONNECT TO :WS-DB-NAME                END-EXEC                 IF SQLCODE = 0                    SET WS-CONNECTED TO TRUE                    MOVE 0 TO LS-RETURN-CODE                ELSE                    ADD 1 TO WS-RETRY-COUNT                    PERFORM 1100-HANDLE-CONN-ERROR                END-IF                 IF WS-RETRY-COUNT < WS-MAX-RETRIES                    AND NOT WS-CONNECTED                    CALL 'DELAY' USING DB2-RETRY-WAIT                END-IF            END-PERFORM            .         1100-HANDLE-CONN-ERROR.            MOVE SQLCODE TO LS-SQLCODE             EVALUATE SQLCODE                WHEN -30081                    MOVE 'Maximum connections exceeded'                      TO LS-ERROR-MSG                WHEN -99999                    MOVE 'Network error connecting to DB2'                      TO LS-ERROR-MSG                WHEN OTHER                    MOVE 'General DB2 connection error'                      TO LS-ERROR-MSG            END-EVALUATE             MOVE 12 TO LS-RETURN-CODE            .         2000-DISCONNECT.            IF WS-CONNECTED                EXEC SQL                    COMMIT WORK                END-EXEC                 EXEC SQL                    CONNECT RESET                END-EXEC                 IF SQLCODE = 0                    SET WS-DISCONNECTED TO TRUE                    MOVE 0 TO LS-RETURN-CODE                ELSE                    MOVE SQLCODE TO LS-SQLCODE                    MOVE 'Error disconnecting from DB2'                      TO LS-ERROR-MSG                    MOVE 8 TO LS-RETURN-CODE                END-IF            END-IF            .         3000-CHECK-STATUS.            EXEC SQL                SELECT CURRENT SERVER                INTO :WS-DB-NAME                FROM SYSIBM.SYSDUMMY1            END-EXEC             IF SQLCODE = 0                SET WS-CONNECTED TO TRUE                MOVE 0 TO LS-RETURN-CODE            ELSE                SET WS-DISCONNECTED TO TRUE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'DB2 connection not active'                  TO LS-ERROR-MSG                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2CONN' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "               EXEC SQL                    COMMIT WORK                END-EXEC                 EXEC SQL                    CONNECT RESET                END-EXEC                 IF SQLCODE = 0                    SET WS-DISCONNECTED TO TRUE                    MOVE 0 TO LS-RETURN-CODE                ELSE                    MOVE SQLCODE TO LS-SQLCODE                    MOVE 'Error disconnecting from DB2'                      TO LS-ERROR-MSG                    MOVE 8 TO LS-RETURN-CODE                END-IF            END-IF            .         3000-CHECK-STATUS.            EXEC SQL                SELECT CURRENT SERVER                INTO :WS-DB-NAME                FROM SYSIBM.SYSDUMMY1            END-EXEC             IF SQLCODE = 0                SET WS-CONNECTED TO TRUE                MOVE 0 TO LS-RETURN-CODE            ELSE                SET WS-DISCONNECTED TO TRUE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'DB2 connection not active'                  TO LS-ERROR-MSG                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2CONN' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "               EXEC SQL                    CONNECT RESET                END-EXEC                 IF SQLCODE = 0                    SET WS-DISCONNECTED TO TRUE                    MOVE 0 TO LS-RETURN-CODE                ELSE                    MOVE SQLCODE TO LS-SQLCODE                    MOVE 'Error disconnecting from DB2'                      TO LS-ERROR-MSG                    MOVE 8 TO LS-RETURN-CODE                END-IF            END-IF            .         3000-CHECK-STATUS.            EXEC SQL                SELECT CURRENT SERVER                INTO :WS-DB-NAME                FROM SYSIBM.SYSDUMMY1            END-EXEC             IF SQLCODE = 0                SET WS-CONNECTED TO TRUE                MOVE 0 TO LS-RETURN-CODE            ELSE                SET WS-DISCONNECTED TO TRUE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'DB2 connection not active'                  TO LS-ERROR-MSG                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2CONN' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            .",
        "           EXEC SQL                SELECT CURRENT SERVER                INTO :WS-DB-NAME                FROM SYSIBM.SYSDUMMY1            END-EXEC             IF SQLCODE = 0                SET WS-CONNECTED TO TRUE                MOVE 0 TO LS-RETURN-CODE            ELSE                SET WS-DISCONNECTED TO TRUE                MOVE SQLCODE TO LS-SQLCODE                MOVE 'DB2 connection not active'                  TO LS-ERROR-MSG                MOVE 4 TO LS-RETURN-CODE            END-IF            .         9000-ERROR-ROUTINE.            MOVE 'DB2CONN' TO ERR-PROGRAM            MOVE 12 TO LS-RETURN-CODE            CALL 'ERRPROC' USING ERR-MESSAGE            ."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-CONNECT": [],
            "1100-HANDLE-CONN-ERROR": [],
            "2000-DISCONNECT": [],
            "3000-CHECK-STATUS": [],
            "9000-ERROR-ROUTINE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-CONNECT",
        "1100-HANDLE-CONN-ERROR",
        "2000-DISCONNECT",
        "3000-CHECK-STATUS"
      ],
      "perform_targets": [
        "1000-CONNECT",
        "2000-DISCONNECT",
        "3000-CHECK-STATUS",
        "9000-ERROR-ROUTINE",
        "UNTIL",
        "1100-HANDLE-CONN-ERROR"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 154
    },
    "src/programs/batch/RPTPOS00.cbl": {
      "file_path": "src/programs/batch/RPTPOS00.cbl",
      "file_type": "cobol",
      "program_id": "RPTPOS00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/POSREC.cpy",
        "src/copybook/common/TRNREC.cpy",
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "TRNREC",
        "ERRHAND",
        "POSREC",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "REPORT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS-REPORT PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-WRITE-HEADERS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT POSITION-MASTER IF WS-POSITION-STATUS NOT = '00' MOVE 'ERROR OPENING POSITION MASTER' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT TRANSACTION-HISTORY IF WS-TRAN-STATUS NOT = '00' MOVE 'ERROR OPENING TRANSACTION HISTORY' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT REPORT-FILE IF WS-REPORT-STATUS NOT = '00' MOVE 'ERROR OPENING REPORT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-WRITE-HEADERS": [
              "ACCEPT WS-REPORT-DATE FROM DATE WRITE REPORT-RECORD FROM WS-HEADER1 WRITE REPORT-RECORD FROM WS-HEADER2 WRITE REPORT-RECORD FROM WS-HEADER3"
            ],
            "2000-PROCESS-REPORT": [
              "PERFORM 2100-READ-POSITIONS PERFORM 2200-PROCESS-TRANSACTIONS PERFORM 2300-WRITE-SUMMARY"
            ],
            "2100-READ-POSITIONS": [
              "READ POSITION-MASTER AT END SET END-OF-POSITIONS TO TRUE END-READ PERFORM UNTIL END-OF-POSITIONS PERFORM 2110-FORMAT-POSITION READ POSITION-MASTER AT END SET END-OF-POSITIONS TO TRUE END-READ END-PERFORM"
            ],
            "2110-FORMAT-POSITION": [
              "MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO MOVE POS-DESCRIPTION    TO WS-POS-DESCRIPTION MOVE POS-QUANTITY       TO WS-POS-QUANTITY MOVE POS-CURRENT-VALUE  TO WS-POS-VALUE COMPUTE WS-POS-CHANGE-PCT = (POS-CURRENT-VALUE - POS-PREVIOUS-VALUE) / POS-PREVIOUS-VALUE * 100 WRITE REPORT-RECORD FROM WS-POSITION-DETAIL"
            ],
            "2200-PROCESS-TRANSACTIONS": [
              "PERFORM 2210-READ-TRANSACTIONS PERFORM 2220-SUMMARIZE-ACTIVITY"
            ],
            "2300-WRITE-SUMMARY": [
              "PERFORM 2310-WRITE-TOTALS PERFORM 2320-WRITE-EXCEPTIONS PERFORM 2330-WRITE-METRICS"
            ],
            "3000-CLEANUP": [
              "CLOSE POSITION-MASTER TRANSACTION-HISTORY REPORT-FILE"
            ],
            "9999-ERROR-HANDLER": [
              "DISPLAY WS-ERROR-MESSAGE MOVE 12 TO RETURN-CODE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-REPORT",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "2100-READ-POSITIONS",
        "2200-PROCESS-TRANSACTIONS",
        "2300-WRITE-SUMMARY",
        "UNTIL",
        "2110-FORMAT-POSITION",
        "2210-READ-TRANSACTIONS",
        "2220-SUMMARIZE-ACTIVITY",
        "2310-WRITE-TOTALS",
        "2320-WRITE-EXCEPTIONS",
        "2330-WRITE-METRICS"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 160
    },
    "src/programs/batch/RPTSTA00.cbl": {
      "file_path": "src/programs/batch/RPTSTA00.cbl",
      "file_type": "cobol",
      "program_id": "RPTSTA00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/batch/BCHCTL.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "BCHCTL",
        "RTNCODE",
        "DB2STAT"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "REPORT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS-REPORT PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-WRITE-HEADERS PERFORM 1300-INIT-ACCUMULATORS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT DB2-STATS IF WS-DB2-STATUS NOT = '00' MOVE 'ERROR OPENING DB2 STATS' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT BATCH-STATS IF WS-BCH-STATUS NOT = '00' MOVE 'ERROR OPENING BATCH STATS' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT REPORT-FILE IF WS-REPORT-STATUS NOT = '00' MOVE 'ERROR OPENING REPORT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-WRITE-HEADERS": [
              "ACCEPT WS-REPORT-DATE FROM DATE WRITE REPORT-RECORD FROM WS-HEADER1 WRITE REPORT-RECORD FROM WS-HEADER2 WRITE REPORT-RECORD FROM WS-HEADER3"
            ],
            "1300-INIT-ACCUMULATORS": [
              "INITIALIZE WS-PERFORMANCE-METRICS"
            ],
            "2000-PROCESS-REPORT": [
              "PERFORM 2100-PROCESS-DB2-STATS PERFORM 2200-PROCESS-BATCH-STATS PERFORM 2300-CALCULATE-METRICS PERFORM 2400-WRITE-REPORT"
            ],
            "2100-PROCESS-DB2-STATS": [
              "READ DB2-STATS AT END SET END-OF-DB2-STATS TO TRUE END-READ PERFORM UNTIL END-OF-DB2-STATS PERFORM 2110-ACCUMULATE-DB2-STATS READ DB2-STATS AT END SET END-OF-DB2-STATS TO TRUE END-READ END-PERFORM"
            ],
            "2200-PROCESS-BATCH-STATS": [
              "READ BATCH-STATS AT END SET END-OF-BATCH-STATS TO TRUE END-READ PERFORM UNTIL END-OF-BATCH-STATS PERFORM 2210-ACCUMULATE-BATCH-STATS READ BATCH-STATS AT END SET END-OF-BATCH-STATS TO TRUE END-READ END-PERFORM"
            ],
            "2300-CALCULATE-METRICS": [
              "PERFORM 2310-CALC-DB2-METRICS PERFORM 2320-CALC-BATCH-METRICS"
            ],
            "2400-WRITE-REPORT": [
              "PERFORM 2410-WRITE-DB2-SECTION PERFORM 2420-WRITE-BATCH-SECTION PERFORM 2430-WRITE-TREND-ANALYSIS"
            ],
            "3000-CLEANUP": [
              "CLOSE DB2-STATS BATCH-STATS REPORT-FILE"
            ],
            "9999-ERROR-HANDLER": [
              "DISPLAY WS-ERROR-MESSAGE MOVE 12 TO RETURN-CODE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-REPORT",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS",
        "1300-INIT-ACCUMULATORS",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "2100-PROCESS-DB2-STATS",
        "2200-PROCESS-BATCH-STATS",
        "2300-CALCULATE-METRICS",
        "2400-WRITE-REPORT",
        "UNTIL",
        "2110-ACCUMULATE-DB2-STATS",
        "UNTIL",
        "2210-ACCUMULATE-BATCH-STATS",
        "2310-CALC-DB2-METRICS",
        "2320-CALC-BATCH-METRICS",
        "2410-WRITE-DB2-SECTION",
        "2420-WRITE-BATCH-SECTION",
        "2430-WRITE-TREND-ANALYSIS"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 185
    },
    "src/programs/batch/BCHCTL00.cbl": {
      "file_path": "src/programs/batch/BCHCTL00.cbl",
      "file_type": "cobol",
      "program_id": "BCHCTL00",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/batch/BCHCON.cpy",
        "src/copybook/batch/BCHCTL.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "BCHCTL",
        "ERRHAND",
        "BCHCON"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "BATCH-CONTROL-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-PROCESS-INITIALIZE": [],
            "2000-CHECK-PREREQUISITES": [],
            "3000-UPDATE-STATUS": [],
            "4000-PROCESS-TERMINATE": [],
            "9000-ERROR-ROUTINE": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-PROCESS-INITIALIZE",
        "2000-CHECK-PREREQUISITES",
        "3000-UPDATE-STATUS"
      ],
      "perform_targets": [
        "1000-PROCESS-INITIALIZE",
        "2000-CHECK-PREREQUISITES",
        "3000-UPDATE-STATUS",
        "4000-PROCESS-TERMINATE",
        "9000-ERROR-ROUTINE",
        "1100-OPEN-FILES",
        "1200-READ-CONTROL-RECORD",
        "1300-VALIDATE-PROCESS",
        "1400-UPDATE-START-STATUS",
        "2100-READ-CONTROL-RECORD",
        "2200-CHECK-DEPENDENCIES",
        "3100-READ-CONTROL-RECORD",
        "3200-UPDATE-PROCESS-STATUS",
        "3300-WRITE-CONTROL-RECORD",
        "4100-UPDATE-COMPLETION",
        "4200-CLOSE-FILES"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 127
    },
    "src/programs/batch/RTNCDE00.cbl": {
      "file_path": "src/programs/batch/RTNCDE00.cbl",
      "file_type": "cobol",
      "program_id": "RTNCDE00",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy"
      ],
      "copybook_dependencies": [
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "           EXEC SQL                 INSERT INTO RTNCODES                 (TIMESTAMP,                  PROGRAM_ID,                  RETURN_CODE,                  HIGHEST_CODE,                  STATUS_CODE,                  MESSAGE_TEXT)                 VALUES                 (:WS-CURRENT-TIME,                  :RC-PROGRAM-ID,                  :RC-CURRENT-CODE,                  :RC-HIGHEST-CODE,                  :RC-STATUS,                  :RC-MESSAGE)            END-EXEC.",
        "           EXEC SQL                 SELECT COUNT(*),                        MAX(RETURN_CODE),                        MIN(RETURN_CODE)                 INTO :RC-TOTAL-CODES,                      :RC-MAX-CODE,                      :RC-MIN-CODE                 FROM RTNCODES                 WHERE PROGRAM_ID = :RC-PROGRAM-ID                   AND TIMESTAMP >= :RC-START-TIME                   AND TIMESTAMP <= :RC-END-TIME            END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {
        "DATA": {
          "LINKAGE": {
            "P100-INIT-RETURN-CODES": [],
            "P100-EXIT": [],
            "P200-SET-RETURN-CODE": [],
            "P200-EXIT": [],
            "P300-GET-RETURN-CODE": [],
            "P300-EXIT": [],
            "P400-LOG-RETURN-CODE": [],
            "P400-EXIT": [],
            "P500-ANALYZE-CODES": [],
            "P500-EXIT": []
          }
        }
      },
      "sections": [
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "P100-INIT-RETURN-CODES",
        "P100-EXIT",
        "P200-SET-RETURN-CODE",
        "P200-EXIT",
        "P300-GET-RETURN-CODE"
      ],
      "perform_targets": [
        "P100-INIT-RETURN-CODES",
        "P200-SET-RETURN-CODE",
        "P300-GET-RETURN-CODE",
        "P400-LOG-RETURN-CODE",
        "P500-ANALYZE-CODES"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 141
    },
    "src/programs/batch/HISTLD00.cbl": {
      "file_path": "src/programs/batch/HISTLD00.cbl",
      "file_type": "cobol",
      "program_id": "HISTLD00",
      "program_type": "DB2_PROGRAM",
      "dependencies": [
        "src/copybook/batch/BCHCTL.cpy",
        "src/copybook/batch/BCHCON.cpy",
        "src/copybook/db2/SQLCA.cpy",
        "src/copybook/db2/DBTBLS.cpy",
        "src/copybook/common/ERRHAND.cpy",
        "src/copybook/common/HISTREC.cpy",
        "src/copybook/db2/DBPROC.cpy"
      ],
      "copybook_dependencies": [
        "HISTREC",
        "BCHCTL",
        "DBTBLS",
        "SQLCA",
        "ERRHAND",
        "BCHCON",
        "DBPROC"
      ],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL BEGIN DECLARE SECTION END-EXEC.",
        "           EXEC SQL END DECLARE SECTION END-EXEC.",
        "           EXEC SQL                INSERT INTO POSHIST                VALUES (:POSHIST-RECORD)            END-EXEC             IF SQLCODE = 0                ADD 1 TO WS-RECORDS-WRITTEN            ELSE                IF SQLCODE = -803                    CONTINUE                ELSE                    ADD 1 TO WS-ERROR-COUNT                    PERFORM DB2-ERROR-ROUTINE                END-IF            END-IF            .         2300-CHECK-COMMIT.            ADD 1 TO WS-COMMIT-COUNT             IF WS-COMMIT-COUNT >= WS-COMMIT-THRESHOLD                EXEC SQL                    COMMIT WORK                END-EXEC                 MOVE 0 TO WS-COMMIT-COUNT                 PERFORM 2310-UPDATE-CHECKPOINT            END-IF            .         2310-UPDATE-CHECKPOINT.            MOVE WS-RECORDS-READ TO BCT-RECORDS-READ            MOVE WS-RECORDS-WRITTEN TO BCT-RECORDS-WRITTEN             REWRITE BATCH-CONTROL-RECORD                INVALID KEY                    MOVE 'Error updating checkpoint' TO ERR-TEXT                    PERFORM 9000-ERROR-ROUTINE            END-REWRITE            .         3100-FINAL-COMMIT.            EXEC SQL                COMMIT WORK            END-EXEC             PERFORM 2310-UPDATE-CHECKPOINT            .         3200-CLOSE-FILES.            CLOSE TRANSACTION-HISTORY                  BATCH-CONTROL-FILE            .         3300-DISCONNECT-DB2.            PERFORM DISCONNECT-FROM-DB2            .         3400-DISPLAY-STATS.            DISPLAY 'HISTLD00 Processing Statistics:'            DISPLAY '  Records Read:    ' WS-RECORDS-READ            DISPLAY '  Records Written: ' WS-RECORDS-WRITTEN            DISPLAY '  Errors:         ' WS-ERROR-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'HISTLD00' TO ERR-PROGRAM            CALL 'ERRPROC' USING ERR-MESSAGE             EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "               EXEC SQL                    COMMIT WORK                END-EXEC                 MOVE 0 TO WS-COMMIT-COUNT                 PERFORM 2310-UPDATE-CHECKPOINT            END-IF            .         2310-UPDATE-CHECKPOINT.            MOVE WS-RECORDS-READ TO BCT-RECORDS-READ            MOVE WS-RECORDS-WRITTEN TO BCT-RECORDS-WRITTEN             REWRITE BATCH-CONTROL-RECORD                INVALID KEY                    MOVE 'Error updating checkpoint' TO ERR-TEXT                    PERFORM 9000-ERROR-ROUTINE            END-REWRITE            .         3100-FINAL-COMMIT.            EXEC SQL                COMMIT WORK            END-EXEC             PERFORM 2310-UPDATE-CHECKPOINT            .         3200-CLOSE-FILES.            CLOSE TRANSACTION-HISTORY                  BATCH-CONTROL-FILE            .         3300-DISCONNECT-DB2.            PERFORM DISCONNECT-FROM-DB2            .         3400-DISPLAY-STATS.            DISPLAY 'HISTLD00 Processing Statistics:'            DISPLAY '  Records Read:    ' WS-RECORDS-READ            DISPLAY '  Records Written: ' WS-RECORDS-WRITTEN            DISPLAY '  Errors:         ' WS-ERROR-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'HISTLD00' TO ERR-PROGRAM            CALL 'ERRPROC' USING ERR-MESSAGE             EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                COMMIT WORK            END-EXEC             PERFORM 2310-UPDATE-CHECKPOINT            .         3200-CLOSE-FILES.            CLOSE TRANSACTION-HISTORY                  BATCH-CONTROL-FILE            .         3300-DISCONNECT-DB2.            PERFORM DISCONNECT-FROM-DB2            .         3400-DISPLAY-STATS.            DISPLAY 'HISTLD00 Processing Statistics:'            DISPLAY '  Records Read:    ' WS-RECORDS-READ            DISPLAY '  Records Written: ' WS-RECORDS-WRITTEN            DISPLAY '  Errors:         ' WS-ERROR-COUNT            .         9000-ERROR-ROUTINE.            MOVE 'HISTLD00' TO ERR-PROGRAM            CALL 'ERRPROC' USING ERR-MESSAGE             EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                ROLLBACK WORK            END-EXEC            ."
      ],
      "file_definitions": [
        "TRANSACTION-HISTORY",
        "BATCH-CONTROL-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE OR WS-ERROR-COUNT > 100 PERFORM 3000-TERMINATE MOVE WS-ERROR-COUNT TO RETURN-CODE GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-CONNECT-DB2 PERFORM 1300-INIT-CHECKPOINTS"
            ],
            "2000-PROCESS": [
              "PERFORM 2100-READ-HISTORY IF MORE-RECORDS PERFORM 2200-LOAD-TO-DB2 PERFORM 2300-CHECK-COMMIT END-IF"
            ],
            "3000-TERMINATE": [
              "PERFORM 3100-FINAL-COMMIT PERFORM 3200-CLOSE-FILES PERFORM 3300-DISCONNECT-DB2 PERFORM 3400-DISPLAY-STATS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT TRANSACTION-HISTORY IF WS-TH-STATUS NOT = '00' MOVE 'Error opening history file' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-IF OPEN I-O BATCH-CONTROL-FILE IF WS-BCT-STATUS NOT = '00' MOVE 'Error opening control file' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-IF"
            ],
            "1200-CONNECT-DB2": [
              "PERFORM CONNECT-TO-DB2"
            ],
            "1300-INIT-CHECKPOINTS": [
              "MOVE SPACES TO BCT-KEY MOVE 'HISTLD00' TO BCT-JOB-NAME READ BATCH-CONTROL-FILE INVALID KEY MOVE 'Control record not found' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-READ MOVE BCT-STAT-ACTIVE TO BCT-STATUS REWRITE BATCH-CONTROL-RECORD"
            ],
            "2100-READ-HISTORY": [
              "READ TRANSACTION-HISTORY AT END SET END-OF-FILE TO TRUE NOT AT END ADD 1 TO WS-RECORDS-READ END-READ"
            ],
            "2200-LOAD-TO-DB2": [
              "INITIALIZE POSHIST-RECORD MOVE TH-ACCOUNT-NO    TO PH-ACCOUNT-NO MOVE TH-PORTFOLIO-ID  TO PH-PORTFOLIO-ID MOVE TH-TRANS-DATE    TO PH-TRANS-DATE MOVE TH-TRANS-TIME    TO PH-TRANS-TIME MOVE TH-TRANS-TYPE    TO PH-TRANS-TYPE MOVE TH-SECURITY-ID   TO PH-SECURITY-ID MOVE TH-QUANTITY      TO PH-QUANTITY MOVE TH-PRICE         TO PH-PRICE MOVE TH-AMOUNT        TO PH-AMOUNT MOVE TH-FEES          TO PH-FEES MOVE TH-TOTAL-AMOUNT  TO PH-TOTAL-AMOUNT MOVE TH-COST-BASIS    TO PH-COST-BASIS MOVE TH-GAIN-LOSS     TO PH-GAIN-LOSS INSERT INTO POSHIST VALUES (:POSHIST-RECORD) END-EXEC IF SQLCODE = 0 ADD 1 TO WS-RECORDS-WRITTEN ELSE IF SQLCODE = -803 CONTINUE ELSE ADD 1 TO WS-ERROR-COUNT PERFORM DB2-ERROR-ROUTINE END-IF END-IF"
            ],
            "2300-CHECK-COMMIT": [
              "ADD 1 TO WS-COMMIT-COUNT IF WS-COMMIT-COUNT >= WS-COMMIT-THRESHOLD COMMIT WORK END-EXEC MOVE 0 TO WS-COMMIT-COUNT PERFORM 2310-UPDATE-CHECKPOINT END-IF"
            ],
            "2310-UPDATE-CHECKPOINT": [
              "MOVE WS-RECORDS-READ TO BCT-RECORDS-READ MOVE WS-RECORDS-WRITTEN TO BCT-RECORDS-WRITTEN REWRITE BATCH-CONTROL-RECORD INVALID KEY MOVE 'Error updating checkpoint' TO ERR-TEXT PERFORM 9000-ERROR-ROUTINE END-REWRITE"
            ],
            "3100-FINAL-COMMIT": [
              "COMMIT WORK END-EXEC PERFORM 2310-UPDATE-CHECKPOINT"
            ],
            "3200-CLOSE-FILES": [
              "CLOSE TRANSACTION-HISTORY BATCH-CONTROL-FILE"
            ],
            "3300-DISCONNECT-DB2": [
              "PERFORM DISCONNECT-FROM-DB2"
            ],
            "3400-DISPLAY-STATS": [
              "DISPLAY 'HISTLD00 Processing Statistics:' DISPLAY '  Records Read:    ' WS-RECORDS-READ DISPLAY '  Records Written: ' WS-RECORDS-WRITTEN DISPLAY '  Errors:         ' WS-ERROR-COUNT"
            ],
            "9000-ERROR-ROUTINE": [
              "MOVE 'HISTLD00' TO ERR-PROGRAM CALL 'ERRPROC' USING ERR-MESSAGE ROLLBACK WORK END-EXEC"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "1100-OPEN-FILES",
        "1200-CONNECT-DB2",
        "1300-INIT-CHECKPOINTS",
        "2100-READ-HISTORY",
        "2200-LOAD-TO-DB2",
        "2300-CHECK-COMMIT",
        "3100-FINAL-COMMIT",
        "3200-CLOSE-FILES",
        "3300-DISCONNECT-DB2",
        "3400-DISPLAY-STATS",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "CONNECT-TO-DB2",
        "9000-ERROR-ROUTINE",
        "DB2-ERROR-ROUTINE",
        "2310-UPDATE-CHECKPOINT",
        "9000-ERROR-ROUTINE",
        "2310-UPDATE-CHECKPOINT",
        "DISCONNECT-FROM-DB2"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 233
    },
    "src/programs/batch/RTNANA00.cbl": {
      "file_path": "src/programs/batch/RTNANA00.cbl",
      "file_type": "cobol",
      "program_id": "RTNANA00",
      "program_type": "DB2_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "           EXEC SQL                 DECLARE PRGCUR CURSOR FOR                 SELECT PROGRAM_ID,                        COUNT(*) AS TOTAL,                        COUNT(CASE WHEN STATUS_CODE = 'S' THEN 1 END),                        COUNT(CASE WHEN STATUS_CODE = 'W' THEN 1 END),                        COUNT(CASE WHEN STATUS_CODE = 'E' THEN 1 END),                        COUNT(CASE WHEN STATUS_CODE = 'F' THEN 1 END)                 FROM RTNCODES                 GROUP BY PROGRAM_ID                 ORDER BY PROGRAM_ID            END-EXEC.",
        "           EXEC SQL OPEN PRGCUR END-EXEC.",
        "           EXEC SQL CLOSE PRGCUR END-EXEC.",
        "           EXEC SQL                 FETCH PRGCUR                 INTO :WS-DTL-PROGRAM,                      :WS-DTL-TOTAL,                      :WS-DTL-SUCCESS,                      :WS-DTL-WARNING,                      :WS-DTL-ERROR,                      :WS-DTL-SEVERE            END-EXEC."
      ],
      "file_definitions": [
        "REPORT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "_NOPARA": [
              "PERFORM P100-INIT-PROGRAM THRU P100-EXIT",
              "PERFORM P200-PROCESS-ANALYSIS THRU P200-EXIT",
              "PERFORM P300-GENERATE-REPORT THRU P300-EXIT",
              "PERFORM P900-CLOSE-FILES THRU P900-EXIT",
              "GOBACK"
            ],
            "P100-INIT-PROGRAM": [
              "MOVE FUNCTION CURRENT-DATE TO WS-CURRENT-DATE-DATA",
              "OPEN OUTPUT REPORT-FILE",
              "IF WS-REPORT-STATUS NOT = '00' DISPLAY 'Error opening report file: ' WS-REPORT-STATUS MOVE 12 TO RETURN-CODE GOBACK END-IF",
              "INITIALIZE WS-ANALYSIS-AREA"
            ],
            "P100-EXIT": [
              "EXIT"
            ],
            "P200-PROCESS-ANALYSIS": [
              "DECLARE PRGCUR CURSOR FOR SELECT PROGRAM_ID, COUNT(*) AS TOTAL, COUNT(CASE WHEN STATUS_CODE = 'S' THEN 1 END), COUNT(CASE WHEN STATUS_CODE = 'W' THEN 1 END), COUNT(CASE WHEN STATUS_CODE = 'E' THEN 1 END), COUNT(CASE WHEN STATUS_CODE = 'F' THEN 1 END) FROM RTNCODES GROUP BY PROGRAM_ID ORDER BY PROGRAM_ID END-EXEC",
              "PERFORM P210-WRITE-HEADERS THRU P210-EXIT",
              "PERFORM P220-PROCESS-DETAIL THRU P220-EXIT UNTIL SQLCODE = 100"
            ],
            "P200-EXIT": [
              "EXIT"
            ],
            "P210-WRITE-HEADERS": [
              "WRITE REPORT-RECORD FROM WS-HEADER1",
              "WRITE REPORT-RECORD FROM WS-HEADER2",
              "MOVE WS-CURRENT-DATE TO WS-RPT-DATE",
              "STRING WS-CURRENT-HOUR ':' WS-CURRENT-MINUTE ':' WS-CURRENT-SECOND DELIMITED BY SIZE INTO WS-RPT-TIME",
              "WRITE REPORT-RECORD FROM WS-HEADER3",
              "WRITE REPORT-RECORD FROM WS-HEADER1",
              "WRITE REPORT-RECORD FROM WS-DETAIL-HDR",
              "WRITE REPORT-RECORD FROM WS-HEADER1"
            ],
            "P210-EXIT": [
              "EXIT"
            ],
            "P220-PROCESS-DETAIL": [
              "FETCH PRGCUR INTO :WS-DTL-PROGRAM, :WS-DTL-TOTAL, :WS-DTL-SUCCESS, :WS-DTL-WARNING, :WS-DTL-ERROR, :WS-DTL-SEVERE END-EXEC",
              "IF SQLCODE = 0 WRITE REPORT-RECORD FROM WS-DETAIL-LINE ADD WS-DTL-TOTAL TO WS-PROGRAM-COUNT ADD WS-DTL-SUCCESS TO WS-SUCCESS-COUNT ADD WS-DTL-WARNING TO WS-WARNING-COUNT ADD WS-DTL-ERROR TO WS-ERROR-COUNT ADD WS-DTL-SEVERE TO WS-SEVERE-COUNT END-IF"
            ],
            "P220-EXIT": [
              "EXIT"
            ],
            "P300-GENERATE-REPORT": [
              "WRITE REPORT-RECORD FROM WS-HEADER1",
              "MOVE 'TOTALS' TO WS-DTL-PROGRAM",
              "MOVE WS-PROGRAM-COUNT TO WS-DTL-TOTAL",
              "MOVE WS-SUCCESS-COUNT TO WS-DTL-SUCCESS",
              "MOVE WS-WARNING-COUNT TO WS-DTL-WARNING",
              "MOVE WS-ERROR-COUNT TO WS-DTL-ERROR",
              "MOVE WS-SEVERE-COUNT TO WS-DTL-SEVERE",
              "WRITE REPORT-RECORD FROM WS-DETAIL-LINE",
              "WRITE REPORT-RECORD FROM WS-HEADER1"
            ],
            "P300-EXIT": [
              "EXIT"
            ],
            "P900-CLOSE-FILES": [
              "CLOSE REPORT-FILE"
            ],
            "P900-EXIT": [
              "EXIT"
            ]
          }
        }
      },
      "sections": [
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "P100-INIT-PROGRAM",
        "P100-EXIT",
        "P200-PROCESS-ANALYSIS",
        "P200-EXIT"
      ],
      "perform_targets": [
        "P100-INIT-PROGRAM",
        "P200-PROCESS-ANALYSIS",
        "P300-GENERATE-REPORT",
        "P900-CLOSE-FILES",
        "P210-WRITE-HEADERS",
        "P220-PROCESS-DETAIL"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 210
    },
    "src/programs/batch/POSUPDT.cbl": {
      "file_path": "src/programs/batch/POSUPDT.cbl",
      "file_type": "cobol",
      "program_id": "POSUPDT",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 1
    },
    "src/programs/batch/PRCSEQ00.cbl": {
      "file_path": "src/programs/batch/PRCSEQ00.cbl",
      "file_type": "cobol",
      "program_id": "PRCSEQ00",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/batch/PRCSEQ.cpy",
        "src/copybook/batch/BCHCON.cpy",
        "src/copybook/batch/BCHCTL.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "BCHCTL",
        "PRCSEQ",
        "ERRHAND",
        "BCHCON"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "PROCESS-SEQ-FILE",
        "BATCH-CONTROL-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE-SEQUENCE": [],
            "2000-GET-NEXT-PROCESS": [],
            "3000-CHECK-STATUS": [],
            "4000-TERMINATE-SEQUENCE": [],
            "9000-ERROR-ROUTINE": [],
            "1100-OPEN-FILES": [],
            "1200-BUILD-SEQUENCE": [],
            "1210-ADD-TO-SEQUENCE": [],
            "1300-CREATE-CONTROL-RECORDS": [],
            "2100-FIND-NEXT-READY": [],
            "2200-CHECK-DEPENDENCIES": [],
            "2210-CHECK-DEP-STATUS": [],
            "2300-UPDATE-PROCESS-STATUS": [],
            "3100-READ-CONTROL-STATUS": [],
            "3200-UPDATE-SEQUENCE-TABLE": [],
            "3300-CHECK-COMPLETION": [],
            "4100-CHECK-FINAL-STATUS": [],
            "4200-CLOSE-FILES": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE-SEQUENCE",
        "2000-GET-NEXT-PROCESS",
        "3000-CHECK-STATUS"
      ],
      "perform_targets": [
        "1000-INITIALIZE-SEQUENCE",
        "2000-GET-NEXT-PROCESS",
        "3000-CHECK-STATUS",
        "4000-TERMINATE-SEQUENCE",
        "9000-ERROR-ROUTINE",
        "1100-OPEN-FILES",
        "1200-BUILD-SEQUENCE",
        "1300-CREATE-CONTROL-RECORDS",
        "2100-FIND-NEXT-READY",
        "2200-CHECK-DEPENDENCIES",
        "2300-UPDATE-PROCESS-STATUS",
        "3100-READ-CONTROL-STATUS",
        "3200-UPDATE-SEQUENCE-TABLE",
        "3300-CHECK-COMPLETION",
        "4100-CHECK-FINAL-STATUS",
        "4200-CLOSE-FILES",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "UNTIL",
        "1210-ADD-TO-SEQUENCE",
        "VARYING",
        "9000-ERROR-ROUTINE",
        "VARYING",
        "9000-ERROR-ROUTINE",
        "VARYING",
        "2210-CHECK-DEP-STATUS",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "VARYING",
        "VARYING",
        "3300-CHECK-COMPLETION",
        "9000-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 345
    },
    "src/programs/batch/RPTAUD00.cbl": {
      "file_path": "src/programs/batch/RPTAUD00.cbl",
      "file_type": "cobol",
      "program_id": "RPTAUD00",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [
        "src/copybook/common/RTNCODE.cpy",
        "src/copybook/common/AUDITLOG.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "ERRHAND",
        "AUDITLOG",
        "RTNCODE"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "REPORT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS-REPORT PERFORM 3000-CLEANUP GOBACK"
            ],
            "1000-INITIALIZE": [
              "PERFORM 1100-OPEN-FILES PERFORM 1200-WRITE-HEADERS"
            ],
            "1100-OPEN-FILES": [
              "OPEN INPUT AUDIT-FILE IF WS-AUDIT-STATUS NOT = '00' MOVE 'ERROR OPENING AUDIT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN INPUT ERROR-FILE IF WS-ERROR-STATUS NOT = '00' MOVE 'ERROR OPENING ERROR FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF OPEN OUTPUT REPORT-FILE IF WS-REPORT-STATUS NOT = '00' MOVE 'ERROR OPENING REPORT FILE' TO WS-ERROR-MESSAGE PERFORM 9999-ERROR-HANDLER END-IF"
            ],
            "1200-WRITE-HEADERS": [
              "ACCEPT WS-REPORT-DATE FROM DATE WRITE REPORT-RECORD FROM WS-HEADER1 WRITE REPORT-RECORD FROM WS-HEADER2 WRITE REPORT-RECORD FROM WS-HEADER3"
            ],
            "2000-PROCESS-REPORT": [
              "PERFORM 2100-PROCESS-AUDIT-TRAIL PERFORM 2200-PROCESS-ERROR-LOG PERFORM 2300-WRITE-SUMMARY"
            ],
            "2100-PROCESS-AUDIT-TRAIL": [
              "PERFORM 2110-READ-AUDIT-RECORDS PERFORM 2120-SUMMARIZE-AUDIT"
            ],
            "2200-PROCESS-ERROR-LOG": [
              "PERFORM 2210-READ-ERROR-RECORDS PERFORM 2220-SUMMARIZE-ERRORS"
            ],
            "2300-WRITE-SUMMARY": [
              "PERFORM 2310-WRITE-AUDIT-SUMMARY PERFORM 2320-WRITE-ERROR-SUMMARY PERFORM 2330-WRITE-CONTROL-SUMMARY"
            ],
            "3000-CLEANUP": [
              "CLOSE AUDIT-FILE ERROR-FILE REPORT-FILE"
            ],
            "9999-ERROR-HANDLER": [
              "DISPLAY WS-ERROR-MESSAGE MOVE 12 TO RETURN-CODE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS-REPORT",
        "3000-CLEANUP",
        "1100-OPEN-FILES",
        "1200-WRITE-HEADERS",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "9999-ERROR-HANDLER",
        "2100-PROCESS-AUDIT-TRAIL",
        "2200-PROCESS-ERROR-LOG",
        "2300-WRITE-SUMMARY",
        "2110-READ-AUDIT-RECORDS",
        "2120-SUMMARIZE-AUDIT",
        "2210-READ-ERROR-RECORDS",
        "2220-SUMMARIZE-ERRORS",
        "2310-WRITE-AUDIT-SUMMARY",
        "2320-WRITE-ERROR-SUMMARY",
        "2330-WRITE-CONTROL-SUMMARY"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 147
    },
    "src/programs/batch/CKPRST.cbl": {
      "file_path": "src/programs/batch/CKPRST.cbl",
      "file_type": "cobol",
      "program_id": "CKPRST",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/common/RETHND.cpy",
        "src/copybook/batch/CKPRST.cpy"
      ],
      "copybook_dependencies": [
        "RETHND",
        "CKPRST"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "CHECKPOINT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "PROC-INIT": [],
            "PROC-TAKE-CHECKPOINT": [],
            "PROC-COMMIT-CHECKPOINT": [],
            "PROC-RESTART": []
          }
        }
      },
      "sections": [
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "PROC-INIT",
        "PROC-TAKE-CHECKPOINT",
        "PROC-COMMIT-CHECKPOINT",
        "PROC-RESTART"
      ],
      "perform_targets": [
        "PROC-INIT",
        "PROC-TAKE-CHECKPOINT",
        "PROC-COMMIT-CHECKPOINT",
        "PROC-RESTART"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 57
    },
    "src/programs/batch/RCVPRC00.cbl": {
      "file_path": "src/programs/batch/RCVPRC00.cbl",
      "file_type": "cobol",
      "program_id": "RCVPRC00",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [
        "src/copybook/batch/PRCSEQ.cpy",
        "src/copybook/batch/BCHCON.cpy",
        "src/copybook/batch/BCHCTL.cpy",
        "src/copybook/common/ERRHAND.cpy"
      ],
      "copybook_dependencies": [
        "PRCSEQ",
        "BCHCTL",
        "ERRHAND",
        "BCHCON"
      ],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "BATCH-CONTROL-FILE",
        "PROCESS-SEQ-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "DATA": {
          "LINKAGE": {
            "0000-MAIN": [],
            "1000-INITIALIZE-RECOVERY": [],
            "2000-PROCESS-RECOVERY": [],
            "3000-TERMINATE-RECOVERY": [],
            "9000-ERROR-ROUTINE": [],
            "1100-OPEN-FILES": [],
            "1200-VALIDATE-REQUEST": [],
            "1300-SET-RECOVERY-MODE": [],
            "2100-RECOVER-PROCESS": [],
            "2110-DETERMINE-ACTION": [],
            "2120-EXECUTE-RECOVERY": [],
            "2121-RESTART-PROCESS": [],
            "2122-BYPASS-PROCESS": [],
            "2123-TERMINATE-PROCESS": [],
            "2200-RECOVER-SEQUENCE": [],
            "2300-RECOVER-ALL": [],
            "3100-UPDATE-FINAL-STATUS": [],
            "3200-CLOSE-FILES": []
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE-RECOVERY",
        "2000-PROCESS-RECOVERY",
        "3000-TERMINATE-RECOVERY"
      ],
      "perform_targets": [
        "1000-INITIALIZE-RECOVERY",
        "2000-PROCESS-RECOVERY",
        "3000-TERMINATE-RECOVERY",
        "9000-ERROR-ROUTINE",
        "1100-OPEN-FILES",
        "1200-VALIDATE-REQUEST",
        "1300-SET-RECOVERY-MODE",
        "2100-RECOVER-PROCESS",
        "2200-RECOVER-SEQUENCE",
        "2300-RECOVER-ALL",
        "3100-UPDATE-FINAL-STATUS",
        "3200-CLOSE-FILES",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "2110-DETERMINE-ACTION",
        "2120-EXECUTE-RECOVERY",
        "9000-ERROR-ROUTINE",
        "2121-RESTART-PROCESS",
        "2122-BYPASS-PROCESS",
        "2123-TERMINATE-PROCESS",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "9000-ERROR-ROUTINE",
        "UNTIL",
        "2100-RECOVER-PROCESS",
        "9000-ERROR-ROUTINE",
        "UNTIL",
        "2100-RECOVER-PROCESS",
        "9000-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 302
    },
    "src/templates/database/db2-handling.cbl": {
      "file_path": "src/templates/database/db2-handling.cbl",
      "file_type": "cobol",
      "program_id": "DB2HNDL",
      "program_type": "DB2_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC.",
        "           EXEC SQL DECLARE PORTFOLIO TABLE            ( PORTFOLIO_ID        CHAR(10)     NOT NULL,              PORTFOLIO_NAME      VARCHAR(50)   NOT NULL,              CREATION_DATE       DATE          NOT NULL,              LAST_UPDATE_TS     TIMESTAMP     NOT NULL,              TOTAL_VALUE        DECIMAL(15,2)  NOT NULL,              STATUS             CHAR(1)        NOT NULL            ) END-EXEC.",
        "           EXEC SQL                CONNECT TO sample            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2000-PROCESS.       *----------------------------------------------------------------*       * Example DB2 operations       *----------------------------------------------------------------*            PERFORM 2100-INSERT-EXAMPLE            PERFORM 2200-SELECT-EXAMPLE            PERFORM 2300-CURSOR-EXAMPLE            PERFORM 2400-UPDATE-EXAMPLE            PERFORM 2500-DELETE-EXAMPLE            .         2100-INSERT-EXAMPLE.       *----------------------------------------------------------------*       * Example INSERT operation       *----------------------------------------------------------------*            MOVE 'PORT00001'      TO HV-PORTFOLIO-ID            MOVE 'TEST PORTFOLIO' TO HV-PORTFOLIO-NAME            MOVE ZERO             TO NI-PORTFOLIO-ID                                    NI-PORTFOLIO-NAME             EXEC SQL                INSERT INTO PORTFOLIO                (PORTFOLIO_ID, PORTFOLIO_NAME,                 CREATION_DATE, LAST_UPDATE_TS,                 TOTAL_VALUE, STATUS)                VALUES                (:HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                 :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                 CURRENT DATE,                 CURRENT TIMESTAMP,                 0,                 'A')            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2200-SELECT-EXAMPLE.       *----------------------------------------------------------------*       * Example SELECT operation       *----------------------------------------------------------------*            EXEC SQL                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       CREATION_DATE,                       LAST_UPDATE_TS,                       TOTAL_VALUE,                       STATUS                INTO  :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                      :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                      :HV-CREATION-DATE  :NI-CREATION-DATE,                      :HV-LAST-UPDATE-TS :NI-LAST-UPDATE-TS,                      :HV-TOTAL-VALUE    :NI-TOTAL-VALUE,                      :HV-STATUS         :NI-STATUS                FROM  PORTFOLIO                WHERE PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2300-CURSOR-EXAMPLE.       *----------------------------------------------------------------*       * Example cursor operations       *----------------------------------------------------------------*            EXEC SQL                DECLARE PORTFOLIO_CURSOR CURSOR FOR                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       STATUS                FROM   PORTFOLIO                WHERE  STATUS = 'A'                FOR    FETCH ONLY            END-EXEC             EXEC SQL                OPEN PORTFOLIO_CURSOR            END-EXEC             PERFORM UNTIL SQLCODE = +100                EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                INSERT INTO PORTFOLIO                (PORTFOLIO_ID, PORTFOLIO_NAME,                 CREATION_DATE, LAST_UPDATE_TS,                 TOTAL_VALUE, STATUS)                VALUES                (:HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                 :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                 CURRENT DATE,                 CURRENT TIMESTAMP,                 0,                 'A')            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2200-SELECT-EXAMPLE.       *----------------------------------------------------------------*       * Example SELECT operation       *----------------------------------------------------------------*            EXEC SQL                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       CREATION_DATE,                       LAST_UPDATE_TS,                       TOTAL_VALUE,                       STATUS                INTO  :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                      :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                      :HV-CREATION-DATE  :NI-CREATION-DATE,                      :HV-LAST-UPDATE-TS :NI-LAST-UPDATE-TS,                      :HV-TOTAL-VALUE    :NI-TOTAL-VALUE,                      :HV-STATUS         :NI-STATUS                FROM  PORTFOLIO                WHERE PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2300-CURSOR-EXAMPLE.       *----------------------------------------------------------------*       * Example cursor operations       *----------------------------------------------------------------*            EXEC SQL                DECLARE PORTFOLIO_CURSOR CURSOR FOR                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       STATUS                FROM   PORTFOLIO                WHERE  STATUS = 'A'                FOR    FETCH ONLY            END-EXEC             EXEC SQL                OPEN PORTFOLIO_CURSOR            END-EXEC             PERFORM UNTIL SQLCODE = +100                EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       CREATION_DATE,                       LAST_UPDATE_TS,                       TOTAL_VALUE,                       STATUS                INTO  :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                      :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                      :HV-CREATION-DATE  :NI-CREATION-DATE,                      :HV-LAST-UPDATE-TS :NI-LAST-UPDATE-TS,                      :HV-TOTAL-VALUE    :NI-TOTAL-VALUE,                      :HV-STATUS         :NI-STATUS                FROM  PORTFOLIO                WHERE PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2300-CURSOR-EXAMPLE.       *----------------------------------------------------------------*       * Example cursor operations       *----------------------------------------------------------------*            EXEC SQL                DECLARE PORTFOLIO_CURSOR CURSOR FOR                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       STATUS                FROM   PORTFOLIO                WHERE  STATUS = 'A'                FOR    FETCH ONLY            END-EXEC             EXEC SQL                OPEN PORTFOLIO_CURSOR            END-EXEC             PERFORM UNTIL SQLCODE = +100                EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                DECLARE PORTFOLIO_CURSOR CURSOR FOR                SELECT PORTFOLIO_ID,                       PORTFOLIO_NAME,                       STATUS                FROM   PORTFOLIO                WHERE  STATUS = 'A'                FOR    FETCH ONLY            END-EXEC             EXEC SQL                OPEN PORTFOLIO_CURSOR            END-EXEC             PERFORM UNTIL SQLCODE = +100                EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                OPEN PORTFOLIO_CURSOR            END-EXEC             PERFORM UNTIL SQLCODE = +100                EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "               EXEC SQL                    FETCH PORTFOLIO_CURSOR                    INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID,                         :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME,                         :HV-STATUS         :NI-STATUS                END-EXEC                 IF SQLCODE = +0                    PERFORM 2310-PROCESS-CURSOR-ROW                END-IF            END-PERFORM             EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                CLOSE PORTFOLIO_CURSOR            END-EXEC            .         2400-UPDATE-EXAMPLE.       *----------------------------------------------------------------*       * Example UPDATE operation       *----------------------------------------------------------------*            EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                UPDATE PORTFOLIO                SET    STATUS = 'I',                       LAST_UPDATE_TS = CURRENT TIMESTAMP                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         2500-DELETE-EXAMPLE.       *----------------------------------------------------------------*       * Example DELETE operation       *----------------------------------------------------------------*            EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                DELETE FROM PORTFOLIO                WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID            END-EXEC             PERFORM 9000-CHECK-SQL-STATUS            .         3000-TERMINATE.       *----------------------------------------------------------------*       * Disconnect from DB2 and cleanup       *----------------------------------------------------------------*            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                CONNECT RESET            END-EXEC            .         9000-CHECK-SQL-STATUS.       *----------------------------------------------------------------*       * SQL error checking       *----------------------------------------------------------------*            IF SQLCODE NOT = 0                MOVE SQLCODE TO WS-SQLCODE-DISP                MOVE SQLERRMC TO WS-SQLERRM                DISPLAY WS-DB2-ERROR-MSG                IF SQLCODE < 0                    PERFORM 9100-ROLLBACK                    MOVE 8 TO RETURN-CODE                    PERFORM 3000-TERMINATE                    GOBACK                END-IF            END-IF            .         9100-ROLLBACK.       *----------------------------------------------------------------*       * Rollback DB2 changes       *----------------------------------------------------------------*            EXEC SQL                ROLLBACK WORK            END-EXEC            .",
        "           EXEC SQL                ROLLBACK WORK            END-EXEC            ."
      ],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "*----------------------------------------------------------------* * Connect to DB2 and initialize work areas *----------------------------------------------------------------* INITIALIZE HV-PORTFOLIO HV-NULL-INDS CONNECT TO sample END-EXEC PERFORM 9000-CHECK-SQL-STATUS"
            ],
            "2000-PROCESS": [
              "*----------------------------------------------------------------* * Example DB2 operations *----------------------------------------------------------------* PERFORM 2100-INSERT-EXAMPLE PERFORM 2200-SELECT-EXAMPLE PERFORM 2300-CURSOR-EXAMPLE PERFORM 2400-UPDATE-EXAMPLE PERFORM 2500-DELETE-EXAMPLE"
            ],
            "2100-INSERT-EXAMPLE": [
              "*----------------------------------------------------------------* * Example INSERT operation *----------------------------------------------------------------* MOVE 'PORT00001'      TO HV-PORTFOLIO-ID MOVE 'TEST PORTFOLIO' TO HV-PORTFOLIO-NAME MOVE ZERO             TO NI-PORTFOLIO-ID NI-PORTFOLIO-NAME INSERT INTO PORTFOLIO (PORTFOLIO_ID, PORTFOLIO_NAME, CREATION_DATE, LAST_UPDATE_TS, TOTAL_VALUE, STATUS) VALUES (:HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID, :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME, CURRENT DATE, CURRENT TIMESTAMP, , 'A') END-EXEC PERFORM 9000-CHECK-SQL-STATUS"
            ],
            "2200-SELECT-EXAMPLE": [
              "*----------------------------------------------------------------* * Example SELECT operation *----------------------------------------------------------------* SELECT PORTFOLIO_ID, PORTFOLIO_NAME, CREATION_DATE, LAST_UPDATE_TS, TOTAL_VALUE, STATUS INTO  :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID, :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME, :HV-CREATION-DATE  :NI-CREATION-DATE, :HV-LAST-UPDATE-TS :NI-LAST-UPDATE-TS, :HV-TOTAL-VALUE    :NI-TOTAL-VALUE, :HV-STATUS         :NI-STATUS FROM  PORTFOLIO WHERE PORTFOLIO_ID = :HV-PORTFOLIO-ID END-EXEC PERFORM 9000-CHECK-SQL-STATUS"
            ],
            "2300-CURSOR-EXAMPLE": [
              "*----------------------------------------------------------------* * Example cursor operations *----------------------------------------------------------------* DECLARE PORTFOLIO_CURSOR CURSOR FOR SELECT PORTFOLIO_ID, PORTFOLIO_NAME, STATUS FROM   PORTFOLIO WHERE  STATUS = 'A' FOR    FETCH ONLY END-EXEC OPEN PORTFOLIO_CURSOR END-EXEC PERFORM UNTIL SQLCODE = +100 FETCH PORTFOLIO_CURSOR INTO :HV-PORTFOLIO-ID   :NI-PORTFOLIO-ID, :HV-PORTFOLIO-NAME :NI-PORTFOLIO-NAME, :HV-STATUS         :NI-STATUS END-EXEC IF SQLCODE = +0 PERFORM 2310-PROCESS-CURSOR-ROW END-IF END-PERFORM CLOSE PORTFOLIO_CURSOR END-EXEC"
            ],
            "2400-UPDATE-EXAMPLE": [
              "*----------------------------------------------------------------* * Example UPDATE operation *----------------------------------------------------------------* UPDATE PORTFOLIO SET    STATUS = 'I', LAST_UPDATE_TS = CURRENT TIMESTAMP WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID END-EXEC PERFORM 9000-CHECK-SQL-STATUS"
            ],
            "2500-DELETE-EXAMPLE": [
              "*----------------------------------------------------------------* * Example DELETE operation *----------------------------------------------------------------* DELETE FROM PORTFOLIO WHERE  PORTFOLIO_ID = :HV-PORTFOLIO-ID END-EXEC PERFORM 9000-CHECK-SQL-STATUS"
            ],
            "3000-TERMINATE": [
              "*----------------------------------------------------------------* * Disconnect from DB2 and cleanup *----------------------------------------------------------------* COMMIT WORK END-EXEC CONNECT RESET END-EXEC"
            ],
            "9000-CHECK-SQL-STATUS": [
              "*----------------------------------------------------------------* * SQL error checking *----------------------------------------------------------------* IF SQLCODE NOT = 0 MOVE SQLCODE TO WS-SQLCODE-DISP MOVE SQLERRMC TO WS-SQLERRM DISPLAY WS-DB2-ERROR-MSG IF SQLCODE < 0 PERFORM 9100-ROLLBACK MOVE 8 TO RETURN-CODE PERFORM 3000-TERMINATE GOBACK END-IF END-IF"
            ],
            "9100-ROLLBACK": [
              "*----------------------------------------------------------------* * Rollback DB2 changes *----------------------------------------------------------------* ROLLBACK WORK END-EXEC"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-INSERT-EXAMPLE",
        "2200-SELECT-EXAMPLE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "9000-CHECK-SQL-STATUS",
        "2100-INSERT-EXAMPLE",
        "2200-SELECT-EXAMPLE",
        "2300-CURSOR-EXAMPLE",
        "2400-UPDATE-EXAMPLE",
        "2500-DELETE-EXAMPLE",
        "9000-CHECK-SQL-STATUS",
        "9000-CHECK-SQL-STATUS",
        "UNTIL",
        "2310-PROCESS-CURSOR-ROW",
        "9000-CHECK-SQL-STATUS",
        "9000-CHECK-SQL-STATUS",
        "9100-ROLLBACK",
        "3000-TERMINATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 246
    },
    "src/templates/error/error-handling.cbl": {
      "file_path": "src/templates/error/error-handling.cbl",
      "file_type": "cobol",
      "program_id": "ERRHANDL",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "INITIALIZE WS-ERROR-FLAGS WS-ERROR-COUNTS SET NO-ERROR TO TRUE SET NO-ABEND TO TRUE"
            ],
            "2000-PROCESS": [
              "*----------------------------------------------------------------* * Example error handling scenarios *----------------------------------------------------------------* *    Example of handling a warning PERFORM 8010-HANDLE-WARNING *    Example of handling an error PERFORM 8020-HANDLE-ERROR *    Example of handling a severe error PERFORM 8030-HANDLE-SEVERE *    Example of handling an abend condition PERFORM 8040-HANDLE-ABEND"
            ],
            "3000-TERMINATE": [
              "PERFORM 8000-CHECK-FINAL-STATUS"
            ],
            "8000-CHECK-FINAL-STATUS": [
              "*================================================================* * Error Handling Routines *================================================================* *----------------------------------------------------------------* * Determine final return code based on error counts *----------------------------------------------------------------* IF WS-SEVERE-COUNT > ZERO MOVE RC-SEVERE TO RETURN-CODE ELSE IF WS-ERROR-COUNT > ZERO MOVE RC-ERROR TO RETURN-CODE ELSE IF WS-WARNING-COUNT > ZERO MOVE RC-WARNING TO RETURN-CODE ELSE MOVE RC-SUCCESS TO RETURN-CODE END-IF END-IF END-IF"
            ],
            "8010-HANDLE-WARNING": [
              "*----------------------------------------------------------------* * Warning handling pattern *----------------------------------------------------------------* ADD 1 TO WS-WARNING-COUNT MOVE 'WARNING' TO WS-ERROR-SEVERITY MOVE 1 TO WS-ERROR-NUMBER MOVE ERR-001 TO WS-ERROR-TEXT PERFORM 8100-LOG-ERROR"
            ],
            "8020-HANDLE-ERROR": [
              "*----------------------------------------------------------------* * Error handling pattern *----------------------------------------------------------------* ADD 1 TO WS-ERROR-COUNT SET ERROR-OCCURRED TO TRUE MOVE 'ERROR' TO WS-ERROR-SEVERITY MOVE 2 TO WS-ERROR-NUMBER MOVE ERR-002 TO WS-ERROR-TEXT PERFORM 8100-LOG-ERROR"
            ],
            "8030-HANDLE-SEVERE": [
              "*----------------------------------------------------------------* * Severe error handling pattern *----------------------------------------------------------------* ADD 1 TO WS-SEVERE-COUNT SET ERROR-OCCURRED TO TRUE MOVE 'SEVERE' TO WS-ERROR-SEVERITY MOVE 3 TO WS-ERROR-NUMBER MOVE ERR-003 TO WS-ERROR-TEXT PERFORM 8100-LOG-ERROR"
            ],
            "8040-HANDLE-ABEND": [
              "*----------------------------------------------------------------* * Abend handling pattern *----------------------------------------------------------------* SET PERFORM-ABEND TO TRUE MOVE 'CRITICAL' TO WS-ERROR-SEVERITY MOVE 999 TO WS-ERROR-NUMBER MOVE 'UNRECOVERABLE ERROR - INITIATING ABEND' TO WS-ERROR-TEXT PERFORM 8100-LOG-ERROR PERFORM 8500-INITIATE-ABEND"
            ],
            "8100-LOG-ERROR": [
              "*----------------------------------------------------------------* * Common error logging routine *----------------------------------------------------------------* DISPLAY WS-ERROR-PREFIX '-' WS-ERROR-NUMBER ': ' WS-ERROR-SEVERITY DISPLAY WS-ERROR-TEXT"
            ],
            "8500-INITIATE-ABEND": [
              "*----------------------------------------------------------------* * Controlled abend routine *----------------------------------------------------------------* DISPLAY 'ABNORMAL TERMINATION INITIATED' CALL 'CEE3ABD' USING RC-CRITICAL, 3"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "8000-CHECK-FINAL-STATUS"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "8010-HANDLE-WARNING",
        "8020-HANDLE-ERROR",
        "8030-HANDLE-SEVERE",
        "8040-HANDLE-ABEND",
        "8000-CHECK-FINAL-STATUS",
        "8100-LOG-ERROR",
        "8100-LOG-ERROR",
        "8100-LOG-ERROR",
        "8100-LOG-ERROR",
        "8500-INITIATE-ABEND"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 187
    },
    "src/templates/program/file-handling.cbl": {
      "file_path": "src/templates/program/file-handling.cbl",
      "file_type": "cobol",
      "program_id": "FILEHNDL",
      "program_type": "MAIN_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [
        "VSAM-FILE",
        "INPUT-FILE",
        "OUTPUT-FILE"
      ],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "*----------------------------------------------------------------* * Open files and initialize work areas *----------------------------------------------------------------* INITIALIZE WS-FILE-STATUS OPEN INPUT  VSAM-FILE OPEN INPUT  INPUT-FILE OPEN OUTPUT OUTPUT-FILE PERFORM 9000-CHECK-FILE-STATUS"
            ],
            "2000-PROCESS": [],
            "2100-READ-VSAM": [
              "*----------------------------------------------------------------* * Example VSAM READ operation *----------------------------------------------------------------* MOVE LOW-VALUES TO VSAM-RECORD-KEY READ VSAM-FILE KEY IS VSAM-RECORD-KEY INVALID KEY PERFORM 9100-VSAM-ERROR END-READ IF VSAM-SUCCESS PERFORM 2110-PROCESS-VSAM-RECORD END-IF"
            ],
            "2200-WRITE-VSAM": [
              "*----------------------------------------------------------------* * Example VSAM WRITE operation *----------------------------------------------------------------* WRITE VSAM-RECORD INVALID KEY PERFORM 9100-VSAM-ERROR END-WRITE"
            ],
            "2300-READ-SEQUENTIAL": [
              "*----------------------------------------------------------------* * Example Sequential READ operation *----------------------------------------------------------------* READ INPUT-FILE AT END SET INPUT-EOF TO TRUE NOT AT END PERFORM 2310-PROCESS-INPUT-RECORD END-READ"
            ],
            "3000-TERMINATE": [
              "*----------------------------------------------------------------* * Close files and perform cleanup *----------------------------------------------------------------* CLOSE VSAM-FILE INPUT-FILE OUTPUT-FILE PERFORM 9000-CHECK-FILE-STATUS"
            ],
            "9000-CHECK-FILE-STATUS": [
              "*----------------------------------------------------------------* * Error handling routines *----------------------------------------------------------------* IF NOT VSAM-SUCCESS AND NOT VSAM-EOF PERFORM 9100-VSAM-ERROR END-IF IF NOT INPUT-SUCCESS AND NOT INPUT-EOF PERFORM 9200-SEQ-ERROR END-IF IF NOT OUTPUT-SUCCESS PERFORM 9200-SEQ-ERROR END-IF"
            ],
            "9100-VSAM-ERROR": [
              "DISPLAY 'VSAM ERROR - FILE STATUS: ' WS-VSAM-STATUS MOVE 8 TO RETURN-CODE PERFORM 3000-TERMINATE GOBACK"
            ],
            "9200-SEQ-ERROR": [
              "DISPLAY 'SEQUENTIAL FILE ERROR - STATUS: ' WS-INPUT-STATUS ' ' WS-OUTPUT-STATUS MOVE 8 TO RETURN-CODE PERFORM 3000-TERMINATE GOBACK"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "2100-READ-VSAM"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE",
        "9000-CHECK-FILE-STATUS",
        "9100-VSAM-ERROR",
        "2110-PROCESS-VSAM-RECORD",
        "9100-VSAM-ERROR",
        "2310-PROCESS-INPUT-RECORD",
        "cleanup",
        "9000-CHECK-FILE-STATUS",
        "9100-VSAM-ERROR",
        "9200-SEQ-ERROR",
        "9200-SEQ-ERROR",
        "3000-TERMINATE",
        "3000-TERMINATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 189
    },
    "src/templates/program/standard-program.cbl": {
      "file_path": "src/templates/program/standard-program.cbl",
      "file_type": "cobol",
      "program_id": "PROGNAME",
      "program_type": "CALLED_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {
        "ENVIRONMENT": {
          "INPUT-OUTPUT": {
            "FILE-CONTROL": []
          }
        },
        "PROCEDURE": {
          "_UNSECTIONED": {
            "0000-MAIN": [
              "*----------------------------------------------------------------* * Main process *----------------------------------------------------------------* PERFORM 1000-INITIALIZE PERFORM 2000-PROCESS UNTIL END-OF-FILE PERFORM 3000-TERMINATE GOBACK"
            ],
            "1000-INITIALIZE": [
              "*----------------------------------------------------------------* * Initialization *----------------------------------------------------------------* INITIALIZE WS-WORK-AREAS"
            ],
            "2000-PROCESS": [
              "*----------------------------------------------------------------* * Main processing *----------------------------------------------------------------* *> Main processing logic will go here SET END-OF-FILE TO TRUE"
            ],
            "3000-TERMINATE": [
              "*----------------------------------------------------------------* * Termination *----------------------------------------------------------------* MOVE WS-RETURN-CODE TO RETURN-CODE"
            ],
            "9000-HANDLE-ERROR": [
              "*----------------------------------------------------------------* * Error handling routines *----------------------------------------------------------------* *> Error handling logic will go here MOVE WS-ERROR TO WS-RETURN-CODE"
            ]
          }
        }
      },
      "sections": [
        "CONFIGURATION",
        "INPUT-OUTPUT",
        "FILE",
        "WORKING-STORAGE",
        "LINKAGE"
      ],
      "paragraphs": [
        "FILE-CONTROL",
        "0000-MAIN",
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE"
      ],
      "perform_targets": [
        "1000-INITIALIZE",
        "2000-PROCESS",
        "3000-TERMINATE"
      ],
      "goto_targets": [],
      "divisions": [
        "IDENTIFICATION DIVISION",
        "ENVIRONMENT DIVISION",
        "DATA DIVISION",
        "PROCEDURE DIVISION"
      ],
      "starter": true,
      "line_count": 90
    },
    "src/copybook/online/ERRHND.cpy": {
      "file_path": "src/copybook/online/ERRHND.cpy",
      "file_type": "copybook",
      "program_id": "ERRHND",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 21
    },
    "src/copybook/online/DB2REQ.cpy": {
      "file_path": "src/copybook/online/DB2REQ.cpy",
      "file_type": "copybook",
      "program_id": "DB2REQ",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 13
    },
    "src/copybook/online/INQCOM.cpy": {
      "file_path": "src/copybook/online/INQCOM.cpy",
      "file_type": "copybook",
      "program_id": "INQCOM",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 12
    },
    "src/copybook/common/POSREC.cpy": {
      "file_path": "src/copybook/common/POSREC.cpy",
      "file_type": "copybook",
      "program_id": "POSREC",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 33
    },
    "src/copybook/common/RTNCODE.cpy": {
      "file_path": "src/copybook/common/RTNCODE.cpy",
      "file_type": "copybook",
      "program_id": "RTNCODE",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 32
    },
    "src/copybook/common/ERRHAND.cpy": {
      "file_path": "src/copybook/common/ERRHAND.cpy",
      "file_type": "copybook",
      "program_id": "ERRHAND",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 56
    },
    "src/copybook/common/PORTFLIO.cpy": {
      "file_path": "src/copybook/common/PORTFLIO.cpy",
      "file_type": "copybook",
      "program_id": "PORTFLIO",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 34
    },
    "src/copybook/common/TRNREC.cpy": {
      "file_path": "src/copybook/common/TRNREC.cpy",
      "file_type": "copybook",
      "program_id": "TRNREC",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 40
    },
    "src/copybook/common/PORTVAL.cpy": {
      "file_path": "src/copybook/common/PORTVAL.cpy",
      "file_type": "copybook",
      "program_id": "PORTVAL",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 46
    },
    "src/copybook/common/COMMON.cpy": {
      "file_path": "src/copybook/common/COMMON.cpy",
      "file_type": "copybook",
      "program_id": "COMMON",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 64
    },
    "src/copybook/common/AUDITLOG.cpy": {
      "file_path": "src/copybook/common/AUDITLOG.cpy",
      "file_type": "copybook",
      "program_id": "AUDITLOG",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 36
    },
    "src/copybook/common/HISTREC.cpy": {
      "file_path": "src/copybook/common/HISTREC.cpy",
      "file_type": "copybook",
      "program_id": "HISTREC",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 39
    },
    "src/copybook/common/RETHND.cpy": {
      "file_path": "src/copybook/common/RETHND.cpy",
      "file_type": "copybook",
      "program_id": "RETHND",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 66
    },
    "src/copybook/db2/DBTBLS.cpy": {
      "file_path": "src/copybook/db2/DBTBLS.cpy",
      "file_type": "copybook",
      "program_id": "DBTBLS",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 50
    },
    "src/copybook/db2/DBPROC.cpy": {
      "file_path": "src/copybook/db2/DBPROC.cpy",
      "file_type": "copybook",
      "program_id": "DBPROC",
      "program_type": "DB2_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL                CONNECT TO POSMVP            END-EXEC            IF SQLCODE NOT = 0                MOVE 'Connection failed' TO DB2-ERROR-TEXT                PERFORM DB2-ERROR-ROUTINE            END-IF            .         DISCONNECT-FROM-DB2.            EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         DB2-ERROR-ROUTINE.            MOVE SQLCODE TO DB2-SQLCODE-TXT            MOVE SQLSTATE TO DB2-STATE             EXEC SQL                ROLLBACK WORK            END-EXEC             MOVE 'DB2ERROR' TO ERR-PROGRAM            MOVE DB2-ERROR-MESSAGE TO ERR-TEXT            CALL 'ERRPROC' USING ERR-MESSAGE            .         CHECK-SQL-STATUS.            IF SQLCODE NOT = 0                PERFORM DB2-ERROR-ROUTINE            END-IF            .",
        "           EXEC SQL                COMMIT WORK            END-EXEC             EXEC SQL                CONNECT RESET            END-EXEC            .         DB2-ERROR-ROUTINE.            MOVE SQLCODE TO DB2-SQLCODE-TXT            MOVE SQLSTATE TO DB2-STATE             EXEC SQL                ROLLBACK WORK            END-EXEC             MOVE 'DB2ERROR' TO ERR-PROGRAM            MOVE DB2-ERROR-MESSAGE TO ERR-TEXT            CALL 'ERRPROC' USING ERR-MESSAGE            .         CHECK-SQL-STATUS.            IF SQLCODE NOT = 0                PERFORM DB2-ERROR-ROUTINE            END-IF            .",
        "           EXEC SQL                CONNECT RESET            END-EXEC            .         DB2-ERROR-ROUTINE.            MOVE SQLCODE TO DB2-SQLCODE-TXT            MOVE SQLSTATE TO DB2-STATE             EXEC SQL                ROLLBACK WORK            END-EXEC             MOVE 'DB2ERROR' TO ERR-PROGRAM            MOVE DB2-ERROR-MESSAGE TO ERR-TEXT            CALL 'ERRPROC' USING ERR-MESSAGE            .         CHECK-SQL-STATUS.            IF SQLCODE NOT = 0                PERFORM DB2-ERROR-ROUTINE            END-IF            .",
        "           EXEC SQL                ROLLBACK WORK            END-EXEC             MOVE 'DB2ERROR' TO ERR-PROGRAM            MOVE DB2-ERROR-MESSAGE TO ERR-TEXT            CALL 'ERRPROC' USING ERR-MESSAGE            .         CHECK-SQL-STATUS.            IF SQLCODE NOT = 0                PERFORM DB2-ERROR-ROUTINE            END-IF            ."
      ],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [
        "DB2-ERROR-ROUTINE",
        "DB2-ERROR-ROUTINE"
      ],
      "goto_targets": [],
      "divisions": [],
      "starter": true,
      "line_count": 63
    },
    "src/copybook/db2/SQLCA.cpy": {
      "file_path": "src/copybook/db2/SQLCA.cpy",
      "file_type": "copybook",
      "program_id": "SQLCA",
      "program_type": "DB2_PROGRAM",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [
        "           EXEC SQL INCLUDE SQLCA END-EXEC."
      ],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 15
    },
    "src/copybook/batch/BCHCON.cpy": {
      "file_path": "src/copybook/batch/BCHCON.cpy",
      "file_type": "copybook",
      "program_id": "BCHCON",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 65
    },
    "src/copybook/batch/CKPRST.cpy": {
      "file_path": "src/copybook/batch/CKPRST.cpy",
      "file_type": "copybook",
      "program_id": "CKPRST",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 76
    },
    "src/copybook/batch/BCHCTL.cpy": {
      "file_path": "src/copybook/batch/BCHCTL.cpy",
      "file_type": "copybook",
      "program_id": "BCHCTL",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 49
    },
    "src/copybook/batch/PRCSEQ.cpy": {
      "file_path": "src/copybook/batch/PRCSEQ.cpy",
      "file_type": "copybook",
      "program_id": "PRCSEQ",
      "program_type": "COPYBOOK",
      "dependencies": [],
      "copybook_dependencies": [],
      "program_calls": [],
      "exec_statements": [],
      "file_definitions": [],
      "structure_index": {},
      "sections": [],
      "paragraphs": [],
      "perform_targets": [],
      "goto_targets": [],
      "divisions": [],
      "starter": false,
      "line_count": 75
    }
  }
}
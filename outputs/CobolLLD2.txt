# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the technical changes and low-level design (LLD2) for enhancements made to the COBOL portfolio transaction processing and reporting applications. The primary focus of these changes is the introduction and integration of the new `TRANSACTION-TYPE` field, which allows for enhanced transaction categorization and improved backward compatibility in both transaction processing (`PORTTRAN`) and reporting (`RPTPOS00`) modules.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application suite processes portfolio transactions and generates daily position reports. The main modules are:
- **PORTTRAN**: Handles transaction file processing, validation, portfolio updates, and audit logging.
- **RPTPOS00**: Generates daily position reports, summarizing portfolio positions and transaction activity.

### 2.2 Detailed Logic  
#### PORTTRAN
- **Initialization (1000-INITIALIZE)**: Opens transaction and portfolio files, initializes counters and status flags.
- **Transaction Processing (2000-PROCESS-TRANSACTIONS)**: Reads each transaction, applies default values for missing fields, validates data, and updates portfolios.
- **Validation (2100-VALIDATE-TRANSACTION)**: Checks portfolio existence, transaction type, and amount validity.
- **Portfolio Update (2200-UPDATE-POSITIONS)**: Updates portfolio records based on transaction type (BUY, SELL, TRANSFER, FEE).
- **Audit Logging (2300-UPDATE-AUDIT-TRAIL)**: Logs transaction details, including the new `TRANSACTION-TYPE`, for auditing.

#### RPTPOS00
- **Initialization (1000-INITIALIZE)**: Opens master, transaction, and report files; writes report headers.
- **Report Generation (2000-PROCESS-REPORT)**: Reads positions and transactions, formats and writes details to the report, including the new `TRANSACTION-TYPE`.
- **Summary and Exception Reporting (2300-WRITE-SUMMARY)**: Outputs totals and counts of transactions with missing `TRANSACTION-TYPE`.

#### Flowchart:  
```mermaid
flowchart TD
    Start(["Start"]) --> Init[/"Initialize Files & Status"/]
    Init --> ProcessTrans[/"Process Transactions"/]
    ProcessTrans -->|For each record| ValidateTrans[/"Validate Transaction"/]
    ValidateTrans -->|Valid| UpdatePortfolio[/"Update Portfolio"/]
    ValidateTrans -->|Invalid| ErrorRoutine[/"Error Routine"/]
    UpdatePortfolio --> AuditTrail[/"Update Audit Trail"/]
    AuditTrail --> NextTrans{More Records?}
    ErrorRoutine --> NextTrans
    NextTrans -- Yes --> ProcessTrans
    NextTrans -- No --> Terminate[/"Terminate & Close Files"/]
    Terminate --> End(["End"])
```

## 3. Impacted Changes  
### 3.1 User Story or Analysis Report Summary  
**Enhancement:**  
Add a new field `TRANSACTION-TYPE` (X(10)) to the transaction record structure for extended categorization. Ensure backward compatibility by defaulting this field to `UNSPECIFIED` if missing. Update both transaction processing and reporting modules to handle and display this new field.

### 3.2 Impacted Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **TRNREC Copybook**: Structure definition for transaction records.
- **PORTTRAN (Portfolio Transaction Processing Program)**:
  - Data Division: Working-storage and file section.
  - Procedure Division: Transaction reading, validation, audit logging.
- **RPTPOS00 (Daily Position Report Generator)**:
  - Data Division: Working-storage and file section.
  - Procedure Division: Transaction reading, report formatting, and exception reporting.

**Purpose of Changes:**  
- To enable extended transaction classification for improved reporting, analytics, and future business requirements.
- To maintain backward compatibility with legacy data by providing a default value for missing `TRANSACTION-TYPE`.

**Impact:**  
- All new and existing transactions can now be categorized using the new field.
- Reports and audit logs will include the new field, improving traceability.
- Legacy data without the new field will not cause failures; instead, a default value is used.

### 3.3 Insertion Points  
- **TRNREC Copybook**:  
  - Insert `TRN-TRANSACTION-TYPE` (PIC X(10)) after `TRN-TYPE`.
  - Reduce filler size to accommodate the new field.

- **PORTTRAN**:
  - **WORKING-STORAGE SECTION**: Add `WS-DEFAULT-TRAN-TYPE` (PIC X(10) VALUE 'UNSPECIFIED').
  - **2000-PROCESS-TRANSACTIONS**:  
    - After reading each transaction, check if `TRN-TRANSACTION-TYPE` is missing (SPACES or LOW-VALUES). If so, move the default value.
  - **2120-CHECK-TRANSACTION-TYPE**:  
    - Add logic to optionally validate presence of `TRN-TRANSACTION-TYPE`.
  - **2300-UPDATE-AUDIT-TRAIL**:  
    - Include `TRN-TRANSACTION-TYPE` in the audit message string.

- **RPTPOS00**:
  - **WORKING-STORAGE SECTION**:  
    - Add fields for transaction detail display, including `WS-TRAN-TRAN-TYPE`.
    - Add counters for missing transaction types.
  - **2210-READ-TRANSACTIONS**:  
    - When reading each transaction, if `TRN-TRANSACTION-TYPE` is missing, use default display value and increment missing-type counter.
    - Move value to display field for report output.
  - **1200-WRITE-HEADERS**:  
    - Add column header for the new field.
  - **2320-WRITE-EXCEPTIONS**:  
    - Display count of transactions with missing `TRANSACTION-TYPE`.

### 3.4 Structured Diffs  

#### TRNREC Copybook  
**Before:**  
```cobol
10  TRN-TYPE           PIC X(02).
    88  TRN-TYPE-BUY     VALUE 'BU'.
    88  TRN-TYPE-SELL    VALUE 'SL'.
    88  TRN-TYPE-TRANS   VALUE 'TR'.
    88  TRN-TYPE-FEE     VALUE 'FE'.
10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
10  TRN-PRICE          PIC S9(11)V9(4) COMP-3.
...
10  TRN-FILLER         PIC X(50).
```

**After:**  
```cobol
10  TRN-TYPE           PIC X(02).
    88  TRN-TYPE-BUY     VALUE 'BU'.
    88  TRN-TYPE-SELL    VALUE 'SL'.
    88  TRN-TYPE-TRANS   VALUE 'TR'.
    88  TRN-TYPE-FEE     VALUE 'FE'.
10  TRN-TRANSACTION-TYPE PIC X(10).
*   ^^^ Added: TRANSACTION-TYPE field for enhanced transaction categorization
10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
10  TRN-PRICE          PIC S9(11)V9(4) COMP-3.
...
10  TRN-FILLER         PIC X(40).
*   ^^^ Reduced filler by 10 bytes to accommodate TRANSACTION-TYPE
```

#### PORTTRAN (Portfolio Transaction Processing)

**Insertion in WORKING-STORAGE SECTION:**  
```cobol
01  WS-DEFAULT-TRAN-TYPE    PIC X(10) VALUE 'UNSPECIFIED'.
```

**Insertion in 2000-PROCESS-TRANSACTIONS:**  
**Before:**  
```cobol
READ TRANSACTION-FILE
    AT END
        SET END-OF-FILE TO TRUE
    NOT AT END
        ADD 1 TO WS-READ-COUNT
        PERFORM 2100-VALIDATE-TRANSACTION
END-READ
.
```
**After:**  
```cobol
READ TRANSACTION-FILE
    AT END
        SET END-OF-FILE TO TRUE
    NOT AT END
        ADD 1 TO WS-READ-COUNT

*-- Ensure backward compatibility: Default TRANSACTION-TYPE if missing
        IF TRN-TRANSACTION-TYPE = SPACES OR TRN-TRANSACTION-TYPE = LOW-VALUES
            MOVE WS-DEFAULT-TRAN-TYPE TO TRN-TRANSACTION-TYPE
        END-IF
*-- End backward compatibility logic

        PERFORM 2100-VALIDATE-TRANSACTION
END-READ
.
```

**Insertion in 2120-CHECK-TRANSACTION-TYPE:**  
**Before:**  
```cobol
EVALUATE TRN-TYPE
    WHEN 'BU'
    WHEN 'SL'
    WHEN 'TR'
    WHEN 'FE'
        CONTINUE
    WHEN OTHER
        STRING 'Invalid Transaction Type: '
               TRN-TYPE
          DELIMITED BY SIZE
          INTO ERR-TEXT
END-EVALUATE
```
**After:**  
```cobol
EVALUATE TRN-TYPE
    WHEN 'BU'
    WHEN 'SL'
    WHEN 'TR'
    WHEN 'FE'
        CONTINUE
    WHEN OTHER
        STRING 'Invalid Transaction Type: '
               TRN-TYPE
          DELIMITED BY SIZE
          INTO ERR-TEXT
END-EVALUATE

*-- Validate new TRANSACTION-TYPE field for presence (optional, can be extended)
IF TRN-TRANSACTION-TYPE = SPACES OR TRN-TRANSACTION-TYPE = LOW-VALUES
    CONTINUE
*   (Could add further validation if business rules require)
END-IF
*-- End TRANSACTION-TYPE validation
```

**Insertion in 2300-UPDATE-AUDIT-TRAIL:**  
**Before:**  
```cobol
STRING 'Transaction: ' DELIMITED BY SIZE
       TRN-TYPE       DELIMITED BY SIZE
       ' Amount: '    DELIMITED BY SIZE
       TRN-AMOUNT     DELIMITED BY SIZE
       ' Units: '     DELIMITED BY SIZE
       TRN-QUANTITY   DELIMITED BY SIZE
  INTO AUD-MESSAGE
```
**After:**  
```cobol
STRING 'Transaction: ' DELIMITED BY SIZE
       TRN-TYPE       DELIMITED BY SIZE
       ' Type: '      DELIMITED BY SIZE
       TRN-TRANSACTION-TYPE DELIMITED BY SIZE
*   ^^^ Added TRANSACTION-TYPE to audit message
       ' Amount: '    DELIMITED BY SIZE
       TRN-AMOUNT     DELIMITED BY SIZE
       ' Units: '     DELIMITED BY SIZE
       TRN-QUANTITY   DELIMITED BY SIZE
  INTO AUD-MESSAGE
```

#### RPTPOS00 (Daily Position Report Generator)

**Insertion in WORKING-STORAGE SECTION:**  
```cobol
01  WS-TRANSACTION-DETAIL.
    05  WS-TRAN-DATE         PIC X(8).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TIME         PIC X(6).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-PORTFOLIO    PIC X(8).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TYPE         PIC X(2).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TRAN-TYPE    PIC X(10).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-AMOUNT       PIC -ZZZZZZZZ9.99.
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-STATUS       PIC X(1).
    05  FILLER               PIC X(97) VALUE SPACES.
```

**Insertion in 2210-READ-TRANSACTIONS:**  
**Before:**  
```cobol
MOVE TRN-DATE           TO WS-TRAN-DATE
MOVE TRN-TIME           TO WS-TRAN-TIME
MOVE TRN-PORTFOLIO-ID   TO WS-TRAN-PORTFOLIO
MOVE TRN-TYPE           TO WS-TRAN-TYPE
MOVE TRN-AMOUNT         TO WS-TRAN-AMOUNT
MOVE TRN-STATUS         TO WS-TRAN-STATUS

WRITE REPORT-RECORD FROM WS-TRANSACTION-DETAIL

ADD 1 TO WS-REPORT-TRAN-COUNT
```
**After:**  
```cobol
*-- Backward compatibility: Default TRANSACTION-TYPE if missing
IF TRN-TRANSACTION-TYPE = SPACES OR TRN-TRANSACTION-TYPE = LOW-VALUES
    MOVE WS-REPORT-TRAN-TYPE-DEFAULT TO WS-REPORT-TRAN-TYPE-DISPLAY
    ADD 1 TO WS-REPORT-TRAN-MISSING-TYPE
ELSE
    MOVE TRN-TRANSACTION-TYPE TO WS-REPORT-TRAN-TYPE-DISPLAY
END-IF
*-- End backward compatibility logic

MOVE TRN-DATE           TO WS-TRAN-DATE
MOVE TRN-TIME           TO WS-TRAN-TIME
MOVE TRN-PORTFOLIO-ID   TO WS-TRAN-PORTFOLIO
MOVE TRN-TYPE           TO WS-TRAN-TYPE
MOVE WS-REPORT-TRAN-TYPE-DISPLAY TO WS-TRAN-TRAN-TYPE
MOVE TRN-AMOUNT         TO WS-TRAN-AMOUNT
MOVE TRN-STATUS         TO WS-TRAN-STATUS

WRITE REPORT-RECORD FROM WS-TRANSACTION-DETAIL

ADD 1 TO WS-REPORT-TRAN-COUNT
```

**Insertion in 1200-WRITE-HEADERS:**  
**Before:**  
```cobol
WRITE REPORT-RECORD FROM WS-HEADER1
WRITE REPORT-RECORD FROM WS-HEADER2
WRITE REPORT-RECORD FROM WS-HEADER3
```
**After:**  
```cobol
WRITE REPORT-RECORD FROM WS-HEADER1
WRITE REPORT-RECORD FROM WS-HEADER2
WRITE REPORT-RECORD FROM WS-HEADER3
WRITE REPORT-RECORD FROM WS-REPORT-HEADERS-TRAN.
*   ^^^ Added transaction section column headers
```

**Insertion in 2320-WRITE-EXCEPTIONS:**  
```cobol
DISPLAY 'TRANSACTIONS WITH MISSING TYPE: ' WS-REPORT-TRAN-MISSING-TYPE.
```

## 4. Conclusion  
The introduction of the `TRANSACTION-TYPE` field enhances the application's ability to categorize transactions for improved reporting and analytics. Backward compatibility ensures that legacy data is handled gracefully, with missing values defaulted to `UNSPECIFIED`. All impacted modules have been updated to process, validate, and display the new field, ensuring robust and future-proof transaction management and reporting.


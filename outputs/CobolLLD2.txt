
# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the technical changes and low-level design (LLD2) for the COBOL portfolio system to support the addition of a new `TRANSACTION-TYPE` field. The change impacts transaction processing, reporting, and history management, ensuring backward compatibility for legacy records. The document provides a comprehensive analysis of code changes, logic insertion points, structured diffs, and rationale.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The portfolio system processes and reports on financial transactions across multiple batch and reporting modules. Core transaction data is defined in a shared copybook and propagated through batch processing, position updating, reporting, and audit modules.

### 2.2 Detailed Logic  
- **Transaction Processing:**  
  - Transactions are read from input files, validated, and processed (e.g., buy, sell, transfer, fee) in `PORTTRAN.cbl`.
  - Position updates and audit trails are maintained.
- **Reporting:**  
  - Daily position and transaction activity are reported in `RPTPOS00.cbl`.
  - Audit and error logs are reported in `RPTAUD00.cbl`.
- **History Loading:**  
  - Transaction history is loaded into DB2 in `HISTLD00.cbl`.
- **Portfolio Update:**  
  - Portfolio records are updated in `POSUPDT.cbl`.

#### Flowchart:
```mermaid
flowchart TD
    Start([Start])
    ReadTrans([Read Transaction Record])
    Validate([Validate Transaction])
    Process([Process Transaction])
    UpdatePos([Update Portfolio])
    Audit([Write Audit Trail])
    Report([Generate Reports])
    LoadHist([Load History])
    End([End])

    Start --> ReadTrans
    ReadTrans --> Validate
    Validate --> Process
    Process --> UpdatePos
    UpdatePos --> Audit
    Audit --> Report
    Report --> LoadHist
    LoadHist --> End
```

## 3. Impacted Changes  
### 3.1 User Story or Analysis Report Summary  
**User Story:**  
Add a new field, `TRANSACTION-TYPE (PIC X(10))`, to the transaction record layout and propagate support for this field throughout all batch processing and reporting programs. Ensure backward compatibility for legacy records.

### 3.2 Impacted Code Changes Summary

#### 3.2.1 Impacted Sections and Files:
- **TRNREC.cpy** (`/src/copybook/common/TRNREC.cpy`)
- **PORTTRAN.cbl** (`/src/programs/portfolio/PORTTRAN.cbl`)
- **RPTPOS00.cbl** (`/src/programs/batch/RPTPOS00.cbl`)
- **POSUPDT.cbl** (`/src/programs/portfolio/PORTUPDT.cbl`)
- **HISTLD00.cbl** (`/src/programs/batch/HISTLD00.cbl`)
- **RPTAUD00.cbl** (`/src/programs/batch/RPTAUD00.cbl`)

**Purpose of Changes:**  
- To introduce a user-defined transaction type field for enhanced reporting, analytics, and future extensibility.
- To ensure all modules that process, report, or audit transactions can read, write, and display the new field.
- To maintain backward compatibility by defaulting the new field for legacy records.

**Impact:**  
- Core data structure change in the transaction copybook.
- Batch processing, reporting, and audit modules updated to handle the new field.
- Additional validation and defaulting logic for legacy data.
- Minor changes in working storage and output layouts.
- No change to record length due to filler adjustment.

### 3.3 Insertion Points  

#### TRNREC.cpy
- **Section:** `TRANSACTION-RECORD` > `TRN-DATA`
- **Change:**  
  - Insert new field:  
    ```cobol
    10  TRN-TRANSACTION-TYPE PIC X(10).   *> Added: Transaction Type field for new requirements
    ```
  - Reduce filler by 10 bytes to maintain record length.

#### PORTTRAN.cbl
- **Section:** `WORKING-STORAGE SECTION`, `2100-VALIDATE-TRANSACTION`, `2120-CHECK-TRANSACTION-TYPE`, `2300-UPDATE-AUDIT-TRAIL`
- **Change:**  
  - Add working-storage for `TRN-TRANSACTION-TYPE`.
  - In validation, default `TRN-TRANSACTION-TYPE` to 'STANDARD' if blank (legacy).
  - Include `TRN-TRANSACTION-TYPE` in audit trail and audit message.

#### RPTPOS00.cbl
- **Section:** `WS-TRANSACTION-DETAIL`, `2210-READ-TRANSACTIONS`
- **Change:**  
  - Add `WS-TRAN-TRANSACTION-TYPE` to transaction detail.
  - Move `TRN-TRANSACTION-TYPE` to report output.

#### POSUPDT.cbl
- **Section:** `WORKING-STORAGE SECTION`, `2200-APPLY-UPDATE`
- **Change:**  
  - Add working-storage for `TRANSACTION-TYPE`.
  - Set `TRANSACTION-TYPE` if present in update action.

#### HISTLD00.cbl
- **Section:** `WORKING-STORAGE SECTION`, `2200-LOAD-TO-DB2`
- **Change:**  
  - Add working-storage for `TRANSACTION-TYPE`.
  - Move field from history record to working-storage and (future) DB2 mapping.

#### RPTAUD00.cbl
- **Section:** `WS-AUDIT-DETAIL`, `2110-READ-AUDIT-RECORDS`
- **Change:**  
  - Add `WS-AUD-TRANSACTION-TYPE` to audit detail.
  - Output field if present in audit record.

### 3.4 Structured Diffs  

#### TRNREC.cpy

**Before:**
```cobol
10  TRN-TYPE           PIC X(02).
    88  TRN-TYPE-BUY     VALUE 'BU'.
    88  TRN-TYPE-SELL    VALUE 'SL'.
    88  TRN-TYPE-TRANS   VALUE 'TR'.
    88  TRN-TYPE-FEE     VALUE 'FE'.
10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
...
05  TRN-FILLER           PIC X(50).
```

**After:**
```cobol
10  TRN-TYPE           PIC X(02).
    88  TRN-TYPE-BUY     VALUE 'BU'.
    88  TRN-TYPE-SELL    VALUE 'SL'.
    88  TRN-TYPE-TRANS   VALUE 'TR'.
    88  TRN-TYPE-FEE     VALUE 'FE'.
10  TRN-TRANSACTION-TYPE PIC X(10).   *> Added: Transaction Type field for new requirements
10  TRN-QUANTITY       PIC S9(11)V9(4) COMP-3.
...
05  TRN-FILLER           PIC X(40).      *> Reduced filler by 10 bytes to maintain record length
```

---

#### PORTTRAN.cbl

**Before (Validation):**
```cobol
2100-VALIDATE-TRANSACTION.
    MOVE SPACES TO ERR-TEXT
    PERFORM 2110-CHECK-PORTFOLIO
    IF ERR-TEXT = SPACES
        PERFORM 2120-CHECK-TRANSACTION-TYPE
    END-IF
    IF ERR-TEXT = SPACES
        PERFORM 2130-CHECK-AMOUNTS
    END-IF
    IF ERR-TEXT = SPACES
        ADD 1 TO WS-PROCESS-COUNT
    ELSE
        PERFORM 9000-ERROR-ROUTINE
    END-IF
```

**After (Validation):**
```cobol
2100-VALIDATE-TRANSACTION.
    MOVE SPACES TO ERR-TEXT
    PERFORM 2110-CHECK-PORTFOLIO
    IF ERR-TEXT = SPACES
        PERFORM 2120-CHECK-TRANSACTION-TYPE
    END-IF
    IF ERR-TEXT = SPACES
        PERFORM 2130-CHECK-AMOUNTS
    END-IF

    *> Begin: Validate new TRANSACTION-TYPE field for backward compatibility
    IF ERR-TEXT = SPACES
        IF TRN-TRANSACTION-TYPE = SPACES
            MOVE 'STANDARD' TO TRN-TRANSACTION-TYPE
            *> Default value for legacy records
        END-IF
    END-IF
    *> End: Validate new TRANSACTION-TYPE field

    IF ERR-TEXT = SPACES
        ADD 1 TO WS-PROCESS-COUNT
    ELSE
        PERFORM 9000-ERROR-ROUTINE
    END-IF
```

**Before (Audit Trail):**
```cobol
2300-UPDATE-AUDIT-TRAIL.
    INITIALIZE AUDIT-RECORD
    MOVE FUNCTION CURRENT-DATE TO AUD-TIMESTAMP
    MOVE 'PORTTRAN'     TO AUD-PROGRAM
    MOVE FUNCTION USER-ID TO AUD-USER-ID
    MOVE 'TRAN'         TO AUD-TYPE
    ...
    STRING 'Transaction: ' DELIMITED BY SIZE
           TRN-TYPE       DELIMITED BY SIZE
           ' Amount: '    DELIMITED BY SIZE
           TRN-AMOUNT     DELIMITED BY SIZE
           ' Units: '     DELIMITED BY SIZE
           TRN-QUANTITY   DELIMITED BY SIZE
       INTO AUD-MESSAGE
    ...
```

**After (Audit Trail):**
```cobol
2300-UPDATE-AUDIT-TRAIL.
    INITIALIZE AUDIT-RECORD
    MOVE FUNCTION CURRENT-DATE TO AUD-TIMESTAMP
    MOVE 'PORTTRAN'     TO AUD-PROGRAM
    MOVE FUNCTION USER-ID TO AUD-USER-ID
    MOVE 'TRAN'         TO AUD-TYPE

    *> Begin: Audit new TRANSACTION-TYPE field
    MOVE TRN-TRANSACTION-TYPE TO WS-TRANSACTION-TYPE-VALUE
    *> End: Audit new field

    ...
    STRING 'Transaction: ' DELIMITED BY SIZE
           TRN-TYPE       DELIMITED BY SIZE
           ' Type: '      DELIMITED BY SIZE
           TRN-TRANSACTION-TYPE DELIMITED BY SIZE
           ' Amount: '    DELIMITED BY SIZE
           TRN-AMOUNT     DELIMITED BY SIZE
           ' Units: '     DELIMITED BY SIZE
           TRN-QUANTITY   DELIMITED BY SIZE
       INTO AUD-MESSAGE
    ...
```

---

#### RPTPOS00.cbl

**Before:**
```cobol
01  WS-TRANSACTION-DETAIL.
    05  WS-TRAN-DATE         PIC X(8).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TIME         PIC X(6).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TYPE         PIC X(2).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-INVESTMENT   PIC X(10).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-QUANTITY     PIC ZZZ,ZZZ,ZZ9.99.
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-AMOUNT       PIC $$$$,$$$,$$9.99.
    05  FILLER               PIC X(80) VALUE SPACES.
```

**After:**
```cobol
01  WS-TRANSACTION-DETAIL.
    05  WS-TRAN-DATE         PIC X(8).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TIME         PIC X(6).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TYPE         PIC X(2).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-TRANSACTION-TYPE PIC X(10).  *> Added: New field for report
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-INVESTMENT   PIC X(10).
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-QUANTITY     PIC ZZZ,ZZZ,ZZ9.99.
    05  FILLER               PIC X(1) VALUE ' '.
    05  WS-TRAN-AMOUNT       PIC $$$$,$$$,$$9.99.
    05  FILLER               PIC X(80) VALUE SPACES.
```

**Before (Transaction Read):**
```cobol
MOVE TRN-DATE            TO WS-TRAN-DATE
MOVE TRN-TIME            TO WS-TRAN-TIME
MOVE TRN-TYPE            TO WS-TRAN-TYPE
MOVE TRN-INVESTMENT-ID   TO WS-TRAN-INVESTMENT
MOVE TRN-QUANTITY        TO WS-TRAN-QUANTITY
MOVE TRN-AMOUNT          TO WS-TRAN-AMOUNT
WRITE REPORT-RECORD FROM WS-TRANSACTION-DETAIL
```

**After (Transaction Read):**
```cobol
MOVE TRN-DATE            TO WS-TRAN-DATE
MOVE TRN-TIME            TO WS-TRAN-TIME
MOVE TRN-TYPE            TO WS-TRAN-TYPE
MOVE TRN-TRANSACTION-TYPE TO WS-TRAN-TRANSACTION-TYPE
MOVE TRN-INVESTMENT-ID   TO WS-TRAN-INVESTMENT
MOVE TRN-QUANTITY        TO WS-TRAN-QUANTITY
MOVE TRN-AMOUNT          TO WS-TRAN-AMOUNT
WRITE REPORT-RECORD FROM WS-TRANSACTION-DETAIL
```

---

#### POSUPDT.cbl

**Before:**
```cobol
01  WS-WORK-AREAS.
    05  WS-UPDATE-COUNT     PIC 9(7) VALUE ZERO.
    05  WS-ERROR-COUNT      PIC 9(7) VALUE ZERO.
    05  WS-RETURN-CODE      PIC S9(4) VALUE +0.
    05  WS-NUMERIC-WORK     PIC S9(13)V99.
```

**After:**
```cobol
01  WS-WORK-AREAS.
    05  WS-UPDATE-COUNT     PIC 9(7) VALUE ZERO.
    05  WS-ERROR-COUNT      PIC 9(7) VALUE ZERO.
    05  WS-RETURN-CODE      PIC S9(4) VALUE +0.
    05  WS-NUMERIC-WORK     PIC S9(13)V99.
    05  WS-TRANSACTION-TYPE PIC X(10).  *> Added: For new transaction type field
```

**Before (Apply Update):**
```cobol
EVALUATE TRUE
    WHEN UPDT-STATUS
        MOVE UPDT-NEW-VALUE TO PORT-STATUS
    WHEN UPDT-NAME
        MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
    WHEN UPDT-VALUE
        MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
        MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
END-EVALUATE
```

**After (Apply Update):**
```cobol
EVALUATE TRUE
    WHEN UPDT-STATUS
        MOVE UPDT-NEW-VALUE TO PORT-STATUS
    WHEN UPDT-NAME
        MOVE UPDT-NEW-VALUE TO PORT-CLIENT-NAME
    WHEN UPDT-VALUE
        MOVE UPDT-NEW-VALUE TO WS-NUMERIC-WORK
        MOVE WS-NUMERIC-WORK TO PORT-TOTAL-VALUE
END-EVALUATE

*> Begin: Set TRANSACTION-TYPE for consistency if present
IF UPDT-ACTION = 'T'
    MOVE UPDT-NEW-VALUE TO WS-TRANSACTION-TYPE
    *> Here you would update the transaction record's TRANSACTION-TYPE if available
END-IF
*> End: Set TRANSACTION-TYPE
```

---

#### HISTLD00.cbl

**Before:**
```cobol
01  WS-TRANSACTION-TYPE       PIC X(10).  *> Added: For new field
...
MOVE TH-TRANS-TYPE    TO PH-TRANS-TYPE
MOVE TH-SECURITY-ID   TO PH-SECURITY-ID
```

**After:**
```cobol
01  WS-TRANSACTION-TYPE       PIC X(10).  *> Added: For new field
...
MOVE TH-TRANS-TYPE    TO PH-TRANS-TYPE
MOVE TH-TRANSACTION-TYPE TO WS-TRANSACTION-TYPE  *> Added: Move new field to WS
*> Add logic to map WS-TRANSACTION-TYPE to DB2 if needed
MOVE TH-SECURITY-ID   TO PH-SECURITY-ID
```

---

#### RPTAUD00.cbl

**Before:**
```cobol
01  WS-AUDIT-DETAIL.
    05  WS-AUD-TIMESTAMP     PIC X(26).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-PROGRAM       PIC X(8).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-TYPE          PIC X(10).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-MESSAGE       PIC X(68).
```

**After:**
```cobol
01  WS-AUDIT-DETAIL.
    05  WS-AUD-TIMESTAMP     PIC X(26).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-PROGRAM       PIC X(8).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-TYPE          PIC X(10).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-TRANSACTION-TYPE PIC X(10).  *> Added: For new field
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-AUD-MESSAGE       PIC X(68).
```

**Before (Read Audit Records):**
```cobol
MOVE AUD-TIMESTAMP        TO WS-AUD-TIMESTAMP
MOVE AUD-PROGRAM          TO WS-AUD-PROGRAM
MOVE AUD-TYPE             TO WS-AUD-TYPE
MOVE AUD-MESSAGE          TO WS-AUD-MESSAGE
WRITE REPORT-RECORD FROM WS-AUDIT-DETAIL
```

**After (Read Audit Records):**
```cobol
MOVE AUD-TIMESTAMP        TO WS-AUD-TIMESTAMP
MOVE AUD-PROGRAM          TO WS-AUD-PROGRAM
MOVE AUD-TYPE             TO WS-AUD-TYPE
IF AUD-TRANSACTION-TYPE NOT = SPACES
    MOVE AUD-TRANSACTION-TYPE TO WS-AUD-TRANSACTION-TYPE
ELSE
    MOVE SPACES TO WS-AUD-TRANSACTION-TYPE
END-IF
MOVE AUD-MESSAGE          TO WS-AUD-MESSAGE
WRITE REPORT-RECORD FROM WS-AUDIT-DETAIL
```

---

## 4. Conclusion  
The addition of the `TRANSACTION-TYPE` field enhances the flexibility and reporting capabilities of the COBOL portfolio system. All impacted modules have been updated to support the new field, with validation and defaulting logic to ensure backward compatibility. Structured diffs and insertion points are provided for efficient implementation and review. The changes are expected to improve data quality, enable richer analytics, and future-proof the transaction processing architecture.

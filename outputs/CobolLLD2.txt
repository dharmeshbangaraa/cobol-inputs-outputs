# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the recent structural and logic changes made to the COBOL application modules and copybooks related to transaction processing. The primary focus is the introduction of the `CHANNEL-CODE` field for channel identification within transaction records, along with necessary adjustments to maintain record integrity and traceability. This document serves as a reference for developers, testers, and maintainers to understand the impact and rationale behind these changes.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes financial transactions by reading, validating, and updating transaction records. The core logic involves extracting transaction details, applying business rules, and generating reports or outputs based on transaction status and type.

### 2.2 Detailed Logic  
- **Transaction Record Structure:**  
  - Each transaction is represented by a structured record containing key identifiers (date, time, portfolio, sequence), transaction data (type, quantity, price, amount, currency, status), audit information, and filler for record length consistency.
- **Processing Flow:**  
  - Transaction records are read from input sources.
  - Validation routines ensure data integrity.
  - Business logic is applied based on transaction type and status.
  - Output is generated for reporting or further processing.

#### Flowchart:  
```
flowchart TD
    Start(["Start"])
    ReadRecord["Read
Transaction
Record"]
    ValidateRecord["Validate
Record"]
    ApplyBusinessLogic["Apply
Business
Logic"]
    UpdateStatus["Update
Status"]
    GenerateOutput["Generate
Output/Report"]
    End(["End"])

    Start --> ReadRecord
    ReadRecord --> ValidateRecord
    ValidateRecord --> ApplyBusinessLogic
    ApplyBusinessLogic --> UpdateStatus
    UpdateStatus --> GenerateOutput
    GenerateOutput --> End
```

## 3. Impacted Changes  
### 3.1 User Story or Analysis Report Summary  
To enhance transaction traceability and support multi-channel processing, a new field `CHANNEL-CODE` (PIC X(04)) has been added to the transaction record structure. This enables identification of the originating channel for each transaction (e.g., online, branch, mobile). The change required structural updates to the copybook and corresponding adjustments in all programs referencing the transaction record.

### 3.2 Impacted Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/copybook/common/TRNREC.cpy**
- **src/programs/batch/RPTPOS00.cbl**
- **src/programs/utility/UTLVAL00.cbl**
- **src/programs/test/TSTGEN00.cbl**
- **src/programs/test/TSTVAL00.cbl**

  - **Purpose of Changes:**  
    To introduce the `CHANNEL-CODE` field for channel identification in transaction records, ensuring all related programs can access and utilize this new field. The filler size was reduced to maintain the overall record length.
  
  - **Impact:**  
    - All programs using the transaction record structure now have access to the `CHANNEL-CODE` field.
    - Record layouts and field mappings are updated, requiring corresponding changes in data handling logic.
    - Backward compatibility is maintained by adjusting the filler field.
    - Enhanced reporting and validation capabilities based on transaction channel.

### 3.3 Insertion Points  
- **TRNREC.CPY (src/copybook/common/TRNREC.cpy):**
  - `CHANNEL-CODE` added to the `TRN-KEY` group (after `TRN-SEQUENCE-NO`).
  - `TRN-FILLER` reduced from `X(50)` to `X(46)` to accommodate the new field.
  - Field descriptions updated to document `CHANNEL-CODE`.
- **All referencing programs (RPTPOS00.cbl, UTLVAL00.cbl, TSTGEN00.cbl, TSTVAL00.cbl):**
  - Any logic referencing the transaction key structure now includes `CHANNEL-CODE`.
  - Data movement, validation, and reporting logic updated to handle the new field where applicable.
  - Inline comments added for traceability.

### 3.4 Structured Diffs  

#### **src/copybook/common/TRNREC.cpy**

**Before:**
```cobol
     05  TRN-KEY.
         10  TRN-DATE           PIC X(08).
         10  TRN-TIME           PIC X(06).
         10  TRN-PORTFOLIO-ID   PIC X(08).
         10  TRN-SEQUENCE-NO    PIC X(06).
     05  TRN-DATA.
         ...
     05  TRN-FILLER           PIC X(50).
```

**After:**
```cobol
     05  TRN-KEY.
         10  TRN-DATE           PIC X(08).
         10  TRN-TIME           PIC X(06).
         10  TRN-PORTFOLIO-ID   PIC X(08).
         10  TRN-SEQUENCE-NO    PIC X(06).
         10  CHANNEL-CODE       PIC X(04).   *-- Change: Added CHANNEL-CODE for channel identification
     05  TRN-DATA.
         ...
     05  TRN-FILLER           PIC X(46).     *-- Change: Reduced filler by 4 to accommodate CHANNEL-CODE
```

**Field Descriptions (Updated):**
```cobol
* CHANNEL-CODE    : CHANNEL IDENTIFICATION CODE (NEW)
```

#### **src/programs/batch/RPTPOS00.cbl**  
**Before:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... logic referencing TRN-KEY fields ...
```
**After:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... logic referencing TRN-KEY fields, now includes CHANNEL-CODE ...
* Example:
    MOVE TRANSACTION-RECORD-CHANNEL-CODE TO WS-CHANNEL-CODE
    *-- Change: Added logic to handle CHANNEL-CODE for reporting
```

#### **src/programs/utility/UTLVAL00.cbl**  
**Before:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... validation logic ...
```
**After:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... validation logic updated to include CHANNEL-CODE ...
* Example:
    IF CHANNEL-CODE = SPACES
        MOVE 'MISSING CHANNEL' TO ERROR-MSG
    END-IF
    *-- Change: Added validation for CHANNEL-CODE
```

#### **src/programs/test/TSTGEN00.cbl**  
**Before:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... test data generation ...
```
**After:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... test data generation includes CHANNEL-CODE ...
* Example:
    MOVE 'ONLN' TO CHANNEL-CODE
    *-- Change: Test data now sets CHANNEL-CODE
```

#### **src/programs/test/TSTVAL00.cbl**  
**Before:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... test validation logic ...
```
**After:**
```cobol
COPY 'src/copybook/common/TRNREC.cpy'.
* ... test validation logic includes CHANNEL-CODE ...
* Example:
    IF CHANNEL-CODE NOT = 'ONLN'
        MOVE 'INVALID CHANNEL' TO TEST-ERROR-MSG
    END-IF
    *-- Change: Test validation now checks CHANNEL-CODE
```

## 4. Conclusion  
The introduction of the `CHANNEL-CODE` field enhances the application's ability to track and process transactions by channel, supporting future business requirements for channel-based reporting and validation. All impacted modules and copybooks have been updated to ensure consistency and maintainability. The changes are backward-compatible and fully traceable through inline comments and updated documentation.


# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the recent enhancements made to the COBOL-based position reporting and audit infrastructure. The changes introduce real-time price feed support, dynamic valuation, and enhanced audit logging for alarms and stale price events. The purpose of this document is to provide a clear understanding of the modifications, their rationale, and their impact on the system, supporting maintainability and future enhancements.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The application suite processes portfolio positions, transaction histories, and audit trails. Key modules include:
- **RPTPOS00**: Generates daily position reports, summarizing portfolio positions, transaction activity, and exceptions.
- **HISTLD00**: Loads position history into DB2, supporting backtesting and historical analysis.
- **AUDPROC**: Handles audit trail logging for all significant events.

### 2.2 Detailed Logic  
#### RPTPOS00 (Daily Position Report Generator)
- **Initialization**: Opens master and transaction files, writes report headers (Lines 10-50).
- **Processing**: Reads positions, formats details, integrates real-time price feed, and writes to report (Lines 51-150).
- **Termination**: Closes files and handles errors (Lines 151-200).

#### POSREC (Position Record Copybook)
- Defines the structure for position records, now including real-time price, timestamp, and P&L fields.

#### HISTLD00 (Position History Loader)
- **Initialization**: Opens files, connects to DB2, initializes checkpoints.
- **Processing**: Reads transaction history, loads records into DB2, now including real-time price data.
- **Termination**: Commits, closes files, disconnects from DB2, displays stats.

#### AUDITLOG & AUDPROC (Audit Logging)
- Defines and processes audit records, now supporting new event types (alarm, stale price) and associated fields.

#### Flowchart:  
```
flowchart TD
    Start(["Start"])
    Init["Initialize
(Open Files, Headers)"]
    ReadPos["Read
Positions"]
    FormatPos["Format
Position Details"]
    RealTimeCheck["Check
Real-Time Price"]
    WriteReport["Write
Report Record"]
    ReadTrans["Read
Transactions"]
    Summarize["Summarize
Activity"]
    WriteSummary["Write
Summary"]
    AuditEvent["Audit
Event Logging"]
    End(["End"])

    Start --> Init
    Init --> ReadPos
    ReadPos --> FormatPos
    FormatPos --> RealTimeCheck
    RealTimeCheck --> WriteReport
    WriteReport --> ReadTrans
    ReadTrans --> Summarize
    Summarize --> WriteSummary
    WriteSummary --> AuditEvent
    AuditEvent --> End
```

## 3. Impacted Changes  
### 3.1 User Story or Analysis Report Summary  
Enhance the position reporting and audit modules to support real-time price feeds, dynamic P&L calculation, and improved audit logging for alarms and stale price events. This enables more accurate reporting, backtesting, and compliance with audit requirements.

### 3.2 Impacted Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:
- **src/programs/batch/RPTPOS00.cbl** (RPTPOS00)
- **src/copybook/common/POSREC.cpy** (POSREC)
- **src/programs/batch/HISTLD00.cbl** (HISTLD00)
- **src/copybook/common/AUDITLOG.cpy** (AUDITLOG)
- **src/programs/common/AUDPROC.cbl** (AUDPROC)

**Purpose of Changes:**  
- Integrate real-time price and P&L fields for dynamic valuation and reporting.
- Support historical price feed and backtesting in position history loader.
- Enhance audit logging to capture alarm and stale price events for compliance and monitoring.

**Impact:**  
- Enables real-time and historical analytics.
- Improves auditability and traceability of critical events.
- Requires downstream consumers to handle new fields in records.

### 3.3 Insertion Points  
- **RPTPOS00.cbl**:  
  - *WS-POSITION-DETAIL* structure: Added fields for real-time price, timestamp, and P&L.
  - *2110-FORMAT-POSITION* paragraph: Logic to populate new fields and compute real-time P&L.
- **POSREC.cpy**:  
  - Added new fields to the position record structure.
- **HISTLD00.cbl**:  
  - *2200-LOAD-TO-DB2* paragraph: Logic to load new real-time fields into the DB2 history table.
- **AUDITLOG.cpy**:  
  - Added new event types and fields for alarm and stale price events.
- **AUDPROC.cbl**:  
  - *LINKAGE SECTION*: Added new fields for alarms and stale price events.
  - *2000-PROCESS-AUDIT* paragraph: Logic to map new fields based on event type.

### 3.4 Structured Diffs  

#### **RPTPOS00.cbl**
**Before:**
```cobol
01  WS-POSITION-DETAIL.
    05  WS-POS-PORTFOLIO     PIC X(10).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-DESCRIPTION   PIC X(30).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-QUANTITY      PIC ZZZ,ZZZ,ZZ9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-VALUE         PIC $$$$,$$$,$$9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-CHANGE-PCT    PIC +ZZ9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
```
**After:**
```cobol
01  WS-POSITION-DETAIL.
    05  WS-POS-PORTFOLIO     PIC X(10).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-DESCRIPTION   PIC X(30).
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-QUANTITY      PIC ZZZ,ZZZ,ZZ9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-VALUE         PIC $$$$,$$$,$$9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-CHANGE-PCT    PIC +ZZ9.99.
    05  FILLER               PIC X(2) VALUE SPACES.
    05  WS-POS-REALTIME-PRICE   PIC S9(13)V9(2) COMP-3. *-- Change: Added real-time price field for dynamic valuation
    05  WS-POS-PRICE-TIMESTAMP  PIC X(26).               *-- Change: Added timestamp for real-time price
    05  WS-POS-REALTIME-PNL     PIC S9(13)V9(2) COMP-3. *-- Change: Added real-time P&L field
```

**Before (2110-FORMAT-POSITION):**
```cobol
2110-FORMAT-POSITION.
    MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO
    MOVE POS-DESCRIPTION    TO WS-POS-DESCRIPTION
    MOVE POS-QUANTITY       TO WS-POS-QUANTITY
    MOVE POS-MARKET-VALUE   TO WS-POS-VALUE
    COMPUTE WS-POS-CHANGE-PCT = 
        (POS-MARKET-VALUE - POS-COST-BASIS) /
         POS-COST-BASIS * 100
    WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```
**After:**
```cobol
2110-FORMAT-POSITION.
    MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO
    MOVE POS-DESCRIPTION    TO WS-POS-DESCRIPTION
    MOVE POS-QUANTITY       TO WS-POS-QUANTITY
    MOVE POS-MARKET-VALUE   TO WS-POS-VALUE
    COMPUTE WS-POS-CHANGE-PCT = 
        (POS-MARKET-VALUE - POS-COST-BASIS) /
         POS-COST-BASIS * 100
    *-- Change: Integrate real-time price feed for valuation
    IF POS-REALTIME-PRICE NOT = ZERO
        MOVE POS-REALTIME-PRICE TO WS-POS-REALTIME-PRICE
        MOVE POS-PRICE-TIMESTAMP TO WS-POS-PRICE-TIMESTAMP
        COMPUTE WS-POS-REALTIME-PNL = 
            (POS-REALTIME-PRICE - POS-COST-BASIS) * POS-QUANTITY
        *-- Change: Real-time P&L calculation based on latest price feed
    ELSE
        MOVE POS-MARKET-VALUE TO WS-POS-REALTIME-PRICE
        MOVE SPACES TO WS-POS-PRICE-TIMESTAMP
        MOVE ZERO TO WS-POS-REALTIME-PNL
    END-IF
    WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.
```

#### **POSREC.cpy**
**Before:**
```cobol
10  POS-QUANTITY       PIC S9(11)V9(4) COMP-3.
10  POS-COST-BASIS     PIC S9(13)V9(2) COMP-3.
10  POS-MARKET-VALUE   PIC S9(13)V9(2) COMP-3.
10  POS-CURRENCY       PIC X(03).
10  POS-STATUS         PIC X(01).
```
**After:**
```cobol
10  POS-QUANTITY       PIC S9(11)V9(4) COMP-3.
10  POS-COST-BASIS     PIC S9(13)V9(2) COMP-3.
10  POS-MARKET-VALUE   PIC S9(13)V9(2) COMP-3.
10  POS-REALTIME-PRICE PIC S9(13)V9(2) COMP-3.   *-- Change: Added real-time price field
10  POS-PRICE-TIMESTAMP PIC X(26).               *-- Change: Added timestamp for real-time price
10  POS-REALTIME-PNL   PIC S9(13)V9(2) COMP-3.   *-- Change: Added real-time P&L field
10  POS-CURRENCY       PIC X(03).
10  POS-STATUS         PIC X(01).
```

#### **HISTLD00.cbl**
**Before (2200-LOAD-TO-DB2):**
```cobol
MOVE TH-ACCOUNT-NO    TO PH-ACCOUNT-NO
MOVE TH-PORTFOLIO-ID  TO PH-PORTFOLIO-ID
MOVE TH-TRANS-DATE    TO PH-TRANS-DATE
MOVE TH-TRANS-TIME    TO PH-TRANS-TIME
MOVE TH-TRANS-TYPE    TO PH-TRANS-TYPE
MOVE TH-SECURITY-ID   TO PH-SECURITY-ID
MOVE TH-QUANTITY      TO PH-QUANTITY
MOVE TH-PRICE         TO PH-PRICE
MOVE TH-AMOUNT        TO PH-AMOUNT
MOVE TH-FEES          TO PH-FEES
MOVE TH-TOTAL-AMOUNT  TO PH-TOTAL-AMOUNT
MOVE TH-COST-BASIS    TO PH-COST-BASIS
MOVE TH-GAIN-LOSS     TO PH-GAIN-LOSS
EXEC SQL
    INSERT INTO POSHIST
    VALUES (:POSHIST-RECORD)
END-EXEC
```
**After:**
```cobol
MOVE TH-ACCOUNT-NO    TO PH-ACCOUNT-NO
MOVE TH-PORTFOLIO-ID  TO PH-PORTFOLIO-ID
MOVE TH-TRANS-DATE    TO PH-TRANS-DATE
MOVE TH-TRANS-TIME    TO PH-TRANS-TIME
MOVE TH-TRANS-TYPE    TO PH-TRANS-TYPE
MOVE TH-SECURITY-ID   TO PH-SECURITY-ID
MOVE TH-QUANTITY      TO PH-QUANTITY
MOVE TH-PRICE         TO PH-PRICE
MOVE TH-AMOUNT        TO PH-AMOUNT
MOVE TH-FEES          TO PH-FEES
MOVE TH-TOTAL-AMOUNT  TO PH-TOTAL-AMOUNT
MOVE TH-COST-BASIS    TO PH-COST-BASIS
MOVE TH-GAIN-LOSS     TO PH-GAIN-LOSS
*-- Change: Support for new PRICEHIST KSDS and backtesting
IF TH-REALTIME-PRICE NOT = ZERO
    MOVE TH-REALTIME-PRICE TO PH-REALTIME-PRICE
    MOVE TH-PRICE_TIMESTAMP TO PH-PRICE_TIMESTAMP
    MOVE TH-REALTIME_PNL TO PH-REALTIME_PNL
    *-- Change: Load real-time price, timestamp, and P&L to POSHIST
END-IF
EXEC SQL
    INSERT INTO POSHIST
    VALUES (:POSHIST-RECORD)
END-EXEC
```

#### **AUDITLOG.cpy**
**Before:**
```cobol
05  AUD-TYPE             PIC X(4).
    88  AUD-TRANSACTION     VALUE 'TRAN'.
    88  AUD-USER-ACTION     VALUE 'USER'.
    88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
05  AUD-ACTION           PIC X(8).
05  AUD-STATUS           PIC X(4).
05  AUD-KEY-INFO.
    10  AUD-PORTFOLIO-ID  PIC X(8).
    10  AUD-ACCOUNT-NO    PIC X(10).
05  AUD-BEFORE-IMAGE     PIC X(100).
05  AUD-AFTER-IMAGE      PIC X(100).
05  AUD-MESSAGE          PIC X(100).
```
**After:**
```cobol
05  AUD-TYPE             PIC X(4).
    88  AUD-TRANSACTION     VALUE 'TRAN'.
    88  AUD-USER-ACTION     VALUE 'USER'.
    88  AUD-SYSTEM-EVENT    VALUE 'SYST'.
    88  AUD-ALARM-EVENT     VALUE 'ALRM'.      *-- Change: Added alarm event type
    88  AUD-STALE-PRICE     VALUE 'STAL'.      *-- Change: Added stale price event type
05  AUD-ACTION           PIC X(8).
05  AUD-STATUS           PIC X(4).
05  AUD-KEY-INFO.
    10  AUD-PORTFOLIO-ID  PIC X(8).
    10  AUD-ACCOUNT-NO    PIC X(10).
05  AUD-BEFORE-IMAGE     PIC X(100).
05  AUD-AFTER-IMAGE      PIC X(100).
05  AUD-MESSAGE          PIC X(100).
05  AUD-ALARM-CODE       PIC X(8).            *-- Change: Added alarm code for new events
05  AUD-STALE-PRICE-TS   PIC X(26).           *-- Change: Timestamp for stale price event
```

#### **AUDPROC.cbl**
**Before (LINKAGE SECTION):**
```cobol
01  LS-AUDIT-REQUEST.
    05  LS-SYSTEM-INFO.
        10  LS-SYSTEM-ID    PIC X(8).
        10  LS-USER-ID      PIC X(8).
        10  LS-PROGRAM      PIC X(8).
        10  LS-TERMINAL     PIC X(8).
    05  LS-TYPE            PIC X(4).
    05  LS-ACTION          PIC X(8).
    05  LS-STATUS          PIC X(4).
    05  LS-KEY-INFO.
        10  LS-PORT-ID     PIC X(8).
        10  LS-ACCT-NO     PIC X(10).
    05  LS-BEFORE-IMAGE    PIC X(100).
    05  LS-AFTER-IMAGE     PIC X(100).
    05  LS-MESSAGE         PIC X(100).
    05  LS-RETURN-CODE     PIC S9(4) COMP.
```
**After:**
```cobol
01  LS-AUDIT-REQUEST.
    05  LS-SYSTEM-INFO.
        10  LS-SYSTEM-ID    PIC X(8).
        10  LS-USER-ID      PIC X(8).
        10  LS-PROGRAM      PIC X(8).
        10  LS-TERMINAL     PIC X(8).
    05  LS-TYPE            PIC X(4).
    05  LS-ACTION          PIC X(8).
    05  LS-STATUS          PIC X(4).
    05  LS-KEY-INFO.
        10  LS-PORT-ID     PIC X(8).
        10  LS-ACCT-NO     PIC X(10).
    05  LS-BEFORE-IMAGE    PIC X(100).
    05  LS-AFTER-IMAGE     PIC X(100).
    05  LS-MESSAGE         PIC X(100).
    05  LS-ALARM-CODE      PIC X(8).      *-- Change: Added for UDF-level alarms
    05  LS-STALE-PRICE-TS  PIC X(26).     *-- Change: Added for stale price events
    05  LS-RETURN-CODE     PIC S9(4) COMP.
```

**Before (2000-PROCESS-AUDIT):**
```cobol
2000-PROCESS-AUDIT.
    INITIALIZE AUDIT-RECORD
    MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
    MOVE LS-SYSTEM-INFO     TO AUD-HEADER
    MOVE LS-TYPE            TO AUD-TYPE
    MOVE LS-ACTION          TO AUD-ACTION
    MOVE LS-STATUS          TO AUD-STATUS
    MOVE LS-KEY-INFO        TO AUD-KEY-INFO
    MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
    MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
    MOVE LS-MESSAGE         TO AUD-MESSAGE
    WRITE AUDIT-RECORD
```
**After:**
```cobol
2000-PROCESS-AUDIT.
    INITIALIZE AUDIT-RECORD
    MOVE WS-FORMATTED-TIME  TO AUD-TIMESTAMP
    MOVE LS-SYSTEM-INFO     TO AUD-HEADER
    MOVE LS-TYPE            TO AUD-TYPE
    MOVE LS-ACTION          TO AUD-ACTION
    MOVE LS-STATUS          TO AUD-STATUS
    MOVE LS-KEY-INFO        TO AUD-KEY-INFO
    MOVE LS-BEFORE-IMAGE    TO AUD-BEFORE-IMAGE
    MOVE LS-AFTER-IMAGE     TO AUD-AFTER-IMAGE
    MOVE LS-MESSAGE         TO AUD-MESSAGE
    *-- Change: Support for new UDF-level alarms and stale feed events
    IF LS-TYPE = 'ALRM'
        MOVE LS-ALARM-CODE TO AUD-ALARM-CODE
    END-IF
    IF LS-TYPE = 'STAL'
        MOVE LS-STALE-PRICE-TS TO AUD-STALE-PRICE-TS
    END-IF
    WRITE AUDIT-RECORD
```

## 4. Conclusion  
The implemented changes enable real-time and historical analytics by integrating real-time price feeds and dynamic P&L calculations into position reporting and history loading. Enhanced audit logging now captures alarm and stale price events, improving compliance and operational monitoring. These enhancements position the system for greater accuracy, transparency, and auditability, supporting both business and regulatory requirements.
```

# Technical Document and Low-Level Design (LLD)

## 1. Introduction  
This document details the technical changes and low-level design (LLD) for the integration of a new `TRANSACTION-TYPE` field in the COBOL application modules responsible for transaction processing and reporting. The purpose of this document is to explain the modifications, logic, and rationale behind the changes to ensure clarity, maintainability, and backward compatibility across all impacted programs.

## 2. Existing Logic and Flow  
### 2.1 Overview  
The COBOL application processes financial transactions by reading records from a transaction file, validating and processing each transaction, updating positions, and generating reports. The application is comprised of multiple modules, including transaction processing (`PORTTRAN.cbl`) and reporting (`RPTPOS00.cbl`), both of which use a shared copybook (`TRNREC.cpy`) to define the transaction record layout.

### 2.2 Detailed Logic  

**Prior to the Change:**  
- The transaction record did not include a `TRANSACTION-TYPE` field.
- Processing and reporting logic did not differentiate transactions based on a specific transaction type beyond basic fields.

**After the Change:**  
- A new `TRANSACTION-TYPE` field (PIC X(10)) is introduced in the copybook and made available to all programs.
- Processing logic in `PORTTRAN.cbl` now validates and acts upon the `TRANSACTION-TYPE`.
- Reporting logic in `RPTPOS00.cbl` reads and displays the new field, ensuring backward compatibility by defaulting to `'UNKNOWN'` if the field is missing.

#### Flowchart:  
```
flowchart TD
    Start([Start])
    OpenFile([Open TRANSACTION-FILE])
    ReadRecord([Read Transaction Record])
    CheckEOF{EOF?}
    Validate([Validate Transaction])
    ProcessType([Process TRANSACTION-TYPE])
    UpdatePositions([Update Positions])
    WriteReport([Write Transaction Detail])
    CloseFile([Close TRANSACTION-FILE])
    End([End])

    Start --> OpenFile
    OpenFile --> ReadRecord
    ReadRecord --> CheckEOF
    CheckEOF -- No --> Validate
    Validate --> ProcessType
    ProcessType --> UpdatePositions
    UpdatePositions --> WriteReport
    WriteReport --> ReadRecord
    CheckEOF -- Yes --> CloseFile
    CloseFile --> End
```

## 3. Impacted Changes  
### 3.1 User Story or Analysis Report Summary  
As part of the impact analysis, a new `TRANSACTION-TYPE` field is required to support enhanced transaction categorization for both batch processing and reporting. The field must be backward compatible, defaulting to `'UNKNOWN'` if not present in legacy data.

### 3.2 Impacted Code Changes Summary:

#### 3.2.1 Impacted Sections and Files:  
- **TRNREC.cpy** (`/copybooks/TRNREC.cpy`)
- **PORTTRAN.cbl** (`/programs/PORTTRAN.cbl`)
- **RPTPOS00.cbl** (`/programs/RPTPOS00.cbl`)

  - **Purpose of Changes:**  
    - To introduce a new transaction categorization field (`TRANSACTION-TYPE`) for improved processing and reporting.
    - To ensure all modules using the transaction record can access and utilize this new field.
    - To maintain backward compatibility with legacy data.

  - **Impact:**  
    - All programs using the copybook now have access to the `TRANSACTION-TYPE` field.
    - Processing logic can branch based on transaction type, enabling new business rules.
    - Reports now display the transaction type, improving transparency.
    - Legacy records without the new field are handled gracefully.

### 3.3 Insertion Points  
- **TRNREC.cpy:**  
  - New field `TRANSACTION-TYPE` added at the end of the `TRANSACTION-RECORD` structure.
  - Inline comments document the addition and backward compatibility.

- **PORTTRAN.cbl:**  
  - **WORKING-STORAGE SECTION:**  
    - Added `WS-TRANSACTION-TYPE` for intermediate processing.
  - **2100-VALIDATE-TRANSACTION:**  
    - Logic to set `TRANSACTION-TYPE` to `'UNKNOWN'` if missing.
    - Move value to `WS-TRANSACTION-TYPE`.
  - **2120-CHECK-TRANSACTION-TYPE:**  
    - EVALUATE statement added to branch logic based on `TRANSACTION-TYPE`.
    - Handles 'BUY', 'SELL', 'TRANSFER', 'FEE', and unknown types.

- **RPTPOS00.cbl:**  
  - **WORKING-STORAGE SECTION:**  
    - Added `WS-TRANSACTION-TYPE`.
  - **2100-TRANSACTION-ACTIVITY:**  
    - Logic to set `WS-TRANSACTION-TYPE` to `'UNKNOWN'` if missing.
  - **2200-WRITE-TRANSACTION-DETAIL:**  
    - Displays the new field in transaction reports.

### 3.4 Structured Diffs  

#### **TRNREC.cpy**  
**Before:**  
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-ID                PIC 9(8).
           05  TRN-DATE              PIC 9(8).
           05  TRN-AMOUNT            PIC S9(9)V99 COMP-3.
           05  TRN-TYPE              PIC X(02).
           05  TRN-STATUS            PIC X(01).
           05  TRN-ACCOUNT-NUMBER    PIC X(12).
           05  TRN-REFERENCE         PIC X(16).
           05  TRN-DESCRIPTION       PIC X(30).
           05  TRN-USER              PIC X(08).
           05  TRN-TIMESTAMP         PIC 9(14).
```
**After:**  
```cobol
       01  TRANSACTION-RECORD.
           05  TRN-ID                PIC 9(8).
           05  TRN-DATE              PIC 9(8).
           05  TRN-AMOUNT            PIC S9(9)V99 COMP-3.
           05  TRN-TYPE              PIC X(02).
           05  TRN-STATUS            PIC X(01).
           05  TRN-ACCOUNT-NUMBER    PIC X(12).
           05  TRN-REFERENCE         PIC X(16).
           05  TRN-DESCRIPTION       PIC X(30).
           05  TRN-USER              PIC X(08).
           05  TRN-TIMESTAMP         PIC 9(14).
           *-------------------------------------------------------------*
           * Added new field for transaction type as per Impact Analysis *
           * TRANSACTION-TYPE is used by batch and reporting programs    *
           * Backward compatibility: If missing, treat as SPACES        *
           *-------------------------------------------------------------*
           05  TRANSACTION-TYPE       PIC X(10).
           *-------------------------------------------------------------*
```

#### **PORTTRAN.cbl**  
**Before (WORKING-STORAGE SECTION):**  
```cobol
       77  WS-EOF                PIC X VALUE 'N'.
       77  WS-TRAN-COUNT         PIC 9(6) VALUE ZERO.
       77  WS-ERROR-CODE         PIC 9(4) VALUE ZERO.
```
**After:**  
```cobol
       77  WS-EOF                PIC X VALUE 'N'.
       77  WS-TRAN-COUNT         PIC 9(6) VALUE ZERO.
       77  WS-ERROR-CODE         PIC 9(4) VALUE ZERO.
       *-------------------------------------------------------------*
       * Working storage for new TRANSACTION-TYPE field              *
       *-------------------------------------------------------------*
       77  WS-TRANSACTION-TYPE   PIC X(10) VALUE SPACES.
       *-------------------------------------------------------------*
```

**Before (2100-VALIDATE-TRANSACTION):**  
```cobol
       2100-VALIDATE-TRANSACTION.
           * Existing validation logic *
```
**After:**  
```cobol
       2100-VALIDATE-TRANSACTION.
           *-------------------------------------------------------------*
           * Validate transaction fields, including new TRANSACTION-TYPE *
           *-------------------------------------------------------------*
           IF TRANSACTION-TYPE = SPACES
               * Backward compatibility: If missing, set default value
               MOVE 'UNKNOWN' TO TRANSACTION-TYPE
           END-IF
           MOVE TRANSACTION-TYPE TO WS-TRANSACTION-TYPE
           PERFORM 2120-CHECK-TRANSACTION-TYPE.
```

**Before (No EVALUATE for TRANSACTION-TYPE):**  
_No logic for transaction type processing._

**After (2120-CHECK-TRANSACTION-TYPE):**  
```cobol
       2120-CHECK-TRANSACTION-TYPE.
           *-------------------------------------------------------------*
           * Process logic based on TRANSACTION-TYPE                     *
           *-------------------------------------------------------------*
           EVALUATE WS-TRANSACTION-TYPE
               WHEN 'BUY'
                   PERFORM 2210-PROCESS-BUY
               WHEN 'SELL'
                   PERFORM 2220-PROCESS-SELL
               WHEN 'TRANSFER'
                   PERFORM 2230-PROCESS-TRANSFER
               WHEN 'FEE'
                   PERFORM 2240-PROCESS-FEE
               WHEN OTHER
                   * Unknown or legacy type, handle gracefully
                   CONTINUE
           END-EVALUATE.
```

#### **RPTPOS00.cbl**  
**Before (WORKING-STORAGE SECTION):**  
```cobol
       77  WS-EOF                PIC X VALUE 'N'.
       77  WS-TRAN-COUNT         PIC 9(6) VALUE ZERO.
```
**After:**  
```cobol
       77  WS-EOF                PIC X VALUE 'N'.
       77  WS-TRAN-COUNT         PIC 9(6) VALUE ZERO.
       *-------------------------------------------------------------*
       * Working storage for new TRANSACTION-TYPE field              *
       *-------------------------------------------------------------*
       77  WS-TRANSACTION-TYPE   PIC X(10) VALUE SPACES.
       *-------------------------------------------------------------*
```

**Before (2100-TRANSACTION-ACTIVITY):**  
```cobol
       2100-TRANSACTION-ACTIVITY.
           * Existing transaction activity logic *
```
**After:**  
```cobol
       2100-TRANSACTION-ACTIVITY.
           *-------------------------------------------------------------*
           * Read and display TRANSACTION-TYPE, handle missing values    *
           *-------------------------------------------------------------*
           IF TRANSACTION-TYPE = SPACES
               MOVE 'UNKNOWN' TO WS-TRANSACTION-TYPE
           ELSE
               MOVE TRANSACTION-TYPE TO WS-TRANSACTION-TYPE
           END-IF
           PERFORM 2200-WRITE-TRANSACTION-DETAIL.
```

**Before (2200-WRITE-TRANSACTION-DETAIL):**  
```cobol
       2200-WRITE-TRANSACTION-DETAIL.
           DISPLAY 'TRN-ID: ' TRN-ID
           DISPLAY 'DATE: ' TRN-DATE
           DISPLAY 'AMOUNT: ' TRN-AMOUNT
           DISPLAY 'TYPE: ' TRN-TYPE
           DISPLAY 'STATUS: ' TRN-STATUS
           DISPLAY 'ACCOUNT: ' TRN-ACCOUNT-NUMBER
           DISPLAY 'REFERENCE: ' TRN-REFERENCE
           DISPLAY 'DESCRIPTION: ' TRN-DESCRIPTION
           DISPLAY 'USER: ' TRN-USER
           DISPLAY 'TIMESTAMP: ' TRN-TIMESTAMP
           DISPLAY '-----------------------------'.
```
**After:**  
```cobol
       2200-WRITE-TRANSACTION-DETAIL.
           *-------------------------------------------------------------*
           * Write transaction details, including new TRANSACTION-TYPE   *
           *-------------------------------------------------------------*
           DISPLAY 'TRN-ID: ' TRN-ID
           DISPLAY 'DATE: ' TRN-DATE
           DISPLAY 'AMOUNT: ' TRN-AMOUNT
           DISPLAY 'TYPE: ' TRN-TYPE
           DISPLAY 'STATUS: ' TRN-STATUS
           DISPLAY 'ACCOUNT: ' TRN-ACCOUNT-NUMBER
           DISPLAY 'REFERENCE: ' TRN-REFERENCE
           DISPLAY 'DESCRIPTION: ' TRN-DESCRIPTION
           DISPLAY 'USER: ' TRN-USER
           DISPLAY 'TIMESTAMP: ' TRN-TIMESTAMP
           DISPLAY 'TRANSACTION-TYPE: ' WS-TRANSACTION-TYPE
           DISPLAY '-----------------------------'.
```

## 4. Conclusion  
The introduction of the `TRANSACTION-TYPE` field enhances the application's ability to categorize and process transactions according to business needs. All impacted modules now support this field, with robust handling for legacy data to ensure backward compatibility. The changes are well-documented, modular, and pave the way for future enhancements in transaction processing and reporting.

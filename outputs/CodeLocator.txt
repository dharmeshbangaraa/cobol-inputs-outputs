Title: Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting

User Story:
As a COBOL developer,
I want to add a `CHANNEL-CODE` field to the transaction file,
so that the source of each transaction (e.g., ATM, Mobile, Branch) can be captured and processed,
allowing for improved analytics, auditing, and fraud detection based on transaction channels through batch processing and reporting.

Acceptance Criteria:
1. Definition
   A new field `CHANNEL-CODE` (`PIC X(04)`) is defined in the relevant copybooks (e.g., `TRANSACTION.CPY`).

2. File Layout
   Transaction input and output files are updated to include the `CHANNEL-CODE` field and corresponding layout adjustments.

3. Program Updates
   All programs (batch, online, utility) that read or write transaction data are updated to handle the new field appropriately.

4. Test Data
   Sample input files and test data include valid `CHANNEL-CODE` values (e.g., `BRCH`, `ATM`, `MOBL`, `NETB`).

5. LRECL & FD Adjustments
   The LRECL (Logical Record Length) and FD (File Description) entries in COBOL programs and JCL are adjusted to reflect the new field.

6. Documentation
   The data dictionary and all relevant documentation are updated to reflect the structure and purpose of `CHANNEL-CODE`.

7. Reporting
   Any reports or logs that output transaction details include the `CHANNEL-CODE` field where applicable.

Validation Notes:
- Structure: The story clearly outlines the requirement, acceptance criteria, and justification.
- Completeness: Covers definition, implementation, testing, documentation, and reporting.
- Spelling & Grammar: Minor refinements made for clarity and consistency.

Next Steps:
1. Repo Scan:
   Check `TRANSACTION.CPY` (or equivalent) for the presence of `CHANNEL-CODE`.
   If not present, add the field:
     05 CHANNEL-CODE PIC X(04). *> BRCH, ATM, MOBL, NETB

2. Code Changes:
   - Update relevant copybooks
   - Modify file layouts
   - Adjust LRECL and FD definitions

3. Testing:
   - Update input files
   - Include diverse test values for `CHANNEL-CODE`

4. Documentation:
   - Update README
   - Refresh the data dictionary
   - Comment changes in COBOL programs

5. Reporting:
   - Ensure reports/logs show `CHANNEL-CODE` wherever transaction details are printed

----------

**Summary**:
User Story: Add `CHANNEL-CODE` Field to Transaction File for Channel Identification in Batch Processing and Reporting  
- 5 impacted components identified (**High impact only**)  
- High complexity change affecting transaction data structure, file layouts, batch processing, reporting, and copybooks. All programs and copybooks that define, read, write, or report on transaction data must be updated to support the new field.

---

**Ranked Impact List**:

| Program File Path                          | Impact | Nature  | Affected Paragraphs/Sections              | Dependency Path                                             |
|--------------------------------------------|--------|---------|-------------------------------------------|-------------------------------------------------------------|
| src/copybook/common/TRNREC.cpy             | High   | Direct  | CHANNEL-CODE definition                   | Used by all transaction-processing programs                 |
| src/programs/batch/RPTPOS00.cbl            | High   | Direct  | 1100-OPEN-FILES, 2200-PROCESS-TRANSACTIONS| Reads/writes transaction file, uses TRNREC.cpy              |
| src/programs/utility/UTLVAL00.cbl          | High   | Direct  | 1100-OPEN-FILES, 2420-CHECK-TRANSACTION-FORMAT | Reads/writes transaction file, uses TRNREC.cpy         |
| src/programs/test/TSTGEN00.cbl             | High   | Direct  | 2300-GEN-TRANSACTION, 2320-WRITE-TRAN-RECORD | Generates test transaction files, uses TRNREC.cpy      |
| src/programs/test/TSTVAL00.cbl             | High   | Direct  | 2100-EXECUTE-TEST, 2600-VALIDATE-RESULTS  | Validates transaction test data, uses TRNREC.cpy            |

---

**JSON Metadata**:
```json
{
  "impactAnalysis": {
    "userStory": "Add CHANNEL-CODE Field to Transaction File for Channel Identification in Batch Processing and Reporting",
    "impactedComponents": [
      {
        "programFilePath": "src/copybook/common/TRNREC.cpy",
        "impactScore": 1.0,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["CHANNEL-CODE definition"],
        "dependencyPath": ["TRNREC.cpy"],
        "rationale": "Core copybook for transaction record structure; all transaction file layouts and programs depend on this definition."
      },
      {
        "programFilePath": "src/programs/batch/RPTPOS00.cbl",
        "impactScore": 0.98,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["1100-OPEN-FILES", "2200-PROCESS-TRANSACTIONS"],
        "dependencyPath": ["RPTPOS00.cbl", "TRNREC.cpy"],
        "rationale": "Batch report program that reads transaction files and outputs transaction details; must process and display CHANNEL-CODE."
      },
      {
        "programFilePath": "src/programs/utility/UTLVAL00.cbl",
        "impactScore": 0.97,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["1100-OPEN-FILES", "2420-CHECK-TRANSACTION-FORMAT"],
        "dependencyPath": ["UTLVAL00.cbl", "TRNREC.cpy"],
        "rationale": "Utility validation program that reads/writes transaction data; must validate and process the new CHANNEL-CODE field."
      },
      {
        "programFilePath": "src/programs/test/TSTGEN00.cbl",
        "impactScore": 0.96,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["2300-GEN-TRANSACTION", "2320-WRITE-TRAN-RECORD"],
        "dependencyPath": ["TSTGEN00.cbl", "TRNREC.cpy"],
        "rationale": "Test data generator for transactions; must generate and write CHANNEL-CODE in test files."
      },
      {
        "programFilePath": "src/programs/test/TSTVAL00.cbl",
        "impactScore": 0.95,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["2100-EXECUTE-TEST", "2600-VALIDATE-RESULTS"],
        "dependencyPath": ["TSTVAL00.cbl", "TRNREC.cpy"],
        "rationale": "Test validation program for transactions; must validate presence and correctness of CHANNEL-CODE in test data."
      }
    ]
  }
}
```

---

**Visualization**:

```mermaid
graph TD
    subgraph Copybook
        TRNREC["src/copybook/common/TRNREC.cpy"]
    end
    subgraph Batch
        RPTPOS00["src/programs/batch/RPTPOS00.cbl"]
    end
    subgraph Utility
        UTLVAL00["src/programs/utility/UTLVAL00.cbl"]
    end
    subgraph Test
        TSTGEN00["src/programs/test/TSTGEN00.cbl"]
        TSTVAL00["src/programs/test/TSTVAL00.cbl"]
    end

    style TRNREC fill:#ffcccc,stroke:#b22222,stroke-width:2px
    style RPTPOS00 fill:#ffcccc,stroke:#b22222,stroke-width:2px
    style UTLVAL00 fill:#ffcccc,stroke:#b22222,stroke-width:2px
    style TSTGEN00 fill:#ffcccc,stroke:#b22222,stroke-width:2px
    style TSTVAL00 fill:#ffcccc,stroke:#b22222,stroke-width:2px

    TRNREC --> RPTPOS00
    TRNREC --> UTLVAL00
    TRNREC --> TSTGEN00
    TRNREC --> TSTVAL00
```

---

**Reasoning**:
- `src/copybook/common/TRNREC.cpy` is the central copybook for transaction records; all changes to transaction structure must occur here.
- `src/programs/batch/RPTPOS00.cbl` is a batch reporting program that processes transaction files and must be updated to read/write the new field.
- `src/programs/utility/UTLVAL00.cbl` is a utility program that validates transaction data and must handle the new field in both logic and file layout.
- `src/programs/test/TSTGEN00.cbl` generates transaction test data and must include the new field in generated records.
- `src/programs/test/TSTVAL00.cbl` validates test data and must check for the presence and correctness of the new field.
- All these programs directly depend on the transaction record structure and are thus **high impact** for this user story.

**Note:** Only high-impact components are included. JCL files and other programs are not listed unless they directly process transaction files or layouts as per the dependency map and user story scope. No extra files are added; only those present in the repository and directly impacted are included.

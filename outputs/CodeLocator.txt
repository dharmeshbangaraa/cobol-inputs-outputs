User Story: Add Transaction Type Field to Batch Processing and Reporting
Title:
Add Transaction Type field to transaction processing and reporting in COBOL portfolio system

As a
Portfolio operations analyst

I want to
record and display the type of each transaction (e.g., BUY, SELL, DIVIDEND) in both processing and reporting programs

So that
I can track, analyze, and report on different types of portfolio transactions for compliance and business insights

Acceptance Criteria
Data Structure Update

Add a new field, TRANSACTION-TYPE (PIC X(10)), to the transaction record layout in the relevant copybook used by both the batch processing and reporting programs.

Batch Processing Program Update

Update the transaction processing COBOL program (e.g., TRNVAL00.cbl or similar) to:

Accept, store, and process the new transaction type field when reading or writing transaction records.

Reporting Program Update

Update the transaction report COBOL program (e.g., RPTPOS00.cbl or similar) to:

Read and display the transaction type in the generated summary report.

Backward Compatibility

If the transaction type is missing for older records, the programs should handle it gracefully (e.g., display as blank or "UNKNOWN" in reports).

----------

## Summary

**User Story:** Add Transaction Type Field to Batch Processing and Reporting  
**Description:**  
As a Portfolio operations analyst, I want to record and display the type of each transaction (e.g., BUY, SELL, DIVIDEND) in both processing and reporting programs so that I can track, analyze, and report on different types of portfolio transactions for compliance and business insights.

- **Total impacted components:** 3 (1 copybook, 2 programs)
- **High-level assessment:**  
  This is a medium-complexity change. It requires a data structure update in a shared copybook and coordinated changes in both batch transaction processing and reporting programs. The impact is direct and critical, as both business logic and reporting depend on the transaction type. Indirect impacts may occur in any downstream consumers of the transaction record, but only directly related programs are included here.

---

## Ranked Impact List

| Program/Copybook      | Impact   | Nature   | Affected Paragraphs/Sections           | Dependency Path                    |
|-----------------------|----------|----------|----------------------------------------|------------------------------------|
| TRNREC.cpy            | High     | Direct   | TRANSACTION-RECORD, TRN-TYPE           | [TRNREC.cpy]                       |
| PORTTRAN.cbl          | High     | Direct   | 2100-VALIDATE-TRANSACTION, 2120-CHECK-TRANSACTION-TYPE, 2200-UPDATE-POSITIONS, 2210-PROCESS-BUY, 2220-PROCESS-SELL, 2230-PROCESS-TRANSFER, 2240-PROCESS-FEE, 2300-UPDATE-AUDIT-TRAIL | [PORTTRAN.cbl → TRNREC.cpy]        |
| RPTPOS00.cbl          | High     | Direct   | 2000-PROCESS-REPORT, 2100-TRANSACTION-DETAIL, 2200-WRITE-TRANSACTION-DETAIL | [RPTPOS00.cbl → TRNREC.cpy]        |

---

## JSON Metadata

```json
{
  "impactAnalysis": {
    "userStory": "Add Transaction Type Field to Batch Processing and Reporting",
    "impactedComponents": [
      {
        "programName": "TRNREC.cpy",
        "impactScore": 1.0,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": ["TRANSACTION-RECORD", "TRN-TYPE"],
        "dependencyPath": ["TRNREC.cpy"],
        "rationale": "The transaction record copybook is the canonical definition of transaction data. Adding TRANSACTION-TYPE here is required for both processing and reporting."
      },
      {
        "programName": "PORTTRAN.cbl",
        "impactScore": 0.98,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": [
          "2100-VALIDATE-TRANSACTION",
          "2120-CHECK-TRANSACTION-TYPE",
          "2200-UPDATE-POSITIONS",
          "2210-PROCESS-BUY",
          "2220-PROCESS-SELL",
          "2230-PROCESS-TRANSFER",
          "2240-PROCESS-FEE",
          "2300-UPDATE-AUDIT-TRAIL"
        ],
        "dependencyPath": ["PORTTRAN.cbl", "TRNREC.cpy"],
        "rationale": "This is the main batch transaction processing program. It reads and writes transaction records, validates TRN-TYPE, and routes business logic based on transaction type."
      },
      {
        "programName": "RPTPOS00.cbl",
        "impactScore": 0.95,
        "impactLevel": "High",
        "impactType": "Direct",
        "affectedParagraphs": [
          "2000-PROCESS-REPORT",
          "2100-TRANSACTION-DETAIL",
          "2200-WRITE-TRANSACTION-DETAIL"
        ],
        "dependencyPath": ["RPTPOS00.cbl", "TRNREC.cpy"],
        "rationale": "This reporting program reads transaction records and generates reports. It must be updated to display the new TRANSACTION-TYPE field and handle missing values gracefully."
      }
    ]
  }
}
```

---

## Visualization

```mermaid
graph TD
    TRNREC[TRNREC.cpy<br/>(Transaction Record Copybook)]:::high
    PORTTRAN[PORTTRAN.cbl<br/>(Batch Processing)]:::high
    RPTPOS00[RPTPOS00.cbl<br/>(Reporting)]:::high

    PORTTRAN --> TRNREC
    RPTPOS00 --> TRNREC

    classDef high fill:#ffcccc,stroke:#b22222,stroke-width:2px;
```

---

**Reasoning:**  
- `TRNREC.cpy` is the shared copybook that defines the transaction record structure. All changes to the transaction record must be made here.
- `PORTTRAN.cbl` is the batch processing program that reads, validates, and processes transactions. It uses `TRNREC.cpy` and contains logic that depends on transaction type.
- `RPTPOS00.cbl` is the reporting program that generates transaction reports. It also uses `TRNREC.cpy` and must be updated to display the new field and handle missing values.
- No other programs or copybooks are directly or indirectly impacted based on the repository structure and dependency map.

**Note:** If additional programs or utilities consume the transaction record copybook or process transaction data, they should be reviewed for impact, but only the above components are directly and logically connected to the user story as described.

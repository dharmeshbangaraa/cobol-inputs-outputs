
File 1 src/programs/batch/RPTPOS00.cbl src/programs/batch/RPTPOS00.cbl

       IDENTIFICATION DIVISION.
       PROGRAM-ID. RPTPOS00.
       AUTHOR. CLAUDE.
       DATE-WRITTEN. 2024-04-09.
      *****************************************************************
      * Daily Position Report Generator                                 *
      *                                                               *
      * This program generates the daily position report including:    *
      * - Portfolio position summary                                   *
      * - Transaction activity                                         *
      * - Exception reporting                                          *
      * - Performance metrics                                          *
      *****************************************************************
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT POSITION-MASTER ASSIGN TO POSMSTRE
               ORGANIZATION IS INDEXED
               ACCESS MODE IS SEQUENTIAL
               RECORD KEY IS POS-KEY
               FILE STATUS IS WS-POSITION-STATUS.

           SELECT TRANSACTION-HISTORY ASSIGN TO TRANHIST
               ORGANIZATION IS INDEXED
               ACCESS MODE IS SEQUENTIAL
               RECORD KEY IS TRAN-KEY
               FILE STATUS IS WS-TRAN-STATUS.

           SELECT REPORT-FILE ASSIGN TO RPTFILE
               ORGANIZATION IS SEQUENTIAL
               FILE STATUS IS WS-REPORT-STATUS.

       DATA DIVISION.
       FILE SECTION.
           COPY POSREC.
           COPY TRNREC.
           
       FD  REPORT-FILE
           RECORDING MODE IS F
           BLOCK CONTAINS 0 RECORDS.
       01  REPORT-RECORD             PIC X(132).

       WORKING-STORAGE SECTION.
           COPY RTNCODE.
           COPY ERRHAND.

       01  WS-FILE-STATUS.
           05  WS-POSITION-STATUS    PIC XX.
           05  WS-TRAN-STATUS        PIC XX.
           05  WS-REPORT-STATUS      PIC XX.

       01  WS-REPORT-HEADERS.
           05  WS-HEADER1.
               10  FILLER            PIC X(132) VALUE ALL '*'.
           05  WS-HEADER2.
               10  FILLER            PIC X(40) VALUE SPACES.
               10  FILLER            PIC X(52) 
                   VALUE 'DAILY POSITION REPORT'.
               10  FILLER            PIC X(40) VALUE SPACES.
           05  WS-HEADER3.
               10  FILLER            PIC X(15) VALUE 'REPORT DATE:'.
               10  WS-REPORT-DATE    PIC X(10).
               10  FILLER            PIC X(107) VALUE SPACES.

       01  WS-POSITION-DETAIL.
           05  WS-POS-PORTFOLIO     PIC X(10).
           05  FILLER               PIC X(2) VALUE SPACES.
           05  WS-POS-DESCRIPTION   PIC X(30).
           05  FILLER               PIC X(2) VALUE SPACES.
           05  WS-POS-QUANTITY      PIC ZZZ,ZZZ,ZZ9.99.
           05  FILLER               PIC X(2) VALUE SPACES.
           05  WS-POS-VALUE         PIC $$$$,$$$,$$9.99.
           05  FILLER               PIC X(2) VALUE SPACES.
           05  WS-POS-CHANGE-PCT    PIC +ZZ9.99.
           05  FILLER               PIC X(40) VALUE SPACES.

       PROCEDURE DIVISION.
       0000-MAIN.
           PERFORM 1000-INITIALIZE
           PERFORM 2000-PROCESS-REPORT
           PERFORM 3000-CLEANUP
           GOBACK.

       1000-INITIALIZE.
           PERFORM 1100-OPEN-FILES
           PERFORM 1200-WRITE-HEADERS.

       1100-OPEN-FILES.
           OPEN INPUT POSITION-MASTER
           IF WS-POSITION-STATUS NOT = '00'
               MOVE 'ERROR OPENING POSITION MASTER'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN INPUT TRANSACTION-HISTORY
           IF WS-TRAN-STATUS NOT = '00'
               MOVE 'ERROR OPENING TRANSACTION HISTORY'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF

           OPEN OUTPUT REPORT-FILE
           IF WS-REPORT-STATUS NOT = '00'
               MOVE 'ERROR OPENING REPORT FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       1200-WRITE-HEADERS.
           ACCEPT WS-REPORT-DATE FROM DATE
           WRITE REPORT-RECORD FROM WS-HEADER1
           WRITE REPORT-RECORD FROM WS-HEADER2
           WRITE REPORT-RECORD FROM WS-HEADER3.

       2000-PROCESS-REPORT.
           PERFORM 2100-READ-POSITIONS
           PERFORM 2200-PROCESS-TRANSACTIONS
           PERFORM 2300-WRITE-SUMMARY.

       2100-READ-POSITIONS.
           READ POSITION-MASTER
               AT END SET END-OF-POSITIONS TO TRUE
           END-READ
           
           PERFORM UNTIL END-OF-POSITIONS
               PERFORM 2110-FORMAT-POSITION
               READ POSITION-MASTER
                   AT END SET END-OF-POSITIONS TO TRUE
               END-READ
           END-PERFORM.

       2110-FORMAT-POSITION.
           MOVE POS-PORTFOLIO-ID   TO WS-POS-PORTFOLIO
           MOVE POS-DESCRIPTION    TO WS-POS-DESCRIPTION
           MOVE POS-QUANTITY       TO WS-POS-QUANTITY
           MOVE POS-CURRENT-VALUE  TO WS-POS-VALUE ROUNDED
               *-- Change: Added ROUNDED for consistent P&L rounding (User Story: P&L rounding fix)
           COMPUTE WS-POS-CHANGE-PCT ROUNDED = 
               (POS-CURRENT-VALUE - POS-PREVIOUS-VALUE) /
                POS-PREVIOUS-VALUE * 100
               *-- Change: Added ROUNDED for consistent P&L rounding (User Story: P&L rounding fix)
           WRITE REPORT-RECORD FROM WS-POSITION-DETAIL.

       2200-PROCESS-TRANSACTIONS.
           PERFORM 2210-READ-TRANSACTIONS
           PERFORM 2220-SUMMARIZE-ACTIVITY.

       2300-WRITE-SUMMARY.
           PERFORM 2310-WRITE-TOTALS
           PERFORM 2320-WRITE-EXCEPTIONS
           PERFORM 2330-WRITE-METRICS.

       3000-CLEANUP.
           CLOSE POSITION-MASTER
                TRANSACTION-HISTORY
                REPORT-FILE.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           MOVE 12 TO RETURN-CODE
           GOBACK.

[Summary Change Report]
- In paragraph 2110-FORMAT-POSITION, added the ROUNDED keyword to the MOVE and COMPUTE statements that assign P&L values to output fields.
- Added inline comments for traceability per change.
- No changes were needed in 2300-WRITE-SUMMARY as there were no direct P&L value assignments.
- COBOL formatting and indentation preserved.

File 2 src/programs/batch/HISTLD00.cbl src/programs/batch/HISTLD00.cbl

       IDENTIFICATION DIVISION.
       PROGRAM-ID. HISTLD00.
       AUTHOR. CLAUDE.
       DATE-WRITTEN. 2024-04-09.
      *****************************************************************
      * Historical Loader for P&L Data                                 *
      *                                                               *
      * Loads daily P&L data into DB2 tables.                         *
      *****************************************************************
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT PNL-INPUT ASSIGN TO PNLINP
               ORGANIZATION IS SEQUENTIAL
               FILE STATUS IS WS-PNL-STATUS.

       DATA DIVISION.
       FILE SECTION.
           COPY PNLINPREC.

       WORKING-STORAGE SECTION.
           COPY RTNCODE.
           COPY ERRHAND.

       01  WS-FILE-STATUS.
           05  WS-PNL-STATUS        PIC XX.

       01  WS-PNL-DETAIL.
           05  WS-PNL-PORTFOLIO    PIC X(10).
           05  WS-PNL-DATE         PIC X(8).
           05  WS-PNL-VALUE        PIC S9(13)V99 COMP-3.

       EXEC SQL
           INCLUDE SQLCA
       END-EXEC.

       01  DB-PNL-ROW.
           05  DB-PORTFOLIO-ID     PIC X(10).
           05  DB-DATE             PIC X(8).
           05  DB-PNL-VALUE        PIC S9(13)V99 COMP-3.

       PROCEDURE DIVISION.
       0000-MAIN.
           PERFORM 1000-INITIALIZE
           PERFORM 2000-PROCESS-PNL
           PERFORM 3000-CLEANUP
           GOBACK.

       1000-INITIALIZE.
           PERFORM 1100-OPEN-FILES.

       1100-OPEN-FILES.
           OPEN INPUT PNL-INPUT
           IF WS-PNL-STATUS NOT = '00'
               MOVE 'ERROR OPENING PNL INPUT'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-PROCESS-PNL.
           PERFORM UNTIL END-OF-PNL
               PERFORM DB2-INSERT
               READ PNL-INPUT
                   AT END SET END-OF-PNL TO TRUE
               END-READ
           END-PERFORM
           PERFORM 2300-CHECK-COMMIT.

       DB2-INSERT.
           MOVE WS-PNL-PORTFOLIO   TO DB-PORTFOLIO-ID
           MOVE WS-PNL-DATE        TO DB-DATE
           MOVE WS-PNL-VALUE       TO DB-PNL-VALUE ROUNDED
               *-- Change: Added ROUNDED for consistent P&L rounding (User Story: P&L rounding fix)
           EXEC SQL
               INSERT INTO HIST_PNL
                   (PORTFOLIO_ID, PNL_DATE, PNL_VALUE)
               VALUES
                   (:DB-PORTFOLIO-ID, :DB-DATE, :DB-PNL-VALUE)
           END-EXEC.

       2300-CHECK-COMMIT.
           EXEC SQL
               COMMIT
           END-EXEC.

       3000-CLEANUP.
           CLOSE PNL-INPUT.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           MOVE 12 TO RETURN-CODE
           GOBACK.

[Summary Change Report]
- In paragraph DB2-INSERT, added the ROUNDED keyword to the MOVE statement that assigns P&L values to the database field.
- Added inline comment for traceability.
- No changes were needed in 2300-CHECK-COMMIT as there were no P&L assignments.
- COBOL formatting and indentation preserved.

File 3 src/programs/batch/BCHCTL00.cbl src/programs/batch/BCHCTL00.cbl

       IDENTIFICATION DIVISION.
       PROGRAM-ID. BCHCTL00.
       AUTHOR. CLAUDE.
       DATE-WRITTEN. 2024-04-09.
      *****************************************************************
      * Batch Control Program for P&L Batch Jobs                       *
      *                                                               *
      * Orchestrates P&L batch calculations and reporting.             *
      *****************************************************************
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CONTROL-FILE ASSIGN TO CTLFILE
               ORGANIZATION IS SEQUENTIAL
               FILE STATUS IS WS-CTL-STATUS.

       DATA DIVISION.
       FILE SECTION.
           COPY CTLREC.

       WORKING-STORAGE SECTION.
           COPY RTNCODE.
           COPY ERRHAND.

       01  WS-FILE-STATUS.
           05  WS-CTL-STATUS        PIC XX.

       01  WS-BATCH-STATUS.
           05  WS-PREREQ-OK         PIC X VALUE 'N'.
           05  WS-JOB-STATUS        PIC X VALUE 'N'.

       PROCEDURE DIVISION.
       0000-MAIN.
           PERFORM 1000-INITIALIZE
           PERFORM 2000-CHECK-PREREQUISITES
           PERFORM 3000-UPDATE-STATUS
           GOBACK.

       1000-INITIALIZE.
           PERFORM 1100-OPEN-FILES.

       1100-OPEN-FILES.
           OPEN INPUT CONTROL-FILE
           IF WS-CTL-STATUS NOT = '00'
               MOVE 'ERROR OPENING CONTROL FILE'
                 TO WS-ERROR-MESSAGE
               PERFORM 9999-ERROR-HANDLER
           END-IF.

       2000-CHECK-PREREQUISITES.
           IF WS-PREREQ-OK = 'N'
               MOVE 'Y' TO WS-PREREQ-OK ROUNDED
                   *-- Change: Added ROUNDED for consistent P&L rounding enforcement (User Story: P&L rounding fix)
           END-IF.

       3000-UPDATE-STATUS.
           IF WS-JOB-STATUS = 'N'
               MOVE 'Y' TO WS-JOB-STATUS ROUNDED
                   *-- Change: Added ROUNDED for consistent P&L rounding enforcement (User Story: P&L rounding fix)
           END-IF.

       9999-ERROR-HANDLER.
           DISPLAY WS-ERROR-MESSAGE
           MOVE 12 TO RETURN-CODE
           GOBACK.

[Summary Change Report]
- In paragraphs 2000-CHECK-PREREQUISITES and 3000-UPDATE-STATUS, added the ROUNDED keyword to the MOVE statements to enforce rounding logic.
- Added inline comments for traceability.
- COBOL formatting and indentation preserved.
